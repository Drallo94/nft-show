(function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  /**
   * Animate
   * ======================================
   * - add class to element in viewport
   * - if you want disable animate delay on mobile use [animate-delay-desktop]
   * - set animation delay via [animate-delay] html attribute
   * - set visible threshold via [animate-threshold] html attribute
   */
  var ISMOBILE = window.matchMedia("only screen and (max-width: 768px)").matches;
  var THRESHOLD = '0.75';
  var LOAD_THRESHOLD = '0.2';
  var ELEMENTS$1 = '.animate';
  var VISIBLE_CLASS = 'animate--visible';

  var Animate = function Animate() {
    var _this = this;

    _classCallCheck(this, Animate);

    _defineProperty(this, "observeCallback", function (entries) {
      entries.map(function (entry) {
        var section = entry.target;

        var delay = _this.getDelay(section);

        var sectionBodyClass = section.getAttribute('animate-body-class');

        if (entry.isIntersecting) {
          if (ISMOBILE && section.getAttribute('animate-delay-desktop')) {
            section.classList.add(VISIBLE_CLASS);

            _this.bodyClass(sectionBodyClass, 'add');
          } else {
            setTimeout(function () {
              section.classList.add(VISIBLE_CLASS);

              _this.bodyClass(sectionBodyClass, 'add');
            }, delay);
          }
        } else {
          _this.bodyClass(sectionBodyClass, 'remove');
        }
      });
    });

    _defineProperty(this, "getDelay", function (section) {
      var delay = section.getAttribute('animate-delay');

      if (!ISMOBILE && section.getAttribute('animate-delay-desktop')) {
        var delay = section.getAttribute('animate-delay-desktop');
      }

      if (delay === null) {
        return 0;
      } else if (delay.includes('.')) {
        return parseInt(delay * 1000);
      } else {
        return parseInt(delay);
      }
    });

    _defineProperty(this, "bodyClass", function (htmlclass, type) {
      if (!htmlclass) {
        return;
      }

      if (type == 'add') {
        document.body.classList.add(htmlclass);
      } else {
        document.body.classList.remove(htmlclass);
      }
    });

    this.sections = document.querySelectorAll(ELEMENTS$1);
    this.THRESHOLD = THRESHOLD;
    this.LOAD_THRESHOLD = LOAD_THRESHOLD;

    if ('IntersectionObserver' in window) {
      this.sections.forEach(function (el) {
        var BoundingClientRect = el.getBoundingClientRect();
        var visibleRatio = BoundingClientRect.height / window.innerHeight;

        if (visibleRatio > 0.95) {
          _this.THRESHOLD = window.innerHeight / BoundingClientRect.height / 100 * 30;
          _this.LOAD_THRESHOLD = window.innerHeight / BoundingClientRect.height / 100 * 20;
        } // observe on page load


        var loadObserver = new IntersectionObserver(_this.observeCallback, {
          threshold: _this.LOAD_THRESHOLD
        });
        loadObserver.observe(el);
        setTimeout(function () {
          loadObserver.disconnect();
        }, 100); // observe

        var observerThreshold = el.getAttribute('animate-threshold') ? el.getAttribute('animate-threshold') : _this.THRESHOLD;
        var observer = new IntersectionObserver(_this.observeCallback, {
          threshold: observerThreshold
        });
        observer.observe(el);
      });
    } else {
      this.sections.forEach(function (el) {
        el.classList.add(VISIBLE_CLASS);
      });
    }
  };

  new Animate();

  /*!
   * Splide.js
   * Version  : 3.2.5
   * License  : MIT
   * Copyright: 2021 Naotoshi Fujita
   */
  const PROJECT_CODE = "splide";
  const DATA_ATTRIBUTE = `data-${PROJECT_CODE}`;

  const CREATED = 1;
  const MOUNTED = 2;
  const IDLE = 3;
  const MOVING = 4;
  const DESTROYED = 5;
  const STATES = {
    CREATED,
    MOUNTED,
    IDLE,
    MOVING,
    DESTROYED
  };

  const DEFAULT_EVENT_PRIORITY = 10;
  const DEFAULT_USER_EVENT_PRIORITY = 20;

  function empty(array) {
    array.length = 0;
  }

  function isObject(subject) {
    return !isNull(subject) && typeof subject === "object";
  }
  function isArray(subject) {
    return Array.isArray(subject);
  }
  function isFunction(subject) {
    return typeof subject === "function";
  }
  function isString(subject) {
    return typeof subject === "string";
  }
  function isUndefined(subject) {
    return typeof subject === "undefined";
  }
  function isNull(subject) {
    return subject === null;
  }
  function isHTMLElement(subject) {
    return subject instanceof HTMLElement;
  }

  function toArray(value) {
    return isArray(value) ? value : [value];
  }

  function forEach(values, iteratee) {
    toArray(values).forEach(iteratee);
  }

  function includes(array, value) {
    return array.indexOf(value) > -1;
  }

  function push(array, items) {
    array.push(...toArray(items));
    return array;
  }

  const arrayProto = Array.prototype;

  function slice(arrayLike, start, end) {
    return arrayProto.slice.call(arrayLike, start, end);
  }

  function find(arrayLike, predicate) {
    return slice(arrayLike).filter(predicate)[0];
  }

  function toggleClass$1(elm, classes, add) {
    if (elm) {
      forEach(classes, (name) => {
        if (name) {
          elm.classList[add ? "add" : "remove"](name);
        }
      });
    }
  }

  function addClass(elm, classes) {
    toggleClass$1(elm, isString(classes) ? classes.split(" ") : classes, true);
  }

  function append(parent, children) {
    forEach(children, parent.appendChild.bind(parent));
  }

  function before(nodes, ref) {
    forEach(nodes, (node) => {
      const parent = ref.parentNode;
      if (parent) {
        parent.insertBefore(node, ref);
      }
    });
  }

  function matches(elm, selector) {
    return (elm["msMatchesSelector"] || elm.matches).call(elm, selector);
  }

  function children(parent, selector) {
    return parent ? slice(parent.children).filter((child) => matches(child, selector)) : [];
  }

  function child(parent, selector) {
    return selector ? children(parent, selector)[0] : parent.firstElementChild;
  }

  function forOwn(object, iteratee, right) {
    if (object) {
      let keys = Object.keys(object);
      keys = right ? keys.reverse() : keys;
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== "__proto__") {
          if (iteratee(object[key], key) === false) {
            break;
          }
        }
      }
    }
    return object;
  }

  function assign(object) {
    slice(arguments, 1).forEach((source) => {
      forOwn(source, (value, key) => {
        object[key] = source[key];
      });
    });
    return object;
  }

  function merge(object, source) {
    forOwn(source, (value, key) => {
      if (isArray(value)) {
        object[key] = value.slice();
      } else if (isObject(value)) {
        object[key] = merge(isObject(object[key]) ? object[key] : {}, value);
      } else {
        object[key] = value;
      }
    });
    return object;
  }

  function removeAttribute(elm, attrs) {
    if (elm) {
      forEach(attrs, (attr) => {
        elm.removeAttribute(attr);
      });
    }
  }

  function setAttribute(elm, attrs, value) {
    if (isObject(attrs)) {
      forOwn(attrs, (value2, name) => {
        setAttribute(elm, name, value2);
      });
    } else {
      isNull(value) ? removeAttribute(elm, attrs) : elm.setAttribute(attrs, String(value));
    }
  }

  function create(tag, attrs, parent) {
    const elm = document.createElement(tag);
    if (attrs) {
      isString(attrs) ? addClass(elm, attrs) : setAttribute(elm, attrs);
    }
    parent && append(parent, elm);
    return elm;
  }

  function style(elm, prop, value) {
    if (isUndefined(value)) {
      return getComputedStyle(elm)[prop];
    }
    if (!isNull(value)) {
      const { style: style2 } = elm;
      value = `${value}`;
      if (style2[prop] !== value) {
        style2[prop] = value;
      }
    }
  }

  function display(elm, display2) {
    style(elm, "display", display2);
  }

  function focus(elm) {
    elm["setActive"] && elm["setActive"]() || elm.focus({ preventScroll: true });
  }

  function getAttribute(elm, attr) {
    return elm.getAttribute(attr);
  }

  function hasClass(elm, className) {
    return elm && elm.classList.contains(className);
  }

  function rect(target) {
    return target.getBoundingClientRect();
  }

  function remove(nodes) {
    forEach(nodes, (node) => {
      if (node && node.parentNode) {
        node.parentNode.removeChild(node);
      }
    });
  }

  function measure(parent, value) {
    if (isString(value)) {
      const div = create("div", { style: `width: ${value}; position: absolute;` }, parent);
      value = rect(div).width;
      remove(div);
    }
    return value;
  }

  function parseHtml(html) {
    return child(new DOMParser().parseFromString(html, "text/html").body);
  }

  function prevent(e, stopPropagation) {
    e.preventDefault();
    if (stopPropagation) {
      e.stopPropagation();
      e.stopImmediatePropagation();
    }
  }

  function query(parent, selector) {
    return parent && parent.querySelector(selector);
  }

  function queryAll(parent, selector) {
    return slice(parent.querySelectorAll(selector));
  }

  function removeClass(elm, classes) {
    toggleClass$1(elm, classes, false);
  }

  function unit(value) {
    return isString(value) ? value : value ? `${value}px` : "";
  }

  function assert(condition, message = "") {
    if (!condition) {
      throw new Error(`[${PROJECT_CODE}] ${message}`);
    }
  }

  function nextTick(callback) {
    setTimeout(callback);
  }

  const noop = () => {
  };

  function raf(func) {
    return requestAnimationFrame(func);
  }

  const { min, max, floor, ceil, abs } = Math;

  function approximatelyEqual(x, y, epsilon) {
    return abs(x - y) < epsilon;
  }

  function between(number, minOrMax, maxOrMin, exclusive) {
    const minimum = min(minOrMax, maxOrMin);
    const maximum = max(minOrMax, maxOrMin);
    return exclusive ? minimum < number && number < maximum : minimum <= number && number <= maximum;
  }

  function clamp(number, x, y) {
    const minimum = min(x, y);
    const maximum = max(x, y);
    return min(max(minimum, number), maximum);
  }

  function sign(x) {
    return +(x > 0) - +(x < 0);
  }

  function format(string, replacements) {
    forEach(replacements, (replacement) => {
      string = string.replace("%s", `${replacement}`);
    });
    return string;
  }

  function pad$1(number) {
    return number < 10 ? `0${number}` : `${number}`;
  }

  const ids = {};
  function uniqueId(prefix) {
    return `${prefix}${pad$1(ids[prefix] = (ids[prefix] || 0) + 1)}`;
  }

  function EventBus() {
    let handlers = {};
    function on(events, callback, key, priority = DEFAULT_EVENT_PRIORITY) {
      forEachEvent(events, (event, namespace) => {
        handlers[event] = handlers[event] || [];
        push(handlers[event], {
          _event: event,
          _callback: callback,
          _namespace: namespace,
          _priority: priority,
          _key: key
        }).sort((handler1, handler2) => handler1._priority - handler2._priority);
      });
    }
    function off(events, key) {
      forEachEvent(events, (event, namespace) => {
        const eventHandlers = handlers[event];
        handlers[event] = eventHandlers && eventHandlers.filter((handler) => {
          return handler._key ? handler._key !== key : key || handler._namespace !== namespace;
        });
      });
    }
    function offBy(key) {
      forOwn(handlers, (eventHandlers, event) => {
        off(event, key);
      });
    }
    function emit(event) {
      (handlers[event] || []).forEach((handler) => {
        handler._callback.apply(handler, slice(arguments, 1));
      });
    }
    function destroy() {
      handlers = {};
    }
    function forEachEvent(events, iteratee) {
      toArray(events).join(" ").split(" ").forEach((eventNS) => {
        const fragments = eventNS.split(".");
        iteratee(fragments[0], fragments[1]);
      });
    }
    return {
      on,
      off,
      offBy,
      emit,
      destroy
    };
  }

  const EVENT_MOUNTED = "mounted";
  const EVENT_READY = "ready";
  const EVENT_MOVE = "move";
  const EVENT_MOVED = "moved";
  const EVENT_CLICK = "click";
  const EVENT_ACTIVE = "active";
  const EVENT_INACTIVE = "inactive";
  const EVENT_VISIBLE = "visible";
  const EVENT_HIDDEN = "hidden";
  const EVENT_SLIDE_KEYDOWN = "slide:keydown";
  const EVENT_REFRESH = "refresh";
  const EVENT_UPDATED = "updated";
  const EVENT_RESIZE = "resize";
  const EVENT_RESIZED = "resized";
  const EVENT_REPOSITIONED = "repositioned";
  const EVENT_DRAG = "drag";
  const EVENT_DRAGGING = "dragging";
  const EVENT_DRAGGED = "dragged";
  const EVENT_SCROLL = "scroll";
  const EVENT_SCROLLED = "scrolled";
  const EVENT_DESTROY = "destroy";
  const EVENT_ARROWS_MOUNTED = "arrows:mounted";
  const EVENT_ARROWS_UPDATED = "arrows:updated";
  const EVENT_PAGINATION_MOUNTED = "pagination:mounted";
  const EVENT_PAGINATION_UPDATED = "pagination:updated";
  const EVENT_NAVIGATION_MOUNTED = "navigation:mounted";
  const EVENT_AUTOPLAY_PLAY = "autoplay:play";
  const EVENT_AUTOPLAY_PLAYING = "autoplay:playing";
  const EVENT_AUTOPLAY_PAUSE = "autoplay:pause";
  const EVENT_LAZYLOAD_LOADED = "lazyload:loaded";

  function EventInterface(Splide2) {
    const { event } = Splide2;
    const key = {};
    let listeners = [];
    function on(events, callback, priority) {
      event.on(events, callback, key, priority);
    }
    function off(events) {
      event.off(events, key);
    }
    function bind(targets, events, callback, options) {
      forEachEvent(targets, events, (target, event2) => {
        listeners.push([target, event2, callback, options]);
        target.addEventListener(event2, callback, options);
      });
    }
    function unbind(targets, events, callback) {
      forEachEvent(targets, events, (target, event2) => {
        listeners = listeners.filter((listener) => {
          if (listener[0] === target && listener[1] === event2 && (!callback || listener[2] === callback)) {
            target.removeEventListener(event2, listener[2], listener[3]);
            return false;
          }
          return true;
        });
      });
    }
    function forEachEvent(targets, events, iteratee) {
      forEach(targets, (target) => {
        if (target) {
          events.split(" ").forEach(iteratee.bind(null, target));
        }
      });
    }
    function destroy() {
      listeners = listeners.filter((data) => unbind(data[0], data[1]));
      event.offBy(key);
    }
    event.on(EVENT_DESTROY, destroy, key);
    return {
      on,
      off,
      emit: event.emit,
      bind,
      unbind,
      destroy
    };
  }

  function RequestInterval(interval, onInterval, onUpdate, limit) {
    const { now } = Date;
    let startTime;
    let rate = 0;
    let id;
    let paused = true;
    let count = 0;
    function update() {
      if (!paused) {
        const elapsed = now() - startTime;
        if (elapsed >= interval) {
          rate = 1;
          startTime = now();
        } else {
          rate = elapsed / interval;
        }
        if (onUpdate) {
          onUpdate(rate);
        }
        if (rate === 1) {
          onInterval();
          if (limit && ++count >= limit) {
            return pause();
          }
        }
        raf(update);
      }
    }
    function start(resume) {
      !resume && cancel();
      startTime = now() - (resume ? rate * interval : 0);
      paused = false;
      raf(update);
    }
    function pause() {
      paused = true;
    }
    function rewind() {
      startTime = now();
      rate = 0;
      if (onUpdate) {
        onUpdate(rate);
      }
    }
    function cancel() {
      cancelAnimationFrame(id);
      rate = 0;
      id = 0;
      paused = true;
    }
    function isPaused() {
      return paused;
    }
    return {
      start,
      rewind,
      pause,
      cancel,
      isPaused
    };
  }

  function State(initialState) {
    let state = initialState;
    function set(value) {
      state = value;
    }
    function is(states) {
      return includes(toArray(states), state);
    }
    return { set, is };
  }

  function Throttle(func, duration) {
    let interval;
    function throttled() {
      if (!interval) {
        interval = RequestInterval(duration || 0, () => {
          func.apply(this, arguments);
          interval = null;
        }, null, 1);
        interval.start();
      }
    }
    return throttled;
  }

  function Options(Splide2, Components2, options) {
    const throttledObserve = Throttle(observe);
    let initialOptions;
    let points;
    let currPoint;
    function setup() {
      try {
        merge(options, JSON.parse(getAttribute(Splide2.root, DATA_ATTRIBUTE)));
      } catch (e) {
        assert(false, e.message);
      }
      initialOptions = merge({}, options);
      const { breakpoints } = options;
      if (breakpoints) {
        const isMin = options.mediaQuery === "min";
        points = Object.keys(breakpoints).sort((n, m) => isMin ? +m - +n : +n - +m).map((point) => [
          point,
          matchMedia(`(${isMin ? "min" : "max"}-width:${point}px)`)
        ]);
        observe();
      }
    }
    function mount() {
      if (points) {
        addEventListener("resize", throttledObserve);
      }
    }
    function destroy(completely) {
      if (completely) {
        removeEventListener("resize", throttledObserve);
      }
    }
    function observe() {
      const item = find(points, (item2) => item2[1].matches) || [];
      if (item[0] !== currPoint) {
        onMatch(currPoint = item[0]);
      }
    }
    function onMatch(point) {
      const newOptions = options.breakpoints[point] || initialOptions;
      if (newOptions.destroy) {
        Splide2.options = initialOptions;
        Splide2.destroy(newOptions.destroy === "completely");
      } else {
        if (Splide2.state.is(DESTROYED)) {
          destroy(true);
          Splide2.mount();
        }
        Splide2.options = newOptions;
      }
    }
    return {
      setup,
      mount,
      destroy
    };
  }

  const RTL = "rtl";
  const TTB = "ttb";

  const ORIENTATION_MAP = {
    marginRight: ["marginBottom", "marginLeft"],
    autoWidth: ["autoHeight"],
    fixedWidth: ["fixedHeight"],
    paddingLeft: ["paddingTop", "paddingRight"],
    paddingRight: ["paddingBottom", "paddingLeft"],
    width: ["height"],
    left: ["top", "right"],
    right: ["bottom", "left"],
    x: ["y"],
    X: ["Y"],
    Y: ["X"],
    ArrowLeft: ["ArrowUp", "ArrowRight"],
    ArrowRight: ["ArrowDown", "ArrowLeft"]
  };
  function Direction(Splide2, Components2, options) {
    function resolve(prop, axisOnly) {
      const { direction } = options;
      const index = direction === RTL && !axisOnly ? 1 : direction === TTB ? 0 : -1;
      return ORIENTATION_MAP[prop][index] || prop;
    }
    function orient(value) {
      return value * (options.direction === RTL ? 1 : -1);
    }
    return {
      resolve,
      orient
    };
  }

  const CLASS_ROOT = PROJECT_CODE;
  const CLASS_SLIDER = `${PROJECT_CODE}__slider`;
  const CLASS_TRACK = `${PROJECT_CODE}__track`;
  const CLASS_LIST = `${PROJECT_CODE}__list`;
  const CLASS_SLIDE = `${PROJECT_CODE}__slide`;
  const CLASS_CLONE = `${CLASS_SLIDE}--clone`;
  const CLASS_CONTAINER = `${CLASS_SLIDE}__container`;
  const CLASS_ARROWS = `${PROJECT_CODE}__arrows`;
  const CLASS_ARROW = `${PROJECT_CODE}__arrow`;
  const CLASS_ARROW_PREV = `${CLASS_ARROW}--prev`;
  const CLASS_ARROW_NEXT = `${CLASS_ARROW}--next`;
  const CLASS_PAGINATION = `${PROJECT_CODE}__pagination`;
  const CLASS_PAGINATION_PAGE = `${CLASS_PAGINATION}__page`;
  const CLASS_PROGRESS = `${PROJECT_CODE}__progress`;
  const CLASS_PROGRESS_BAR = `${CLASS_PROGRESS}__bar`;
  const CLASS_AUTOPLAY = `${PROJECT_CODE}__autoplay`;
  const CLASS_PLAY = `${PROJECT_CODE}__play`;
  const CLASS_PAUSE = `${PROJECT_CODE}__pause`;
  const CLASS_SPINNER = `${PROJECT_CODE}__spinner`;
  const CLASS_INITIALIZED = "is-initialized";
  const CLASS_ACTIVE = "is-active";
  const CLASS_PREV = "is-prev";
  const CLASS_NEXT = "is-next";
  const CLASS_VISIBLE = "is-visible";
  const CLASS_LOADING = "is-loading";
  const STATUS_CLASSES = [CLASS_ACTIVE, CLASS_VISIBLE, CLASS_PREV, CLASS_NEXT, CLASS_LOADING];
  const CLASSES = {
    slide: CLASS_SLIDE,
    clone: CLASS_CLONE,
    arrows: CLASS_ARROWS,
    arrow: CLASS_ARROW,
    prev: CLASS_ARROW_PREV,
    next: CLASS_ARROW_NEXT,
    pagination: CLASS_PAGINATION,
    page: CLASS_PAGINATION_PAGE,
    spinner: CLASS_SPINNER
  };

  function Elements(Splide2, Components2, options) {
    const { on } = EventInterface(Splide2);
    const { root } = Splide2;
    const elements = {};
    const slides = [];
    let classes;
    let slider;
    let track;
    let list;
    function setup() {
      collect();
      identify();
      addClass(root, classes = getClasses());
    }
    function mount() {
      on(EVENT_REFRESH, refresh, DEFAULT_EVENT_PRIORITY - 2);
      on(EVENT_UPDATED, update);
    }
    function destroy() {
      [root, track, list].forEach((elm) => {
        removeAttribute(elm, "style");
      });
      empty(slides);
      removeClass(root, classes);
    }
    function refresh() {
      destroy();
      setup();
    }
    function update() {
      removeClass(root, classes);
      addClass(root, classes = getClasses());
    }
    function collect() {
      slider = child(root, `.${CLASS_SLIDER}`);
      track = query(root, `.${CLASS_TRACK}`);
      list = child(track, `.${CLASS_LIST}`);
      assert(track && list, "A track/list element is missing.");
      push(slides, children(list, `.${CLASS_SLIDE}:not(.${CLASS_CLONE})`));
      const autoplay = find(`.${CLASS_AUTOPLAY}`);
      const arrows = find(`.${CLASS_ARROWS}`);
      assign(elements, {
        root,
        slider,
        track,
        list,
        slides,
        arrows,
        autoplay,
        prev: query(arrows, `.${CLASS_ARROW_PREV}`),
        next: query(arrows, `.${CLASS_ARROW_NEXT}`),
        bar: query(find(`.${CLASS_PROGRESS}`), `.${CLASS_PROGRESS_BAR}`),
        play: query(autoplay, `.${CLASS_PLAY}`),
        pause: query(autoplay, `.${CLASS_PAUSE}`)
      });
    }
    function identify() {
      const id = root.id || uniqueId(PROJECT_CODE);
      root.id = id;
      track.id = track.id || `${id}-track`;
      list.id = list.id || `${id}-list`;
    }
    function find(selector) {
      return child(root, selector) || child(slider, selector);
    }
    function getClasses() {
      return [
        `${CLASS_ROOT}--${options.type}`,
        `${CLASS_ROOT}--${options.direction}`,
        options.drag && `${CLASS_ROOT}--draggable`,
        options.isNavigation && `${CLASS_ROOT}--nav`,
        CLASS_ACTIVE
      ];
    }
    return assign(elements, {
      setup,
      mount,
      destroy
    });
  }

  const ROLE = "role";
  const ARIA_CONTROLS = "aria-controls";
  const ARIA_CURRENT = "aria-current";
  const ARIA_LABEL = "aria-label";
  const ARIA_HIDDEN = "aria-hidden";
  const TAB_INDEX = "tabindex";
  const DISABLED = "disabled";
  const ARIA_ORIENTATION = "aria-orientation";
  const ALL_ATTRIBUTES = [
    ROLE,
    ARIA_CONTROLS,
    ARIA_CURRENT,
    ARIA_LABEL,
    ARIA_HIDDEN,
    ARIA_ORIENTATION,
    TAB_INDEX,
    DISABLED
  ];

  const SLIDE = "slide";
  const LOOP = "loop";
  const FADE = "fade";

  function Slide$1(Splide2, index, slideIndex, slide) {
    const { on, emit, bind, destroy: destroyEvents } = EventInterface(Splide2);
    const { Components, root, options } = Splide2;
    const { isNavigation, updateOnMove } = options;
    const { resolve } = Components.Direction;
    const styles = getAttribute(slide, "style");
    const isClone = slideIndex > -1;
    const container = child(slide, `.${CLASS_CONTAINER}`);
    const focusableNodes = options.focusableNodes && queryAll(slide, options.focusableNodes);
    let destroyed;
    function mount() {
      init();
      bind(slide, "click keydown", (e) => {
        emit(e.type === "click" ? EVENT_CLICK : EVENT_SLIDE_KEYDOWN, this, e);
      });
      on([EVENT_REFRESH, EVENT_REPOSITIONED, EVENT_MOVED, EVENT_SCROLLED], update.bind(this));
      if (updateOnMove) {
        on(EVENT_MOVE, onMove.bind(this));
      }
    }
    function init() {
      if (!isClone) {
        slide.id = `${root.id}-slide${pad$1(index + 1)}`;
      }
      if (isNavigation) {
        const idx = isClone ? slideIndex : index;
        const label = format(options.i18n.slideX, idx + 1);
        const controls = Splide2.splides.map((splide) => splide.root.id).join(" ");
        setAttribute(slide, ARIA_LABEL, label);
        setAttribute(slide, ARIA_CONTROLS, controls);
        setAttribute(slide, ROLE, "menuitem");
      }
    }
    function destroy() {
      destroyed = true;
      destroyEvents();
      removeClass(slide, STATUS_CLASSES);
      removeAttribute(slide, ALL_ATTRIBUTES);
      setAttribute(slide, "style", styles);
    }
    function onMove(next, prev, dest) {
      if (!destroyed) {
        update.call(this);
        if (dest === index) {
          updateActivity.call(this, true);
        }
      }
    }
    function update() {
      if (!destroyed) {
        const { index: currIndex } = Splide2;
        updateActivity.call(this, isActive());
        updateVisibility.call(this, isVisible());
        toggleClass$1(slide, CLASS_PREV, index === currIndex - 1);
        toggleClass$1(slide, CLASS_NEXT, index === currIndex + 1);
      }
    }
    function updateActivity(active) {
      if (active !== hasClass(slide, CLASS_ACTIVE)) {
        toggleClass$1(slide, CLASS_ACTIVE, active);
        if (isNavigation) {
          setAttribute(slide, ARIA_CURRENT, active || null);
        }
        emit(active ? EVENT_ACTIVE : EVENT_INACTIVE, this);
      }
    }
    function updateVisibility(visible) {
      const ariaHidden = !visible && !isActive();
      setAttribute(slide, ARIA_HIDDEN, ariaHidden || null);
      setAttribute(slide, TAB_INDEX, !ariaHidden && options.slideFocus ? 0 : null);
      if (focusableNodes) {
        focusableNodes.forEach((node) => {
          setAttribute(node, TAB_INDEX, ariaHidden ? -1 : null);
        });
      }
      if (visible !== hasClass(slide, CLASS_VISIBLE)) {
        toggleClass$1(slide, CLASS_VISIBLE, visible);
        emit(visible ? EVENT_VISIBLE : EVENT_HIDDEN, this);
      }
    }
    function style$1(prop, value, useContainer) {
      style(useContainer && container || slide, prop, value);
    }
    function isActive() {
      return Splide2.index === index;
    }
    function isVisible() {
      if (Splide2.is(FADE)) {
        return isActive();
      }
      const trackRect = rect(Components.Elements.track);
      const slideRect = rect(slide);
      const left = resolve("left");
      const right = resolve("right");
      return floor(trackRect[left]) <= ceil(slideRect[left]) && floor(slideRect[right]) <= ceil(trackRect[right]);
    }
    function isWithin(from, distance) {
      let diff = abs(from - index);
      if (!isClone && (options.rewind || Splide2.is(LOOP))) {
        diff = min(diff, Splide2.length - diff);
      }
      return diff <= distance;
    }
    return {
      index,
      slideIndex,
      slide,
      container,
      isClone,
      mount,
      destroy,
      style: style$1,
      isWithin
    };
  }

  function Slides(Splide2, Components2, options) {
    const { on, emit, bind } = EventInterface(Splide2);
    const { slides, list } = Components2.Elements;
    const Slides2 = [];
    function mount() {
      init();
      on(EVENT_REFRESH, refresh);
      on([EVENT_MOUNTED, EVENT_REFRESH], () => {
        Slides2.sort((Slide1, Slide2) => Slide1.index - Slide2.index);
      });
    }
    function init() {
      slides.forEach((slide, index) => {
        register(slide, index, -1);
      });
    }
    function destroy() {
      forEach$1((Slide2) => {
        Slide2.destroy();
      });
      empty(Slides2);
    }
    function refresh() {
      destroy();
      init();
    }
    function register(slide, index, slideIndex) {
      const object = Slide$1(Splide2, index, slideIndex, slide);
      object.mount();
      Slides2.push(object);
    }
    function get(excludeClones) {
      return excludeClones ? filter((Slide2) => !Slide2.isClone) : Slides2;
    }
    function getIn(page) {
      const { Controller } = Components2;
      const index = Controller.toIndex(page);
      const max = Controller.hasFocus() ? 1 : options.perPage;
      return filter((Slide2) => between(Slide2.index, index, index + max - 1));
    }
    function getAt(index) {
      return filter(index)[0];
    }
    function add(items, index) {
      forEach(items, (slide) => {
        if (isString(slide)) {
          slide = parseHtml(slide);
        }
        if (isHTMLElement(slide)) {
          const ref = slides[index];
          ref ? before(slide, ref) : append(list, slide);
          addClass(slide, options.classes.slide);
          observeImages(slide, emit.bind(null, EVENT_RESIZE));
        }
      });
      emit(EVENT_REFRESH);
    }
    function remove$1(matcher) {
      remove(filter(matcher).map((Slide2) => Slide2.slide));
      emit(EVENT_REFRESH);
    }
    function forEach$1(iteratee, excludeClones) {
      get(excludeClones).forEach(iteratee);
    }
    function filter(matcher) {
      return Slides2.filter(isFunction(matcher) ? matcher : (Slide2) => isString(matcher) ? matches(Slide2.slide, matcher) : includes(toArray(matcher), Slide2.index));
    }
    function style(prop, value, useContainer) {
      forEach$1((Slide2) => {
        Slide2.style(prop, value, useContainer);
      });
    }
    function observeImages(elm, callback) {
      const images = queryAll(elm, "img");
      let { length } = images;
      if (length) {
        images.forEach((img) => {
          bind(img, "load error", () => {
            if (!--length) {
              callback();
            }
          });
        });
      } else {
        callback();
      }
    }
    function getLength(excludeClones) {
      return excludeClones ? slides.length : Slides2.length;
    }
    function isEnough() {
      return Slides2.length > options.perPage;
    }
    return {
      mount,
      destroy,
      register,
      get,
      getIn,
      getAt,
      add,
      remove: remove$1,
      forEach: forEach$1,
      filter,
      style,
      getLength,
      isEnough
    };
  }

  function Layout(Splide2, Components2, options) {
    const { on, bind, emit } = EventInterface(Splide2);
    const { Slides } = Components2;
    const { resolve } = Components2.Direction;
    const { root, track, list } = Components2.Elements;
    const { getAt } = Slides;
    let vertical;
    let rootRect;
    function mount() {
      init();
      bind(window, "resize load", Throttle(emit.bind(this, EVENT_RESIZE)));
      on([EVENT_UPDATED, EVENT_REFRESH], init);
      on(EVENT_RESIZE, resize);
    }
    function init() {
      rootRect = null;
      vertical = options.direction === TTB;
      style(root, "maxWidth", unit(options.width));
      style(track, resolve("paddingLeft"), cssPadding(false));
      style(track, resolve("paddingRight"), cssPadding(true));
      resize();
    }
    function resize() {
      const newRect = rect(root);
      if (!rootRect || rootRect.width !== newRect.width || rootRect.height !== newRect.height) {
        style(track, "height", cssTrackHeight());
        Slides.style(resolve("marginRight"), unit(options.gap));
        Slides.style("width", cssSlideWidth() || null);
        setSlidesHeight();
        rootRect = newRect;
        emit(EVENT_RESIZED);
      }
    }
    function setSlidesHeight() {
      Slides.style("height", cssSlideHeight() || null, true);
    }
    function cssPadding(right) {
      const { padding } = options;
      const prop = resolve(right ? "right" : "left");
      return padding && unit(padding[prop] || (isObject(padding) ? 0 : padding)) || "0px";
    }
    function cssTrackHeight() {
      let height = "";
      if (vertical) {
        height = cssHeight();
        assert(height, "height or heightRatio is missing.");
        height = `calc(${height} - ${cssPadding(false)} - ${cssPadding(true)})`;
      }
      return height;
    }
    function cssHeight() {
      return unit(options.height || rect(list).width * options.heightRatio);
    }
    function cssSlideWidth() {
      return options.autoWidth ? "" : unit(options.fixedWidth) || (vertical ? "" : cssSlideSize());
    }
    function cssSlideHeight() {
      return unit(options.fixedHeight) || (vertical ? options.autoHeight ? "" : cssSlideSize() : cssHeight());
    }
    function cssSlideSize() {
      const gap = unit(options.gap);
      return `calc((100%${gap && ` + ${gap}`})/${options.perPage || 1}${gap && ` - ${gap}`})`;
    }
    function listSize() {
      return rect(list)[resolve("width")];
    }
    function slideSize(index, withoutGap) {
      const Slide = getAt(index || 0);
      return Slide ? rect(Slide.slide)[resolve("width")] + (withoutGap ? 0 : getGap()) : 0;
    }
    function totalSize(index, withoutGap) {
      const Slide = getAt(index);
      if (Slide) {
        const right = rect(Slide.slide)[resolve("right")];
        const left = rect(list)[resolve("left")];
        return abs(right - left) + (withoutGap ? 0 : getGap());
      }
      return 0;
    }
    function sliderSize() {
      return totalSize(Splide2.length - 1, true) - totalSize(-1, true);
    }
    function getGap() {
      const Slide = getAt(0);
      return Slide && parseFloat(style(Slide.slide, resolve("marginRight"))) || 0;
    }
    function getPadding(right) {
      return parseFloat(style(track, resolve(`padding${right ? "Right" : "Left"}`))) || 0;
    }
    return {
      mount,
      listSize,
      slideSize,
      sliderSize,
      totalSize,
      getPadding
    };
  }

  function Clones(Splide2, Components2, options) {
    const { on, emit } = EventInterface(Splide2);
    const { Elements, Slides } = Components2;
    const { resolve } = Components2.Direction;
    const clones = [];
    let cloneCount;
    function mount() {
      init();
      on(EVENT_REFRESH, refresh);
      on([EVENT_UPDATED, EVENT_RESIZE], observe);
    }
    function init() {
      if (cloneCount = computeCloneCount()) {
        generate(cloneCount);
        emit(EVENT_RESIZE);
      }
    }
    function destroy() {
      remove(clones);
      empty(clones);
    }
    function refresh() {
      destroy();
      init();
    }
    function observe() {
      if (cloneCount < computeCloneCount()) {
        emit(EVENT_REFRESH);
      }
    }
    function generate(count) {
      const slides = Slides.get().slice();
      const { length } = slides;
      if (length) {
        while (slides.length < count) {
          push(slides, slides);
        }
        push(slides.slice(-count), slides.slice(0, count)).forEach((Slide, index) => {
          const isHead = index < count;
          const clone = cloneDeep(Slide.slide, index);
          isHead ? before(clone, slides[0].slide) : append(Elements.list, clone);
          push(clones, clone);
          Slides.register(clone, index - count + (isHead ? 0 : length), Slide.index);
        });
      }
    }
    function cloneDeep(elm, index) {
      const clone = elm.cloneNode(true);
      addClass(clone, options.classes.clone);
      clone.id = `${Splide2.root.id}-clone${pad$1(index + 1)}`;
      return clone;
    }
    function computeCloneCount() {
      let { clones: clones2 } = options;
      if (!Splide2.is(LOOP)) {
        clones2 = 0;
      } else if (!clones2) {
        const fixedSize = measure(Elements.list, options[resolve("fixedWidth")]);
        const fixedCount = fixedSize && ceil(rect(Elements.track)[resolve("width")] / fixedSize);
        const baseCount = fixedCount || options[resolve("autoWidth")] && Splide2.length || options.perPage;
        clones2 = baseCount * (options.drag ? (options.flickMaxPages || 1) + 1 : 2);
      }
      return clones2;
    }
    return {
      mount,
      destroy
    };
  }

  function Move(Splide2, Components2, options) {
    const { on, emit } = EventInterface(Splide2);
    const { slideSize, getPadding, totalSize, listSize, sliderSize } = Components2.Layout;
    const { resolve, orient } = Components2.Direction;
    const { list, track } = Components2.Elements;
    let waiting;
    function mount() {
      on([EVENT_MOUNTED, EVENT_RESIZED, EVENT_UPDATED, EVENT_REFRESH], reposition);
    }
    function destroy() {
      removeAttribute(list, "style");
    }
    function reposition() {
      if (!isBusy()) {
        Components2.Scroll.cancel();
        jump(Splide2.index);
        emit(EVENT_REPOSITIONED);
      }
    }
    function move(dest, index, prev, callback) {
      if (!isBusy()) {
        const { set } = Splide2.state;
        const position = getPosition();
        const looping = dest !== index;
        waiting = looping || options.waitForTransition;
        set(MOVING);
        emit(EVENT_MOVE, index, prev, dest);
        Components2.Transition.start(dest, () => {
          looping && jump(index);
          waiting = false;
          set(IDLE);
          emit(EVENT_MOVED, index, prev, dest);
          if (options.trimSpace === "move" && dest !== prev && position === getPosition()) {
            Components2.Controller.go(dest > prev ? ">" : "<", false, callback);
          } else {
            callback && callback();
          }
        });
      }
    }
    function jump(index) {
      translate(toPosition(index, true));
    }
    function translate(position, preventLoop) {
      if (!Splide2.is(FADE)) {
        list.style.transform = `translate${resolve("X")}(${preventLoop ? position : loop(position)}px)`;
      }
    }
    function loop(position) {
      if (!waiting && Splide2.is(LOOP)) {
        const diff = orient(position - getPosition());
        const exceededMin = exceededLimit(false, position) && diff < 0;
        const exceededMax = exceededLimit(true, position) && diff > 0;
        if (exceededMin || exceededMax) {
          position = shift(position, exceededMax);
        }
      }
      return position;
    }
    function shift(position, backwards) {
      const excess = position - getLimit(backwards);
      const size = sliderSize();
      position -= sign(excess) * size * ceil(abs(excess) / size);
      return position;
    }
    function cancel() {
      waiting = false;
      translate(getPosition());
      Components2.Transition.cancel();
    }
    function toIndex(position) {
      const Slides = Components2.Slides.get();
      let index = 0;
      let minDistance = Infinity;
      for (let i = 0; i < Slides.length; i++) {
        const slideIndex = Slides[i].index;
        const distance = abs(toPosition(slideIndex, true) - position);
        if (distance <= minDistance) {
          minDistance = distance;
          index = slideIndex;
        } else {
          break;
        }
      }
      return index;
    }
    function toPosition(index, trimming) {
      const position = orient(totalSize(index - 1) - offset(index));
      return trimming ? trim(position) : position;
    }
    function getPosition() {
      const left = resolve("left");
      return rect(list)[left] - rect(track)[left] + orient(getPadding(false));
    }
    function trim(position) {
      if (options.trimSpace && Splide2.is(SLIDE)) {
        position = clamp(position, 0, orient(sliderSize() - listSize()));
      }
      return position;
    }
    function offset(index) {
      const { focus } = options;
      return focus === "center" ? (listSize() - slideSize(index, true)) / 2 : +focus * slideSize(index) || 0;
    }
    function getLimit(max) {
      return toPosition(max ? Components2.Controller.getEnd() : 0, !!options.trimSpace);
    }
    function isBusy() {
      return !!waiting;
    }
    function exceededLimit(max, position) {
      position = isUndefined(position) ? getPosition() : position;
      const exceededMin = max !== true && orient(position) < orient(getLimit(false));
      const exceededMax = max !== false && orient(position) > orient(getLimit(true));
      return exceededMin || exceededMax;
    }
    return {
      mount,
      destroy,
      move,
      jump,
      translate,
      shift,
      cancel,
      toIndex,
      toPosition,
      getPosition,
      getLimit,
      isBusy,
      exceededLimit
    };
  }

  function Controller(Splide2, Components2, options) {
    const { on } = EventInterface(Splide2);
    const { Move } = Components2;
    const { getPosition, getLimit } = Move;
    const { isEnough, getLength } = Components2.Slides;
    const isLoop = Splide2.is(LOOP);
    const isSlide = Splide2.is(SLIDE);
    let currIndex = options.start || 0;
    let prevIndex = currIndex;
    let slideCount;
    let perMove;
    let perPage;
    function mount() {
      init();
      on([EVENT_UPDATED, EVENT_REFRESH], init, DEFAULT_EVENT_PRIORITY - 1);
    }
    function init() {
      slideCount = getLength(true);
      perMove = options.perMove;
      perPage = options.perPage;
      currIndex = clamp(currIndex, 0, slideCount - 1);
    }
    function go(control, allowSameIndex, callback) {
      const dest = parse(control);
      if (options.useScroll) {
        scroll(dest, true, true, options.speed, callback);
      } else {
        const index = loop(dest);
        if (index > -1 && !Move.isBusy() && (allowSameIndex || index !== currIndex)) {
          setIndex(index);
          Move.move(dest, index, prevIndex, callback);
        }
      }
    }
    function scroll(destination, useIndex, snap, duration, callback) {
      const dest = useIndex ? destination : toDest(destination);
      Components2.Scroll.scroll(useIndex || snap ? Move.toPosition(dest, true) : destination, duration, () => {
        setIndex(Move.toIndex(Move.getPosition()));
        callback && callback();
      });
    }
    function parse(control) {
      let index = currIndex;
      if (isString(control)) {
        const [, indicator, number] = control.match(/([+\-<>])(\d+)?/) || [];
        if (indicator === "+" || indicator === "-") {
          index = computeDestIndex(currIndex + +`${indicator}${+number || 1}`, currIndex, true);
        } else if (indicator === ">") {
          index = number ? toIndex(+number) : getNext(true);
        } else if (indicator === "<") {
          index = getPrev(true);
        }
      } else {
        if (isLoop) {
          index = clamp(control, -perPage, slideCount + perPage - 1);
        } else {
          index = clamp(control, 0, getEnd());
        }
      }
      return index;
    }
    function getNext(destination) {
      return getAdjacent(false, destination);
    }
    function getPrev(destination) {
      return getAdjacent(true, destination);
    }
    function getAdjacent(prev, destination) {
      const number = perMove || (hasFocus() ? 1 : perPage);
      const dest = computeDestIndex(currIndex + number * (prev ? -1 : 1), currIndex);
      if (dest === -1 && isSlide) {
        if (!approximatelyEqual(getPosition(), getLimit(!prev), 1)) {
          return prev ? 0 : getEnd();
        }
      }
      return destination ? dest : loop(dest);
    }
    function computeDestIndex(dest, from, incremental) {
      if (isEnough()) {
        const end = getEnd();
        if (dest < 0 || dest > end) {
          if (between(0, dest, from, true) || between(end, from, dest, true)) {
            dest = toIndex(toPage(dest));
          } else {
            if (isLoop) {
              dest = perMove ? dest : dest < 0 ? -(slideCount % perPage || perPage) : slideCount;
            } else if (options.rewind) {
              dest = dest < 0 ? end : 0;
            } else {
              dest = -1;
            }
          }
        } else {
          if (!incremental && dest !== from) {
            dest = perMove ? dest : toIndex(toPage(from) + (dest < from ? -1 : 1));
          }
        }
      } else {
        dest = -1;
      }
      return dest;
    }
    function getEnd() {
      let end = slideCount - perPage;
      if (hasFocus() || isLoop && perMove) {
        end = slideCount - 1;
      }
      return max(end, 0);
    }
    function loop(index) {
      if (isLoop) {
        return isEnough() ? index % slideCount + (index < 0 ? slideCount : 0) : -1;
      }
      return index;
    }
    function toIndex(page) {
      return clamp(hasFocus() ? page : perPage * page, 0, getEnd());
    }
    function toPage(index) {
      if (!hasFocus()) {
        index = between(index, slideCount - perPage, slideCount - 1) ? slideCount - 1 : index;
        index = floor(index / perPage);
      }
      return index;
    }
    function toDest(destination) {
      const closest = Move.toIndex(destination);
      return isSlide ? clamp(closest, 0, getEnd()) : closest;
    }
    function setIndex(index) {
      if (index !== currIndex) {
        prevIndex = currIndex;
        currIndex = index;
      }
    }
    function getIndex(prev) {
      return prev ? prevIndex : currIndex;
    }
    function hasFocus() {
      return !isUndefined(options.focus) || options.isNavigation;
    }
    return {
      mount,
      go,
      scroll,
      getNext,
      getPrev,
      getEnd,
      setIndex,
      getIndex,
      toIndex,
      toPage,
      toDest,
      hasFocus
    };
  }

  const XML_NAME_SPACE = "http://www.w3.org/2000/svg";
  const PATH = "m15.5 0.932-4.3 4.38 14.5 14.6-14.5 14.5 4.3 4.4 14.6-14.6 4.4-4.3-4.4-4.4-14.6-14.6z";
  const SIZE = 40;

  function Arrows(Splide2, Components2, options) {
    const { on, bind, emit } = EventInterface(Splide2);
    const { classes, i18n } = options;
    const { Elements, Controller } = Components2;
    let wrapper = Elements.arrows;
    let prev = Elements.prev;
    let next = Elements.next;
    let created;
    const arrows = {};
    function mount() {
      init();
      on(EVENT_UPDATED, init);
    }
    function init() {
      if (options.arrows) {
        if (!prev || !next) {
          createArrows();
        }
      }
      if (prev && next) {
        if (!arrows.prev) {
          const { id } = Elements.track;
          setAttribute(prev, ARIA_CONTROLS, id);
          setAttribute(next, ARIA_CONTROLS, id);
          arrows.prev = prev;
          arrows.next = next;
          listen();
          emit(EVENT_ARROWS_MOUNTED, prev, next);
        } else {
          display(wrapper, options.arrows === false ? "none" : "");
        }
      }
    }
    function destroy() {
      if (created) {
        remove(wrapper);
      } else {
        removeAttribute(prev, ALL_ATTRIBUTES);
        removeAttribute(next, ALL_ATTRIBUTES);
      }
    }
    function listen() {
      const { go } = Controller;
      on([EVENT_MOUNTED, EVENT_MOVED, EVENT_UPDATED, EVENT_REFRESH, EVENT_SCROLLED], update);
      bind(next, "click", () => {
        go(">", true);
      });
      bind(prev, "click", () => {
        go("<", true);
      });
    }
    function createArrows() {
      wrapper = create("div", classes.arrows);
      prev = createArrow(true);
      next = createArrow(false);
      created = true;
      append(wrapper, [prev, next]);
      before(wrapper, child(options.arrows === "slider" && Elements.slider || Splide2.root));
    }
    function createArrow(prev2) {
      const arrow = `<button class="${classes.arrow} ${prev2 ? classes.prev : classes.next}" type="button"><svg xmlns="${XML_NAME_SPACE}" viewBox="0 0 ${SIZE} ${SIZE}" width="${SIZE}" height="${SIZE}"><path d="${options.arrowPath || PATH}" />`;
      return parseHtml(arrow);
    }
    function update() {
      const index = Splide2.index;
      const prevIndex = Controller.getPrev();
      const nextIndex = Controller.getNext();
      const prevLabel = prevIndex > -1 && index < prevIndex ? i18n.last : i18n.prev;
      const nextLabel = nextIndex > -1 && index > nextIndex ? i18n.first : i18n.next;
      prev.disabled = prevIndex < 0;
      next.disabled = nextIndex < 0;
      setAttribute(prev, ARIA_LABEL, prevLabel);
      setAttribute(next, ARIA_LABEL, nextLabel);
      emit(EVENT_ARROWS_UPDATED, prev, next, prevIndex, nextIndex);
    }
    return {
      arrows,
      mount,
      destroy
    };
  }

  function Autoplay(Splide2, Components2, options) {
    const { on, bind, emit } = EventInterface(Splide2);
    const { Elements } = Components2;
    const interval = RequestInterval(options.interval, Splide2.go.bind(Splide2, ">"), update);
    const { isPaused } = interval;
    let hovered;
    let focused;
    let paused;
    function mount() {
      const { autoplay } = options;
      if (autoplay) {
        initButton(true);
        initButton(false);
        listen();
        if (autoplay !== "pause") {
          play();
        }
      }
    }
    function initButton(forPause) {
      const prop = forPause ? "pause" : "play";
      const button = Elements[prop];
      if (button) {
        setAttribute(button, ARIA_CONTROLS, Elements.track.id);
        setAttribute(button, ARIA_LABEL, options.i18n[prop]);
        bind(button, "click", forPause ? pause : play);
      }
    }
    function listen() {
      const { root } = Elements;
      if (options.pauseOnHover) {
        bind(root, "mouseenter mouseleave", (e) => {
          hovered = e.type === "mouseenter";
          autoToggle();
        });
      }
      if (options.pauseOnFocus) {
        bind(root, "focusin focusout", (e) => {
          focused = e.type === "focusin";
          autoToggle();
        });
      }
      on([EVENT_MOVE, EVENT_SCROLL, EVENT_REFRESH], interval.rewind);
    }
    function play() {
      if (isPaused() && Components2.Slides.isEnough()) {
        interval.start(!options.resetProgress);
        focused = hovered = paused = false;
        emit(EVENT_AUTOPLAY_PLAY);
      }
    }
    function pause(manual = true) {
      if (!isPaused()) {
        interval.pause();
        emit(EVENT_AUTOPLAY_PAUSE);
      }
      paused = manual;
    }
    function autoToggle() {
      if (!paused) {
        if (!hovered && !focused) {
          play();
        } else {
          pause(false);
        }
      }
    }
    function update(rate) {
      const { bar } = Elements;
      if (bar) {
        style(bar, "width", `${rate * 100}%`);
      }
      emit(EVENT_AUTOPLAY_PLAYING, rate);
    }
    return {
      mount,
      destroy: interval.cancel,
      play,
      pause,
      isPaused
    };
  }

  function Cover(Splide2, Components2, options) {
    const { on } = EventInterface(Splide2);
    function mount() {
      if (options.cover) {
        on(EVENT_LAZYLOAD_LOADED, (img, Slide) => {
          toggle(true, img, Slide);
        });
        on([EVENT_MOUNTED, EVENT_UPDATED, EVENT_REFRESH], apply.bind(null, true));
      }
    }
    function destroy() {
      apply(false);
    }
    function apply(cover) {
      Components2.Slides.forEach((Slide) => {
        const img = child(Slide.container || Slide.slide, "img");
        if (img && img.src) {
          toggle(cover, img, Slide);
        }
      });
    }
    function toggle(cover, img, Slide) {
      Slide.style("background", cover ? `center/cover no-repeat url("${img.src}")` : "", true);
      display(img, cover ? "none" : "");
    }
    return {
      mount,
      destroy
    };
  }

  const BOUNCE_DIFF_THRESHOLD = 10;
  const BOUNCE_DURATION = 600;
  const FRICTION_FACTOR = 0.6;
  const BASE_VELOCITY = 1.5;
  const MIN_DURATION = 800;

  function Scroll(Splide2, Components2, options) {
    const { on, emit } = EventInterface(Splide2);
    const { Move } = Components2;
    const { getPosition, getLimit, exceededLimit } = Move;
    let interval;
    let scrollCallback;
    function mount() {
      on(EVENT_MOVE, clear);
      on([EVENT_UPDATED, EVENT_REFRESH], cancel);
    }
    function scroll(destination, duration, callback, suppressConstraint) {
      const start = getPosition();
      let friction = 1;
      duration = duration || computeDuration(abs(destination - start));
      scrollCallback = callback;
      clear();
      interval = RequestInterval(duration, onScrolled, (rate) => {
        const position = getPosition();
        const target = start + (destination - start) * easing(rate);
        const diff = (target - getPosition()) * friction;
        Move.translate(position + diff);
        if (Splide2.is(SLIDE) && !suppressConstraint && exceededLimit()) {
          friction *= FRICTION_FACTOR;
          if (abs(diff) < BOUNCE_DIFF_THRESHOLD) {
            bounce(exceededLimit(false));
          }
        }
      }, 1);
      emit(EVENT_SCROLL);
      interval.start();
    }
    function bounce(backwards) {
      scroll(getLimit(!backwards), BOUNCE_DURATION, null, true);
    }
    function onScrolled() {
      const position = getPosition();
      const index = Move.toIndex(position);
      if (!between(index, 0, Splide2.length - 1)) {
        Move.translate(Move.shift(position, index > 0), true);
      }
      scrollCallback && scrollCallback();
      emit(EVENT_SCROLLED);
    }
    function computeDuration(distance) {
      return max(distance / BASE_VELOCITY, MIN_DURATION);
    }
    function clear() {
      if (interval) {
        interval.cancel();
      }
    }
    function cancel() {
      if (interval && !interval.isPaused()) {
        clear();
        onScrolled();
      }
    }
    function easing(t) {
      const { easingFunc } = options;
      return easingFunc ? easingFunc(t) : 1 - Math.pow(1 - t, 4);
    }
    return {
      mount,
      destroy: clear,
      scroll,
      cancel
    };
  }

  const FRICTION = 5;
  const LOG_INTERVAL = 200;
  const POINTER_DOWN_EVENTS = "touchstart mousedown";
  const POINTER_MOVE_EVENTS = "touchmove mousemove";
  const POINTER_UP_EVENTS = "touchend touchcancel mouseup";

  function Drag(Splide2, Components2, options) {
    const { on, emit, bind, unbind } = EventInterface(Splide2);
    const { Move, Scroll, Controller } = Components2;
    const { track } = Components2.Elements;
    const { resolve, orient } = Components2.Direction;
    const { getPosition, exceededLimit } = Move;
    const listenerOptions = { passive: false, capture: true };
    let basePosition;
    let baseEvent;
    let prevBaseEvent;
    let lastEvent;
    let isFree;
    let dragging;
    let hasExceeded = false;
    let clickPrevented;
    let disabled;
    let target;
    function mount() {
      bind(track, POINTER_MOVE_EVENTS, noop, listenerOptions);
      bind(track, POINTER_UP_EVENTS, noop, listenerOptions);
      bind(track, POINTER_DOWN_EVENTS, onPointerDown, listenerOptions);
      bind(track, "click", onClick, { capture: true });
      bind(track, "dragstart", prevent);
      on([EVENT_MOUNTED, EVENT_UPDATED], init);
    }
    function init() {
      const { drag } = options;
      disable(!drag);
      isFree = drag === "free";
    }
    function onPointerDown(e) {
      if (!disabled) {
        const { noDrag } = options;
        const isTouch = isTouchEvent(e);
        const isDraggable = !noDrag || isHTMLElement(e.target) && !matches(e.target, noDrag);
        if (isDraggable && (isTouch || !e.button)) {
          if (!Move.isBusy()) {
            target = isTouch ? track : window;
            prevBaseEvent = null;
            lastEvent = null;
            clickPrevented = false;
            bind(target, POINTER_MOVE_EVENTS, onPointerMove, listenerOptions);
            bind(target, POINTER_UP_EVENTS, onPointerUp, listenerOptions);
            Move.cancel();
            Scroll.cancel();
            save(e);
          } else {
            prevent(e, true);
          }
        }
      }
    }
    function onPointerMove(e) {
      if (!lastEvent) {
        emit(EVENT_DRAG);
      }
      lastEvent = e;
      if (e.cancelable) {
        const diff = coordOf(e) - coordOf(baseEvent);
        if (dragging) {
          Move.translate(basePosition + constrain(diff));
          const expired = timeOf(e) - timeOf(baseEvent) > LOG_INTERVAL;
          const exceeded = hasExceeded !== (hasExceeded = exceededLimit());
          if (expired || exceeded) {
            save(e);
          }
          emit(EVENT_DRAGGING);
          clickPrevented = true;
          prevent(e);
        } else {
          let { dragMinThreshold: thresholds } = options;
          thresholds = isObject(thresholds) ? thresholds : { mouse: 0, touch: +thresholds || 10 };
          dragging = abs(diff) > (isTouchEvent(e) ? thresholds.touch : thresholds.mouse);
          if (isSliderDirection()) {
            prevent(e);
          }
        }
      }
    }
    function onPointerUp(e) {
      unbind(target, POINTER_MOVE_EVENTS, onPointerMove);
      unbind(target, POINTER_UP_EVENTS, onPointerUp);
      if (lastEvent) {
        if (dragging || e.cancelable && isSliderDirection()) {
          const velocity = computeVelocity(e);
          const destination = computeDestination(velocity);
          if (isFree) {
            Controller.scroll(destination);
          } else if (Splide2.is(FADE)) {
            Controller.go(Splide2.index + orient(sign(velocity)));
          } else {
            Controller.go(Controller.toDest(destination), true);
          }
          prevent(e);
        }
        emit(EVENT_DRAGGED);
      }
      dragging = false;
    }
    function save(e) {
      prevBaseEvent = baseEvent;
      baseEvent = e;
      basePosition = getPosition();
    }
    function onClick(e) {
      if (!disabled && clickPrevented) {
        prevent(e, true);
      }
    }
    function isSliderDirection() {
      const diffX = abs(coordOf(lastEvent) - coordOf(baseEvent));
      const diffY = abs(coordOf(lastEvent, true) - coordOf(baseEvent, true));
      return diffX > diffY;
    }
    function computeVelocity(e) {
      if (Splide2.is(LOOP) || !hasExceeded) {
        const base = baseEvent === lastEvent && prevBaseEvent || baseEvent;
        const diffCoord = coordOf(lastEvent) - coordOf(base);
        const diffTime = timeOf(e) - timeOf(base);
        const isFlick = timeOf(e) - timeOf(lastEvent) < LOG_INTERVAL;
        if (diffTime && isFlick) {
          return diffCoord / diffTime;
        }
      }
      return 0;
    }
    function computeDestination(velocity) {
      return getPosition() + sign(velocity) * min(abs(velocity) * (options.flickPower || 600), isFree ? Infinity : Components2.Layout.listSize() * (options.flickMaxPages || 1));
    }
    function coordOf(e, orthogonal) {
      return (isTouchEvent(e) ? e.touches[0] : e)[`page${resolve(orthogonal ? "Y" : "X")}`];
    }
    function timeOf(e) {
      return e.timeStamp;
    }
    function constrain(diff) {
      return diff / (hasExceeded && Splide2.is(SLIDE) ? FRICTION : 1);
    }
    function isTouchEvent(e) {
      return typeof TouchEvent !== "undefined" && e instanceof TouchEvent;
    }
    function isDragging() {
      return dragging;
    }
    function disable(value) {
      disabled = value;
    }
    return {
      mount,
      disable,
      isDragging
    };
  }

  const IE_ARROW_KEYS = ["Left", "Right", "Up", "Down"];
  function Keyboard(Splide2, Components2, options) {
    const { on, bind, unbind } = EventInterface(Splide2);
    const { root } = Components2.Elements;
    const { resolve } = Components2.Direction;
    let target;
    function mount() {
      init();
      on(EVENT_UPDATED, () => {
        destroy();
        init();
      });
    }
    function init() {
      const { keyboard = "global" } = options;
      if (keyboard) {
        if (keyboard === "focused") {
          target = root;
          setAttribute(root, TAB_INDEX, 0);
        } else {
          target = window;
        }
        bind(target, "keydown", onKeydown);
      }
    }
    function destroy() {
      unbind(target, "keydown");
      if (isHTMLElement(target)) {
        removeAttribute(target, TAB_INDEX);
      }
    }
    function onKeydown(e) {
      const { key } = e;
      const normalizedKey = includes(IE_ARROW_KEYS, key) ? `Arrow${key}` : key;
      if (normalizedKey === resolve("ArrowLeft")) {
        Splide2.go("<");
      } else if (normalizedKey === resolve("ArrowRight")) {
        Splide2.go(">");
      }
    }
    return {
      mount,
      destroy
    };
  }

  const SRC_DATA_ATTRIBUTE = `${DATA_ATTRIBUTE}-lazy`;
  const SRCSET_DATA_ATTRIBUTE = `${SRC_DATA_ATTRIBUTE}-srcset`;
  const IMAGE_SELECTOR = `[${SRC_DATA_ATTRIBUTE}], [${SRCSET_DATA_ATTRIBUTE}]`;

  function LazyLoad(Splide2, Components2, options) {
    const { on, off, bind, emit } = EventInterface(Splide2);
    const isSequential = options.lazyLoad === "sequential";
    let images = [];
    let index = 0;
    function mount() {
      if (options.lazyLoad) {
        on([EVENT_MOUNTED, EVENT_REFRESH], () => {
          destroy();
          init();
        });
        if (!isSequential) {
          on([EVENT_MOUNTED, EVENT_REFRESH, EVENT_MOVED], observe);
        }
      }
    }
    function init() {
      Components2.Slides.forEach((_Slide) => {
        queryAll(_Slide.slide, IMAGE_SELECTOR).forEach((_img) => {
          const src = getAttribute(_img, SRC_DATA_ATTRIBUTE);
          const srcset = getAttribute(_img, SRCSET_DATA_ATTRIBUTE);
          if (src !== _img.src || srcset !== _img.srcset) {
            const _spinner = create("span", options.classes.spinner, _img.parentElement);
            setAttribute(_spinner, ROLE, "presentation");
            images.push({ _img, _Slide, src, srcset, _spinner });
            !_img.src && display(_img, "none");
          }
        });
      });
      if (isSequential) {
        loadNext();
      }
    }
    function destroy() {
      index = 0;
      images = [];
    }
    function observe() {
      images = images.filter((data) => {
        const distance = options.perPage * ((options.preloadPages || 1) + 1) - 1;
        if (data._Slide.isWithin(Splide2.index, distance)) {
          return load(data);
        }
        return true;
      });
      if (!images.length) {
        off(EVENT_MOVED);
      }
    }
    function load(data) {
      const { _img } = data;
      addClass(data._Slide.slide, CLASS_LOADING);
      bind(_img, "load error", (e) => {
        onLoad(data, e.type === "error");
      });
      ["src", "srcset"].forEach((name) => {
        if (data[name]) {
          setAttribute(_img, name, data[name]);
          removeAttribute(_img, name === "src" ? SRC_DATA_ATTRIBUTE : SRCSET_DATA_ATTRIBUTE);
        }
      });
    }
    function onLoad(data, error) {
      const { _Slide } = data;
      removeClass(_Slide.slide, CLASS_LOADING);
      if (!error) {
        remove(data._spinner);
        display(data._img, "");
        emit(EVENT_LAZYLOAD_LOADED, data._img, _Slide);
        emit(EVENT_RESIZE);
      }
      if (isSequential) {
        loadNext();
      }
    }
    function loadNext() {
      if (index < images.length) {
        load(images[index++]);
      }
    }
    return {
      mount,
      destroy
    };
  }

  function Pagination(Splide2, Components2, options) {
    const { on, emit, bind, unbind } = EventInterface(Splide2);
    const { Slides, Elements, Controller } = Components2;
    const { hasFocus, getIndex } = Controller;
    const items = [];
    let list;
    function mount() {
      init();
      on([EVENT_UPDATED, EVENT_REFRESH], init);
      on([EVENT_MOVE, EVENT_SCROLLED], update);
    }
    function init() {
      destroy();
      if (options.pagination && Slides.isEnough()) {
        createPagination();
        emit(EVENT_PAGINATION_MOUNTED, { list, items }, getAt(Splide2.index));
        update();
      }
    }
    function destroy() {
      if (list) {
        remove(list);
        items.forEach((item) => {
          unbind(item.button, "click");
        });
        empty(items);
        list = null;
      }
    }
    function createPagination() {
      const { length } = Splide2;
      const { classes, i18n, perPage } = options;
      const parent = options.pagination === "slider" && Elements.slider || Elements.root;
      const max = hasFocus() ? length : ceil(length / perPage);
      list = create("ul", classes.pagination, parent);
      for (let i = 0; i < max; i++) {
        const li = create("li", null, list);
        const button = create("button", { class: classes.page, type: "button" }, li);
        const controls = Slides.getIn(i).map((Slide) => Slide.slide.id);
        const text = !hasFocus() && perPage > 1 ? i18n.pageX : i18n.slideX;
        bind(button, "click", onClick.bind(null, i));
        setAttribute(button, ARIA_CONTROLS, controls.join(" "));
        setAttribute(button, ARIA_LABEL, format(text, i + 1));
        items.push({ li, button, page: i });
      }
    }
    function onClick(page) {
      Controller.go(`>${page}`, true, () => {
        const Slide = Slides.getAt(Controller.toIndex(page));
        Slide && focus(Slide.slide);
      });
    }
    function getAt(index) {
      return items[Controller.toPage(index)];
    }
    function update() {
      const prev = getAt(getIndex(true));
      const curr = getAt(getIndex());
      if (prev) {
        removeClass(prev.button, CLASS_ACTIVE);
        removeAttribute(prev.button, ARIA_CURRENT);
      }
      if (curr) {
        addClass(curr.button, CLASS_ACTIVE);
        setAttribute(curr.button, ARIA_CURRENT, true);
      }
      emit(EVENT_PAGINATION_UPDATED, { list, items }, prev, curr);
    }
    return {
      items,
      mount,
      destroy,
      getAt
    };
  }

  const TRIGGER_KEYS = [" ", "Enter", "Spacebar"];
  function Sync(Splide2, Components2, options) {
    const { splides } = Splide2;
    const { list } = Components2.Elements;
    function mount() {
      if (options.isNavigation) {
        navigate();
      } else {
        sync();
      }
    }
    function destroy() {
      removeAttribute(list, ALL_ATTRIBUTES);
    }
    function sync() {
      const processed = [];
      splides.concat(Splide2).forEach((splide, index, instances) => {
        EventInterface(splide).on(EVENT_MOVE, (index2, prev, dest) => {
          instances.forEach((instance) => {
            if (instance !== splide && !includes(processed, splide)) {
              processed.push(instance);
              instance.go(instance.is(LOOP) ? dest : index2);
            }
          });
          empty(processed);
        });
      });
    }
    function navigate() {
      const { on, emit } = EventInterface(Splide2);
      on(EVENT_CLICK, onClick);
      on(EVENT_SLIDE_KEYDOWN, onKeydown);
      on([EVENT_MOUNTED, EVENT_UPDATED], update);
      setAttribute(list, ROLE, "menu");
      emit(EVENT_NAVIGATION_MOUNTED, Splide2.splides);
    }
    function update() {
      setAttribute(list, ARIA_ORIENTATION, options.direction !== TTB ? "horizontal" : null);
    }
    function onClick(Slide) {
      Splide2.go(Slide.index);
    }
    function onKeydown(Slide, e) {
      if (includes(TRIGGER_KEYS, e.key)) {
        onClick(Slide);
        prevent(e);
      }
    }
    return {
      mount,
      destroy
    };
  }

  function Wheel(Splide2, Components2, options) {
    const { bind } = EventInterface(Splide2);
    function mount() {
      if (options.wheel) {
        bind(Components2.Elements.track, "wheel", onWheel, { passive: false, capture: true });
      }
    }
    function onWheel(e) {
      const { deltaY } = e;
      if (deltaY) {
        Splide2.go(deltaY < 0 ? "<" : ">");
        prevent(e);
      }
    }
    return {
      mount
    };
  }

  var ComponentConstructors = /*#__PURE__*/Object.freeze({
    __proto__: null,
    Options: Options,
    Direction: Direction,
    Elements: Elements,
    Slides: Slides,
    Layout: Layout,
    Clones: Clones,
    Move: Move,
    Controller: Controller,
    Arrows: Arrows,
    Autoplay: Autoplay,
    Cover: Cover,
    Scroll: Scroll,
    Drag: Drag,
    Keyboard: Keyboard,
    LazyLoad: LazyLoad,
    Pagination: Pagination,
    Sync: Sync,
    Wheel: Wheel
  });

  const I18N = {
    prev: "Previous slide",
    next: "Next slide",
    first: "Go to first slide",
    last: "Go to last slide",
    slideX: "Go to slide %s",
    pageX: "Go to page %s",
    play: "Start autoplay",
    pause: "Pause autoplay"
  };

  const DEFAULTS = {
    type: "slide",
    speed: 400,
    waitForTransition: true,
    perPage: 1,
    arrows: true,
    pagination: true,
    interval: 5e3,
    pauseOnHover: true,
    pauseOnFocus: true,
    resetProgress: true,
    easing: "cubic-bezier(0.25, 1, 0.5, 1)",
    drag: true,
    direction: "ltr",
    slideFocus: true,
    trimSpace: true,
    focusableNodes: "a, button, textarea, input, select, iframe",
    classes: CLASSES,
    i18n: I18N
  };

  function Fade(Splide2, Components2, options) {
    const { on } = EventInterface(Splide2);
    function mount() {
      on([EVENT_MOUNTED, EVENT_REFRESH], () => {
        nextTick(() => {
          Components2.Slides.style("transition", `opacity ${options.speed}ms ${options.easing}`);
        });
      });
    }
    function start(index, done) {
      const { track } = Components2.Elements;
      style(track, "height", unit(rect(track).height));
      nextTick(() => {
        done();
        style(track, "height", "");
      });
    }
    return {
      mount,
      start,
      cancel: noop
    };
  }

  function Slide(Splide2, Components2, options) {
    const { bind } = EventInterface(Splide2);
    const { Move, Controller } = Components2;
    const { list } = Components2.Elements;
    let endCallback;
    function mount() {
      bind(list, "transitionend", (e) => {
        if (e.target === list && endCallback) {
          cancel();
          endCallback();
        }
      });
    }
    function start(index, done) {
      const destination = Move.toPosition(index, true);
      const position = Move.getPosition();
      const speed = getSpeed(index);
      if (abs(destination - position) >= 1 && speed >= 1) {
        apply(`transform ${speed}ms ${options.easing}`);
        Move.translate(destination, true);
        endCallback = done;
      } else {
        Move.jump(index);
        done();
      }
    }
    function cancel() {
      apply("");
    }
    function getSpeed(index) {
      const { rewindSpeed } = options;
      if (Splide2.is(SLIDE) && rewindSpeed) {
        const prev = Controller.getIndex(true);
        const end = Controller.getEnd();
        if (prev === 0 && index >= end || prev >= end && index === 0) {
          return rewindSpeed;
        }
      }
      return options.speed;
    }
    function apply(transition) {
      style(list, "transition", transition);
    }
    return {
      mount,
      start,
      cancel
    };
  }

  const _Splide = class {
    constructor(target, options) {
      this.event = EventBus();
      this.Components = {};
      this.state = State(CREATED);
      this.splides = [];
      this._options = {};
      this._Extensions = {};
      const root = isString(target) ? query(document, target) : target;
      assert(root, `${root} is invalid.`);
      this.root = root;
      merge(DEFAULTS, _Splide.defaults);
      merge(merge(this._options, DEFAULTS), options || {});
    }
    mount(Extensions, Transition) {
      const { state, Components: Components2 } = this;
      assert(state.is([CREATED, DESTROYED]), "Already mounted!");
      state.set(CREATED);
      this._Components = Components2;
      this._Transition = Transition || this._Transition || (this.is(FADE) ? Fade : Slide);
      this._Extensions = Extensions || this._Extensions;
      const Constructors = assign({}, ComponentConstructors, this._Extensions, { Transition: this._Transition });
      forOwn(Constructors, (Component, key) => {
        const component = Component(this, Components2, this._options);
        Components2[key] = component;
        component.setup && component.setup();
      });
      forOwn(Components2, (component) => {
        component.mount && component.mount();
      });
      this.emit(EVENT_MOUNTED);
      addClass(this.root, CLASS_INITIALIZED);
      state.set(IDLE);
      this.emit(EVENT_READY);
      return this;
    }
    sync(splide) {
      this.splides.push(splide);
      splide.splides.push(this);
      return this;
    }
    go(control) {
      this._Components.Controller.go(control);
      return this;
    }
    on(events, callback) {
      this.event.on(events, callback, null, DEFAULT_USER_EVENT_PRIORITY);
      return this;
    }
    off(events) {
      this.event.off(events);
      return this;
    }
    emit(event) {
      this.event.emit(event, ...slice(arguments, 1));
      return this;
    }
    add(slides, index) {
      this._Components.Slides.add(slides, index);
      return this;
    }
    remove(matcher) {
      this._Components.Slides.remove(matcher);
      return this;
    }
    is(type) {
      return this._options.type === type;
    }
    refresh() {
      this.emit(EVENT_REFRESH);
      return this;
    }
    destroy(completely = true) {
      const { event, state } = this;
      if (state.is(CREATED)) {
        event.on(EVENT_READY, this.destroy.bind(this, completely), this);
      } else {
        forOwn(this._Components, (component) => {
          component.destroy && component.destroy(completely);
        }, true);
        event.emit(EVENT_DESTROY);
        event.destroy();
        completely && empty(this.splides);
        state.set(DESTROYED);
      }
      return this;
    }
    get options() {
      return this._options;
    }
    set options(options) {
      const { _options } = this;
      merge(_options, options);
      if (!this.state.is(CREATED)) {
        this.emit(EVENT_UPDATED, _options);
      }
    }
    get length() {
      return this._Components.Slides.getLength(true);
    }
    get index() {
      return this._Components.Controller.getIndex();
    }
  };
  let Splide = _Splide;
  Splide.defaults = {};
  Splide.STATES = STATES;

  if (document.querySelector('#carousel')) {
    new Splide('#carousel', {
      pagination: false,
      type: 'slide',
      perPage: 4,
      perMove: 1,
      gap: 32,
      breakpoints: {
        500: {
          perPage: 1,
          gap: 10,
          padding: {
            right: 30,
            left: 30
          }
        },
        767: {
          perPage: 1,
          gap: 10,
          padding: {
            right: 30,
            left: 30
          }
        },
        1024: {
          perPage: 2,
          gap: 16,
          padding: {
            right: 0,
            left: 0
          }
        },
        1400: {
          perPage: 3,
          gap: 32
        }
      }
    }).mount();
  }

  if (document.querySelector('#testimonials')) {
    new Splide('#testimonials', {
      pagination: false,
      type: 'slide',
      perPage: 3,
      perMove: 1,
      gap: 28,
      breakpoints: {
        500: {
          perPage: 1,
          gap: 10
        },
        767: {
          perPage: 2,
          gap: 10
        },
        1024: {
          perPage: 2,
          gap: 16
        },
        1400: {
          perPage: 3,
          gap: 32
        }
      }
    }).mount();
  }

  if (document.querySelector('#logos')) {
    new Splide('#logos', {
      pagination: true,
      type: 'slide',
      perPage: 10,
      destroy: true,
      mediaQuery: 'min',
      perMove: 1,
      breakpoints: {
        320: {
          perPage: 2,
          gap: 10,
          perMove: 1,
          destroy: false,
          padding: {
            right: 30,
            left: 30
          }
        },
        500: {
          perPage: 3,
          gap: 10,
          perMove: 1,
          destroy: false,
          padding: {
            right: 30,
            left: 30
          }
        },
        767: {
          destroy: true
        }
      }
    }).mount();
  }

  /**
   * Toggle Nav
   * ======================================
   * - toggle class on body
   */
  var ELEMENTS = '.togglenav__button';
  var TOGGLE_CLASS = 'nav-is-open';

  var ToggleNav = /*#__PURE__*/function () {
    function ToggleNav() {
      var _this = this;

      _classCallCheck(this, ToggleNav);

      this.elements = document.querySelectorAll(ELEMENTS);

      if (!this.elements) {
        return false;
      }

      this.elements.forEach(function (el) {
        el.addEventListener('click', _this.toggleNav, false);
      });
    }

    _createClass(ToggleNav, [{
      key: "toggleNav",
      value: function toggleNav(e) {
        document.body.classList.toggle(TOGGLE_CLASS);
        document.body.classList.toggle('lock');
        e.preventDefault();
      }
    }]);

    return ToggleNav;
  }();

  new ToggleNav();

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace (n) {
  	return n && n['default'] || n;
  }

  var simpleLightbox_modules = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports["default"] = void 0;

  function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  var SimpleLightbox = /*#__PURE__*/function () {
    function SimpleLightbox(elements, options) {
      var _this = this;

      _classCallCheck(this, SimpleLightbox);

      _defineProperty(this, "defaultOptions", {
        sourceAttr: 'href',
        overlay: true,
        spinner: true,
        nav: true,
        navText: ['&lsaquo;', '&rsaquo;'],
        captions: true,
        captionDelay: 0,
        captionSelector: 'img',
        captionType: 'attr',
        captionsData: 'title',
        captionPosition: 'bottom',
        captionClass: '',
        close: true,
        closeText: '&times;',
        swipeClose: true,
        showCounter: true,
        fileExt: 'png|jpg|jpeg|gif|webp',
        animationSlide: true,
        animationSpeed: 250,
        preloading: true,
        enableKeyboard: true,
        loop: true,
        rel: false,
        docClose: true,
        swipeTolerance: 50,
        className: 'simple-lightbox',
        widthRatio: 0.8,
        heightRatio: 0.9,
        scaleImageToRatio: false,
        disableRightClick: false,
        disableScroll: true,
        alertError: true,
        alertErrorMessage: 'Image not found, next image will be loaded',
        additionalHtml: false,
        history: true,
        throttleInterval: 0,
        doubleTapZoom: 2,
        maxZoom: 10,
        htmlClass: 'has-lightbox',
        rtl: false,
        fixedClass: 'sl-fixed',
        fadeSpeed: 300,
        uniqueImages: true,
        focus: true,
        scrollZoom: true,
        scrollZoomFactor: 0.5
      });

      _defineProperty(this, "transitionPrefix", void 0);

      _defineProperty(this, "isPassiveEventsSupported", void 0);

      _defineProperty(this, "transitionCapable", false);

      _defineProperty(this, "isTouchDevice", 'ontouchstart' in window);

      _defineProperty(this, "isAppleDevice", /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform));

      _defineProperty(this, "initialLocationHash", void 0);

      _defineProperty(this, "pushStateSupport", 'pushState' in history);

      _defineProperty(this, "isOpen", false);

      _defineProperty(this, "isAnimating", false);

      _defineProperty(this, "isClosing", false);

      _defineProperty(this, "isFadeIn", false);

      _defineProperty(this, "urlChangedOnce", false);

      _defineProperty(this, "hashReseted", false);

      _defineProperty(this, "historyHasChanges", false);

      _defineProperty(this, "historyUpdateTimeout", null);

      _defineProperty(this, "currentImage", void 0);

      _defineProperty(this, "eventNamespace", 'simplelightbox');

      _defineProperty(this, "domNodes", {});

      _defineProperty(this, "loadedImages", []);

      _defineProperty(this, "initialImageIndex", 0);

      _defineProperty(this, "currentImageIndex", 0);

      _defineProperty(this, "initialSelector", null);

      _defineProperty(this, "globalScrollbarWidth", 0);

      _defineProperty(this, "controlCoordinates", {
        swipeDiff: 0,
        swipeYDiff: 0,
        swipeStart: 0,
        swipeEnd: 0,
        swipeYStart: 0,
        swipeYEnd: 0,
        mousedown: false,
        imageLeft: 0,
        zoomed: false,
        containerHeight: 0,
        containerWidth: 0,
        containerOffsetX: 0,
        containerOffsetY: 0,
        imgHeight: 0,
        imgWidth: 0,
        capture: false,
        initialOffsetX: 0,
        initialOffsetY: 0,
        initialPointerOffsetX: 0,
        initialPointerOffsetY: 0,
        initialPointerOffsetX2: 0,
        initialPointerOffsetY2: 0,
        initialScale: 1,
        initialPinchDistance: 0,
        pointerOffsetX: 0,
        pointerOffsetY: 0,
        pointerOffsetX2: 0,
        pointerOffsetY2: 0,
        targetOffsetX: 0,
        targetOffsetY: 0,
        targetScale: 0,
        pinchOffsetX: 0,
        pinchOffsetY: 0,
        limitOffsetX: 0,
        limitOffsetY: 0,
        scaleDifference: 0,
        targetPinchDistance: 0,
        touchCount: 0,
        doubleTapped: false,
        touchmoveCount: 0
      });

      this.options = Object.assign(this.defaultOptions, options);
      this.isPassiveEventsSupported = this.checkPassiveEventsSupport();

      if (typeof elements === 'string') {
        this.initialSelector = elements;
        this.elements = Array.from(document.querySelectorAll(elements));
      } else {
        this.elements = typeof elements.length !== 'undefined' && elements.length > 0 ? Array.from(elements) : [elements];
      }

      this.relatedElements = [];
      this.transitionPrefix = this.calculateTransitionPrefix();
      this.transitionCapable = this.transitionPrefix !== false;
      this.initialLocationHash = this.hash; // this should be handled by attribute selector IMHO! => 'a[rel=bla]'...

      if (this.options.rel) {
        this.elements = this.getRelated(this.options.rel);
      }

      if (this.options.uniqueImages) {
        var imgArr = [];
        this.elements = Array.from(this.elements).filter(function (element) {
          var src = element.getAttribute(_this.options.sourceAttr);

          if (imgArr.indexOf(src) === -1) {
            imgArr.push(src);
            return true;
          }

          return false;
        });
      }

      this.createDomNodes();

      if (this.options.close) {
        this.domNodes.wrapper.appendChild(this.domNodes.closeButton);
      }

      if (this.options.nav) {
        this.domNodes.wrapper.appendChild(this.domNodes.navigation);
      }

      if (this.options.spinner) {
        this.domNodes.wrapper.appendChild(this.domNodes.spinner);
      }

      this.addEventListener(this.elements, 'click.' + this.eventNamespace, function (event) {
        if (_this.isValidLink(event.currentTarget)) {
          event.preventDefault();

          if (_this.isAnimating) {
            return false;
          }

          _this.initialImageIndex = _this.elements.indexOf(event.currentTarget);

          _this.openImage(event.currentTarget);
        }
      }); // close addEventListener click addEventListener doc

      if (this.options.docClose) {
        this.addEventListener(this.domNodes.wrapper, ['click.' + this.eventNamespace, 'touchstart.' + this.eventNamespace], function (event) {
          if (_this.isOpen && event.target === event.currentTarget) {
            _this.close();
          }
        });
      } // disable rightclick


      if (this.options.disableRightClick) {
        this.addEventListener(document.body, 'contextmenu.' + this.eventNamespace, function (event) {
          if (event.target.parentElement.classList.contains("sl-image")) {
            event.preventDefault();
          }
        });
      } // keyboard-control


      if (this.options.enableKeyboard) {
        this.addEventListener(document.body, 'keyup.' + this.eventNamespace, this.throttle(function (event) {
          _this.controlCoordinates.swipeDiff = 0; // keyboard control only if lightbox is open

          if (_this.isAnimating && event.key === 'Escape') {
            _this.currentImage.setAttribute('src', '');

            _this.isAnimating = false;
            return _this.close();
          }

          if (_this.isOpen) {
            event.preventDefault();

            if (event.key === 'Escape') {
              _this.close();
            }

            if (!_this.isAnimating && ['ArrowLeft', 'ArrowRight'].indexOf(event.key) > -1) {
              _this.loadImage(event.key === 'ArrowRight' ? 1 : -1);
            }
          }
        }, this.options.throttleInterval));
      }

      this.addEvents();
    }

    _createClass(SimpleLightbox, [{
      key: "checkPassiveEventsSupport",
      value: function checkPassiveEventsSupport() {
        // https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md#feature-detection
        // Test via a getter in the options object to see if the passive property is accessed
        var supportsPassive = false;

        try {
          var opts = Object.defineProperty({}, 'passive', {
            get: function get() {
              supportsPassive = true;
            }
          });
          window.addEventListener("testPassive", null, opts);
          window.removeEventListener("testPassive", null, opts);
        } catch (e) {}

        return supportsPassive;
      }
    }, {
      key: "createDomNodes",
      value: function createDomNodes() {
        this.domNodes.overlay = document.createElement('div');
        this.domNodes.overlay.classList.add('sl-overlay');
        this.domNodes.overlay.dataset.opacityTarget = ".7";
        this.domNodes.closeButton = document.createElement('button');
        this.domNodes.closeButton.classList.add('sl-close');
        this.domNodes.closeButton.innerHTML = this.options.closeText;
        this.domNodes.spinner = document.createElement('div');
        this.domNodes.spinner.classList.add('sl-spinner');
        this.domNodes.spinner.innerHTML = '<div></div>';
        this.domNodes.navigation = document.createElement('div');
        this.domNodes.navigation.classList.add('sl-navigation');
        this.domNodes.navigation.innerHTML = "<button class=\"sl-prev\">".concat(this.options.navText[0], "</button><button class=\"sl-next\">").concat(this.options.navText[1], "</button>");
        this.domNodes.counter = document.createElement('div');
        this.domNodes.counter.classList.add('sl-counter');
        this.domNodes.counter.innerHTML = '<span class="sl-current"></span>/<span class="sl-total"></span>';
        this.domNodes.caption = document.createElement('div');
        this.domNodes.caption.classList.add('sl-caption', 'pos-' + this.options.captionPosition);

        if (this.options.captionClass) {
          this.domNodes.caption.classList.add(this.options.captionClass);
        }

        this.domNodes.image = document.createElement('div');
        this.domNodes.image.classList.add('sl-image');
        this.domNodes.wrapper = document.createElement('div');
        this.domNodes.wrapper.classList.add('sl-wrapper');
        this.domNodes.wrapper.setAttribute('tabindex', -1);
        this.domNodes.wrapper.setAttribute('role', 'dialog');
        this.domNodes.wrapper.setAttribute('aria-hidden', false);

        if (this.options.className) {
          this.domNodes.wrapper.classList.add(this.options.className);
        }

        if (this.options.rtl) {
          this.domNodes.wrapper.classList.add('sl-dir-rtl');
        }
      }
    }, {
      key: "throttle",
      value: function throttle(func, limit) {
        var inThrottle;
        return function () {
          if (!inThrottle) {
            func.apply(this, arguments);
            inThrottle = true;
            setTimeout(function () {
              return inThrottle = false;
            }, limit);
          }
        };
      }
    }, {
      key: "isValidLink",
      value: function isValidLink(element) {
        return !this.options.fileExt || element.getAttribute(this.options.sourceAttr) && new RegExp('(' + this.options.fileExt + ')$', 'i').test(element.getAttribute(this.options.sourceAttr));
      }
    }, {
      key: "calculateTransitionPrefix",
      value: function calculateTransitionPrefix() {
        var s = (document.body || document.documentElement).style;
        return 'transition' in s ? '' : 'WebkitTransition' in s ? '-webkit-' : 'MozTransition' in s ? '-moz-' : 'OTransition' in s ? '-o' : false;
      }
    }, {
      key: "toggleScrollbar",
      value: function toggleScrollbar(type) {
        var scrollbarWidth = 0;
        var fixedElements = [].slice.call(document.querySelectorAll('.' + this.options.fixedClass));

        if (type === 'hide') {
          var fullWindowWidth = window.innerWidth;

          if (!fullWindowWidth) {
            var documentElementRect = document.documentElement.getBoundingClientRect();
            fullWindowWidth = documentElementRect.right - Math.abs(documentElementRect.left);
          }

          if (document.body.clientWidth < fullWindowWidth || this.isAppleDevice) {
            var scrollDiv = document.createElement('div'),
                paddingRight = parseInt(document.body.style.paddingRight || 0, 10);
            scrollDiv.classList.add('sl-scrollbar-measure');
            document.body.appendChild(scrollDiv);
            scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
            document.body.removeChild(scrollDiv);
            document.body.dataset.originalPaddingRight = paddingRight;

            if (scrollbarWidth > 0 || scrollbarWidth == 0 && this.isAppleDevice) {
              document.body.classList.add('hidden-scroll');
              document.body.style.paddingRight = paddingRight + scrollbarWidth + 'px';
              fixedElements.forEach(function (element) {
                var actualPadding = element.style.paddingRight;
                var calculatedPadding = window.getComputedStyle(element)['padding-right'];
                element.dataset.originalPaddingRight = actualPadding;
                element.style.paddingRight = "".concat(parseFloat(calculatedPadding) + scrollbarWidth, "px");
              });
            }
          }
        } else {
          document.body.classList.remove('hidden-scroll');
          document.body.style.paddingRight = document.body.dataset.originalPaddingRight;
          fixedElements.forEach(function (element) {
            var padding = element.dataset.originalPaddingRight;

            if (typeof padding !== 'undefined') {
              element.style.paddingRight = padding;
            }
          });
        }

        return scrollbarWidth;
      }
    }, {
      key: "close",
      value: function close() {
        var _this2 = this;

        if (!this.isOpen || this.isAnimating || this.isClosing) {
          return false;
        }

        this.isClosing = true;
        var element = this.relatedElements[this.currentImageIndex];
        element.dispatchEvent(new Event('close.simplelightbox'));

        if (this.options.history) {
          this.historyHasChanges = false;

          if (!this.hashReseted) {
            this.resetHash();
          }
        }

        this.removeEventListener(document, 'focusin.' + this.eventNamespace);
        this.fadeOut(document.querySelectorAll('.sl-image img, .sl-overlay, .sl-close, .sl-navigation, .sl-image .sl-caption, .sl-counter'), this.options.fadeSpeed, function () {
          if (_this2.options.disableScroll) {
            _this2.toggleScrollbar('show');
          }

          if (_this2.options.htmlClass && _this2.options.htmlClass !== '') {
            document.querySelector('html').classList.remove(_this2.options.htmlClass);
          }

          document.body.removeChild(_this2.domNodes.wrapper);
          document.body.removeChild(_this2.domNodes.overlay);
          _this2.domNodes.additionalHtml = null;
          element.dispatchEvent(new Event('closed.simplelightbox'));
          _this2.isClosing = false;
        });
        this.currentImage = null;
        this.isOpen = false;
        this.isAnimating = false; // reset touchcontrol coordinates

        for (var key in this.controlCoordinates) {
          this.controlCoordinates[key] = 0;
        }

        this.controlCoordinates.mousedown = false;
        this.controlCoordinates.zoomed = false;
        this.controlCoordinates.capture = false;
        this.controlCoordinates.initialScale = this.minMax(1, 1, this.options.maxZoom);
        this.controlCoordinates.doubleTapped = false;
      }
    }, {
      key: "hash",
      get: function get() {
        return window.location.hash.substring(1);
      }
    }, {
      key: "preload",
      value: function preload() {
        var _this3 = this;

        var index = this.currentImageIndex,
            length = this.relatedElements.length,
            next = index + 1 < 0 ? length - 1 : index + 1 >= length - 1 ? 0 : index + 1,
            prev = index - 1 < 0 ? length - 1 : index - 1 >= length - 1 ? 0 : index - 1,
            nextImage = new Image(),
            prevImage = new Image();
        nextImage.addEventListener('load', function (event) {
          var src = event.target.getAttribute('src');

          if (_this3.loadedImages.indexOf(src) === -1) {
            //is this condition even required... setting multiple times will not change usage...
            _this3.loadedImages.push(src);
          }

          _this3.relatedElements[index].dispatchEvent(new Event('nextImageLoaded.' + _this3.eventNamespace));
        });
        nextImage.setAttribute('src', this.relatedElements[next].getAttribute(this.options.sourceAttr));
        prevImage.addEventListener('load', function (event) {
          var src = event.target.getAttribute('src');

          if (_this3.loadedImages.indexOf(src) === -1) {
            _this3.loadedImages.push(src);
          }

          _this3.relatedElements[index].dispatchEvent(new Event('prevImageLoaded.' + _this3.eventNamespace));
        });
        prevImage.setAttribute('src', this.relatedElements[prev].getAttribute(this.options.sourceAttr));
      }
    }, {
      key: "loadImage",
      value: function loadImage(direction) {
        var _this4 = this;

        var slideDirection = direction;

        if (this.options.rtl) {
          direction = -direction;
        }

        this.relatedElements[this.currentImageIndex].dispatchEvent(new Event('change.' + this.eventNamespace));
        this.relatedElements[this.currentImageIndex].dispatchEvent(new Event((direction === 1 ? 'next' : 'prev') + '.' + this.eventNamespace));
        var newIndex = this.currentImageIndex + direction;

        if (this.isAnimating || (newIndex < 0 || newIndex >= this.relatedElements.length) && this.options.loop === false) {
          return false;
        }

        this.currentImageIndex = newIndex < 0 ? this.relatedElements.length - 1 : newIndex > this.relatedElements.length - 1 ? 0 : newIndex;
        this.domNodes.counter.querySelector('.sl-current').innerHTML = this.currentImageIndex + 1;

        if (this.options.animationSlide) {
          this.slide(this.options.animationSpeed / 1000, -100 * slideDirection - this.controlCoordinates.swipeDiff + 'px');
        }

        this.fadeOut(this.domNodes.image, this.options.fadeSpeed, function () {
          _this4.isAnimating = true;

          if (!_this4.isClosing) {
            setTimeout(function () {
              var element = _this4.relatedElements[_this4.currentImageIndex];

              _this4.currentImage.setAttribute('src', element.getAttribute(_this4.options.sourceAttr));

              if (_this4.loadedImages.indexOf(element.getAttribute(_this4.options.sourceAttr)) === -1) {
                _this4.show(_this4.domNodes.spinner);
              }

              if (_this4.domNodes.image.contains(_this4.domNodes.caption)) {
                _this4.domNodes.image.removeChild(_this4.domNodes.caption);
              }

              _this4.adjustImage(slideDirection);

              if (_this4.options.preloading) _this4.preload();
            }, 100);
          } else {
            _this4.isAnimating = false;
          }
        });
      }
    }, {
      key: "adjustImage",
      value: function adjustImage(direction) {
        var _this5 = this;

        if (!this.currentImage) {
          return false;
        }

        var tmpImage = new Image(),
            windowWidth = window.innerWidth * this.options.widthRatio,
            windowHeight = window.innerHeight * this.options.heightRatio;
        tmpImage.setAttribute('src', this.currentImage.getAttribute('src'));
        this.currentImage.dataset.scale = 1;
        this.currentImage.dataset.translateX = 0;
        this.currentImage.dataset.translateY = 0;
        this.zoomPanElement(0, 0, 1);
        tmpImage.addEventListener('error', function (event) {
          _this5.relatedElements[_this5.currentImageIndex].dispatchEvent(new Event('error.' + _this5.eventNamespace));

          _this5.isAnimating = false;
          _this5.isOpen = true;
          _this5.domNodes.spinner.style.display = 'none';
          var dirIsDefined = direction === 1 || direction === -1;

          if (_this5.initialImageIndex === _this5.currentImageIndex && dirIsDefined) {
            return _this5.close();
          }

          if (_this5.options.alertError) {
            alert(_this5.options.alertErrorMessage);
          }

          _this5.loadImage(dirIsDefined ? direction : 1);
        });
        tmpImage.addEventListener('load', function (event) {
          if (typeof direction !== 'undefined') {
            _this5.relatedElements[_this5.currentImageIndex].dispatchEvent(new Event('changed.' + _this5.eventNamespace));

            _this5.relatedElements[_this5.currentImageIndex].dispatchEvent(new Event((direction === 1 ? 'nextDone' : 'prevDone') + '.' + _this5.eventNamespace));
          } // history


          if (_this5.options.history) {
            _this5.updateURL();
          }

          if (_this5.loadedImages.indexOf(_this5.currentImage.getAttribute('src')) === -1) {
            _this5.loadedImages.push(_this5.currentImage.getAttribute('src'));
          }

          var imageWidth = event.target.width,
              imageHeight = event.target.height;

          if (_this5.options.scaleImageToRatio || imageWidth > windowWidth || imageHeight > windowHeight) {
            var ratio = imageWidth / imageHeight > windowWidth / windowHeight ? imageWidth / windowWidth : imageHeight / windowHeight;
            imageWidth /= ratio;
            imageHeight /= ratio;
          }

          _this5.domNodes.image.style.top = (window.innerHeight - imageHeight) / 2 + 'px';
          _this5.domNodes.image.style.left = (window.innerWidth - imageWidth - _this5.globalScrollbarWidth) / 2 + 'px';
          _this5.domNodes.image.style.width = imageWidth + 'px';
          _this5.domNodes.image.style.height = imageHeight + 'px';
          _this5.domNodes.spinner.style.display = 'none';

          if (_this5.options.focus) {
            _this5.forceFocus();
          }

          _this5.fadeIn(_this5.currentImage, _this5.options.fadeSpeed, function () {
            if (_this5.options.focus) {
              _this5.domNodes.wrapper.focus();
            }
          });

          _this5.isOpen = true;
          var captionContainer, captionText;

          if (typeof _this5.options.captionSelector === 'string') {
            captionContainer = _this5.options.captionSelector === 'self' ? _this5.relatedElements[_this5.currentImageIndex] : _this5.relatedElements[_this5.currentImageIndex].querySelector(_this5.options.captionSelector);
          } else if (typeof _this5.options.captionSelector === 'function') {
            captionContainer = _this5.options.captionSelector(_this5.relatedElements[_this5.currentImageIndex]);
          }

          if (_this5.options.captions && captionContainer) {
            if (_this5.options.captionType === 'data') {
              captionText = captionContainer.dataset[_this5.options.captionsData];
            } else if (_this5.options.captionType === 'text') {
              captionText = captionContainer.innerHTML;
            } else {
              captionText = captionContainer.getAttribute(_this5.options.captionsData);
            }
          }

          if (!_this5.options.loop) {
            if (_this5.currentImageIndex === 0) {
              _this5.hide(_this5.domNodes.navigation.querySelector('.sl-prev'));
            }

            if (_this5.currentImageIndex >= _this5.relatedElements.length - 1) {
              _this5.hide(_this5.domNodes.navigation.querySelector('.sl-next'));
            }

            if (_this5.currentImageIndex > 0) {
              _this5.show(_this5.domNodes.navigation.querySelector('.sl-prev'));
            }

            if (_this5.currentImageIndex < _this5.relatedElements.length - 1) {
              _this5.show(_this5.domNodes.navigation.querySelector('.sl-next'));
            }
          } else {
            if (_this5.relatedElements.length === 1) {
              _this5.hide(_this5.domNodes.navigation.querySelectorAll('.sl-prev, .sl-next'));
            } else {
              _this5.show(_this5.domNodes.navigation.querySelectorAll('.sl-prev, .sl-next'));
            }
          }

          if (direction === 1 || direction === -1) {
            if (_this5.options.animationSlide) {
              _this5.slide(0, 100 * direction + 'px');

              setTimeout(function () {
                _this5.slide(_this5.options.animationSpeed / 1000, 0 + 'px');
              }, 50);
            }

            _this5.fadeIn(_this5.domNodes.image, _this5.options.fadeSpeed, function () {
              _this5.isAnimating = false;

              _this5.setCaption(captionText, imageWidth);
            });
          } else {
            _this5.isAnimating = false;

            _this5.setCaption(captionText, imageWidth);
          }

          if (_this5.options.additionalHtml && !_this5.domNodes.additionalHtml) {
            _this5.domNodes.additionalHtml = document.createElement('div');

            _this5.domNodes.additionalHtml.classList.add('sl-additional-html');

            _this5.domNodes.additionalHtml.innerHTML = _this5.options.additionalHtml;

            _this5.domNodes.image.appendChild(_this5.domNodes.additionalHtml);
          }
        });
      }
    }, {
      key: "zoomPanElement",
      value: function zoomPanElement(targetOffsetX, targetOffsetY, targetScale) {
        this.currentImage.style[this.transitionPrefix + 'transform'] = 'translate(' + targetOffsetX + ',' + targetOffsetY + ') scale(' + targetScale + ')';
      }
    }, {
      key: "minMax",
      value: function minMax(value, min, max) {
        return value < min ? min : value > max ? max : value;
      }
    }, {
      key: "setZoomData",
      value: function setZoomData(initialScale, targetOffsetX, targetOffsetY) {
        this.currentImage.dataset.scale = initialScale;
        this.currentImage.dataset.translateX = targetOffsetX;
        this.currentImage.dataset.translateY = targetOffsetY;
      }
    }, {
      key: "hashchangeHandler",
      value: function hashchangeHandler() {
        if (this.isOpen && this.hash === this.initialLocationHash) {
          this.hashReseted = true;
          this.close();
        }
      }
    }, {
      key: "addEvents",
      value: function addEvents() {
        var _this6 = this;

        // resize/responsive
        this.addEventListener(window, 'resize.' + this.eventNamespace, function (event) {
          //this.adjustImage.bind(this)
          if (_this6.isOpen) {
            _this6.adjustImage();
          }
        });
        this.addEventListener(this.domNodes.closeButton, ['click.' + this.eventNamespace, 'touchstart.' + this.eventNamespace], this.close.bind(this));

        if (this.options.history) {
          setTimeout(function () {
            _this6.addEventListener(window, 'hashchange.' + _this6.eventNamespace, function (event) {
              if (_this6.isOpen) {
                _this6.hashchangeHandler();
              }
            });
          }, 40);
        }

        this.addEventListener(this.domNodes.navigation.getElementsByTagName('button'), 'click.' + this.eventNamespace, function (event) {
          if (!event.currentTarget.tagName.match(/button/i)) {
            return true;
          }

          event.preventDefault();
          _this6.controlCoordinates.swipeDiff = 0;

          _this6.loadImage(event.currentTarget.classList.contains('sl-next') ? 1 : -1);
        });

        if (this.options.scrollZoom) {
          var scale = 1;
          this.addEventListener(this.domNodes.image, ['mousewheel', 'DOMMouseScroll'], function (event) {
            if (_this6.controlCoordinates.mousedown || _this6.isAnimating || _this6.isClosing || !_this6.isOpen) {
              return true;
            }

            if (_this6.controlCoordinates.containerHeight == 0) {
              _this6.controlCoordinates.containerHeight = _this6.getDimensions(_this6.domNodes.image).height;
              _this6.controlCoordinates.containerWidth = _this6.getDimensions(_this6.domNodes.image).width;
              _this6.controlCoordinates.imgHeight = _this6.getDimensions(_this6.currentImage).height;
              _this6.controlCoordinates.imgWidth = _this6.getDimensions(_this6.currentImage).width;
              _this6.controlCoordinates.containerOffsetX = _this6.domNodes.image.offsetLeft;
              _this6.controlCoordinates.containerOffsetY = _this6.domNodes.image.offsetTop;
              _this6.controlCoordinates.initialOffsetX = parseFloat(_this6.currentImage.dataset.translateX);
              _this6.controlCoordinates.initialOffsetY = parseFloat(_this6.currentImage.dataset.translateY);
            }

            event.preventDefault();
            var delta = event.delta || event.wheelDelta;

            if (delta === undefined) {
              //we are on firefox
              delta = event.detail;
            }

            delta = Math.max(-1, Math.min(1, delta)); // cap the delta to [-1,1] for cross browser consistency
            // apply zoom

            scale += delta * _this6.options.scrollZoomFactor * scale;
            scale = Math.max(1, Math.min(_this6.options.maxZoom, scale));
            _this6.controlCoordinates.targetScale = scale;
            _this6.controlCoordinates.pinchOffsetX = event.pageX;
            _this6.controlCoordinates.pinchOffsetY = event.pageY;
            _this6.controlCoordinates.limitOffsetX = (_this6.controlCoordinates.imgWidth * _this6.controlCoordinates.targetScale - _this6.controlCoordinates.containerWidth) / 2;
            _this6.controlCoordinates.limitOffsetY = (_this6.controlCoordinates.imgHeight * _this6.controlCoordinates.targetScale - _this6.controlCoordinates.containerHeight) / 2;
            _this6.controlCoordinates.scaleDifference = _this6.controlCoordinates.targetScale - _this6.controlCoordinates.initialScale;
            _this6.controlCoordinates.targetOffsetX = _this6.controlCoordinates.imgWidth * _this6.controlCoordinates.targetScale <= _this6.controlCoordinates.containerWidth ? 0 : _this6.minMax(_this6.controlCoordinates.initialOffsetX - (_this6.controlCoordinates.pinchOffsetX - _this6.controlCoordinates.containerOffsetX - _this6.controlCoordinates.containerWidth / 2 - _this6.controlCoordinates.initialOffsetX) / (_this6.controlCoordinates.targetScale - _this6.controlCoordinates.scaleDifference) * _this6.controlCoordinates.scaleDifference, _this6.controlCoordinates.limitOffsetX * -1, _this6.controlCoordinates.limitOffsetX);
            _this6.controlCoordinates.targetOffsetY = _this6.controlCoordinates.imgHeight * _this6.controlCoordinates.targetScale <= _this6.controlCoordinates.containerHeight ? 0 : _this6.minMax(_this6.controlCoordinates.initialOffsetY - (_this6.controlCoordinates.pinchOffsetY - _this6.controlCoordinates.containerOffsetY - _this6.controlCoordinates.containerHeight / 2 - _this6.controlCoordinates.initialOffsetY) / (_this6.controlCoordinates.targetScale - _this6.controlCoordinates.scaleDifference) * _this6.controlCoordinates.scaleDifference, _this6.controlCoordinates.limitOffsetY * -1, _this6.controlCoordinates.limitOffsetY);

            _this6.zoomPanElement(_this6.controlCoordinates.targetOffsetX + "px", _this6.controlCoordinates.targetOffsetY + "px", _this6.controlCoordinates.targetScale);

            if (_this6.controlCoordinates.targetScale > 1) {
              _this6.controlCoordinates.zoomed = true;

              if (!_this6.domNodes.caption.style.opacity && _this6.domNodes.caption.style.display !== 'none') {
                _this6.fadeOut(_this6.domNodes.caption, _this6.options.fadeSpeed);
              }
            } else {
              if (_this6.controlCoordinates.initialScale === 1) {
                _this6.controlCoordinates.zoomed = false;

                if (_this6.domNodes.caption.style.display === 'none') {
                  _this6.fadeIn(_this6.domNodes.caption, _this6.options.fadeSpeed);
                }
              }

              _this6.controlCoordinates.initialPinchDistance = null;
              _this6.controlCoordinates.capture = false;
            }

            _this6.controlCoordinates.initialPinchDistance = _this6.controlCoordinates.targetPinchDistance;
            _this6.controlCoordinates.initialScale = _this6.controlCoordinates.targetScale;
            _this6.controlCoordinates.initialOffsetX = _this6.controlCoordinates.targetOffsetX;
            _this6.controlCoordinates.initialOffsetY = _this6.controlCoordinates.targetOffsetY;

            _this6.setZoomData(_this6.controlCoordinates.targetScale, _this6.controlCoordinates.targetOffsetX, _this6.controlCoordinates.targetOffsetY);

            _this6.zoomPanElement(_this6.controlCoordinates.targetOffsetX + "px", _this6.controlCoordinates.targetOffsetY + "px", _this6.controlCoordinates.targetScale);
          });
        }

        this.addEventListener(this.domNodes.image, ['touchstart.' + this.eventNamespace, 'mousedown.' + this.eventNamespace], function (event) {
          if (event.target.tagName === 'A' && event.type === 'touchstart') {
            return true;
          }

          if (event.type === 'mousedown') {
            event.preventDefault();
            _this6.controlCoordinates.initialPointerOffsetX = event.clientX;
            _this6.controlCoordinates.initialPointerOffsetY = event.clientY;
            _this6.controlCoordinates.containerHeight = _this6.getDimensions(_this6.domNodes.image).height;
            _this6.controlCoordinates.containerWidth = _this6.getDimensions(_this6.domNodes.image).width;
            _this6.controlCoordinates.imgHeight = _this6.getDimensions(_this6.currentImage).height;
            _this6.controlCoordinates.imgWidth = _this6.getDimensions(_this6.currentImage).width;
            _this6.controlCoordinates.containerOffsetX = _this6.domNodes.image.offsetLeft;
            _this6.controlCoordinates.containerOffsetY = _this6.domNodes.image.offsetTop;
            _this6.controlCoordinates.initialOffsetX = parseFloat(_this6.currentImage.dataset.translateX);
            _this6.controlCoordinates.initialOffsetY = parseFloat(_this6.currentImage.dataset.translateY);
            _this6.controlCoordinates.capture = true;
          } else {
            _this6.controlCoordinates.touchCount = event.touches.length;
            _this6.controlCoordinates.initialPointerOffsetX = event.touches[0].clientX;
            _this6.controlCoordinates.initialPointerOffsetY = event.touches[0].clientY;
            _this6.controlCoordinates.containerHeight = _this6.getDimensions(_this6.domNodes.image).height;
            _this6.controlCoordinates.containerWidth = _this6.getDimensions(_this6.domNodes.image).width;
            _this6.controlCoordinates.imgHeight = _this6.getDimensions(_this6.currentImage).height;
            _this6.controlCoordinates.imgWidth = _this6.getDimensions(_this6.currentImage).width;
            _this6.controlCoordinates.containerOffsetX = _this6.domNodes.image.offsetLeft;
            _this6.controlCoordinates.containerOffsetY = _this6.domNodes.image.offsetTop;

            if (_this6.controlCoordinates.touchCount === 1)
              /* Single touch */
              {
                if (!_this6.controlCoordinates.doubleTapped) {
                  _this6.controlCoordinates.doubleTapped = true;
                  setTimeout(function () {
                    _this6.controlCoordinates.doubleTapped = false;
                  }, 300);
                } else {
                  _this6.currentImage.classList.add('sl-transition');

                  if (!_this6.controlCoordinates.zoomed) {
                    _this6.controlCoordinates.initialScale = _this6.options.doubleTapZoom;

                    _this6.setZoomData(_this6.controlCoordinates.initialScale, 0, 0);

                    _this6.zoomPanElement(0 + "px", 0 + "px", _this6.controlCoordinates.initialScale);

                    if (!_this6.domNodes.caption.style.opacity && _this6.domNodes.caption.style.display !== 'none') {
                      _this6.fadeOut(_this6.domNodes.caption, _this6.options.fadeSpeed);
                    }

                    _this6.controlCoordinates.zoomed = true;
                  } else {
                    _this6.controlCoordinates.initialScale = 1;

                    _this6.setZoomData(_this6.controlCoordinates.initialScale, 0, 0);

                    _this6.zoomPanElement(0 + "px", 0 + "px", _this6.controlCoordinates.initialScale);

                    _this6.controlCoordinates.zoomed = false;
                  }

                  setTimeout(function () {
                    if (_this6.currentImage) {
                      _this6.currentImage.classList.remove('sl-transition');
                    }
                  }, 200);
                  return false;
                }

                _this6.controlCoordinates.initialOffsetX = parseFloat(_this6.currentImage.dataset.translateX);
                _this6.controlCoordinates.initialOffsetY = parseFloat(_this6.currentImage.dataset.translateY);
              } else if (_this6.controlCoordinates.touchCount === 2)
              /* Pinch */
              {
                _this6.controlCoordinates.initialPointerOffsetX2 = event.touches[1].clientX;
                _this6.controlCoordinates.initialPointerOffsetY2 = event.touches[1].clientY;
                _this6.controlCoordinates.initialOffsetX = parseFloat(_this6.currentImage.dataset.translateX);
                _this6.controlCoordinates.initialOffsetY = parseFloat(_this6.currentImage.dataset.translateY);
                _this6.controlCoordinates.pinchOffsetX = (_this6.controlCoordinates.initialPointerOffsetX + _this6.controlCoordinates.initialPointerOffsetX2) / 2;
                _this6.controlCoordinates.pinchOffsetY = (_this6.controlCoordinates.initialPointerOffsetY + _this6.controlCoordinates.initialPointerOffsetY2) / 2;
                _this6.controlCoordinates.initialPinchDistance = Math.sqrt((_this6.controlCoordinates.initialPointerOffsetX - _this6.controlCoordinates.initialPointerOffsetX2) * (_this6.controlCoordinates.initialPointerOffsetX - _this6.controlCoordinates.initialPointerOffsetX2) + (_this6.controlCoordinates.initialPointerOffsetY - _this6.controlCoordinates.initialPointerOffsetY2) * (_this6.controlCoordinates.initialPointerOffsetY - _this6.controlCoordinates.initialPointerOffsetY2));
              }

            _this6.controlCoordinates.capture = true;
          }

          if (_this6.controlCoordinates.mousedown) return true;

          if (_this6.transitionCapable) {
            _this6.controlCoordinates.imageLeft = parseInt(_this6.domNodes.image.style.left, 10);
          }

          _this6.controlCoordinates.mousedown = true;
          _this6.controlCoordinates.swipeDiff = 0;
          _this6.controlCoordinates.swipeYDiff = 0;
          _this6.controlCoordinates.swipeStart = event.pageX || event.touches[0].pageX;
          _this6.controlCoordinates.swipeYStart = event.pageY || event.touches[0].pageY;
          return false;
        });
        this.addEventListener(this.domNodes.image, ['touchmove.' + this.eventNamespace, 'mousemove.' + this.eventNamespace, 'MSPointerMove'], function (event) {
          if (!_this6.controlCoordinates.mousedown) {
            return true;
          }

          if (event.type === 'touchmove') {
            if (_this6.controlCoordinates.capture === false) {
              return false;
            }

            _this6.controlCoordinates.pointerOffsetX = event.touches[0].clientX;
            _this6.controlCoordinates.pointerOffsetY = event.touches[0].clientY;
            _this6.controlCoordinates.touchCount = event.touches.length;
            _this6.controlCoordinates.touchmoveCount++;

            if (_this6.controlCoordinates.touchCount > 1)
              /* Pinch */
              {
                _this6.controlCoordinates.pointerOffsetX2 = event.touches[1].clientX;
                _this6.controlCoordinates.pointerOffsetY2 = event.touches[1].clientY;
                _this6.controlCoordinates.targetPinchDistance = Math.sqrt((_this6.controlCoordinates.pointerOffsetX - _this6.controlCoordinates.pointerOffsetX2) * (_this6.controlCoordinates.pointerOffsetX - _this6.controlCoordinates.pointerOffsetX2) + (_this6.controlCoordinates.pointerOffsetY - _this6.controlCoordinates.pointerOffsetY2) * (_this6.controlCoordinates.pointerOffsetY - _this6.controlCoordinates.pointerOffsetY2));

                if (_this6.controlCoordinates.initialPinchDistance === null) {
                  _this6.controlCoordinates.initialPinchDistance = _this6.controlCoordinates.targetPinchDistance;
                }

                if (Math.abs(_this6.controlCoordinates.initialPinchDistance - _this6.controlCoordinates.targetPinchDistance) >= 1) {
                  /* Initialize helpers */
                  _this6.controlCoordinates.targetScale = _this6.minMax(_this6.controlCoordinates.targetPinchDistance / _this6.controlCoordinates.initialPinchDistance * _this6.controlCoordinates.initialScale, 1, _this6.options.maxZoom);
                  _this6.controlCoordinates.limitOffsetX = (_this6.controlCoordinates.imgWidth * _this6.controlCoordinates.targetScale - _this6.controlCoordinates.containerWidth) / 2;
                  _this6.controlCoordinates.limitOffsetY = (_this6.controlCoordinates.imgHeight * _this6.controlCoordinates.targetScale - _this6.controlCoordinates.containerHeight) / 2;
                  _this6.controlCoordinates.scaleDifference = _this6.controlCoordinates.targetScale - _this6.controlCoordinates.initialScale;
                  _this6.controlCoordinates.targetOffsetX = _this6.controlCoordinates.imgWidth * _this6.controlCoordinates.targetScale <= _this6.controlCoordinates.containerWidth ? 0 : _this6.minMax(_this6.controlCoordinates.initialOffsetX - (_this6.controlCoordinates.pinchOffsetX - _this6.controlCoordinates.containerOffsetX - _this6.controlCoordinates.containerWidth / 2 - _this6.controlCoordinates.initialOffsetX) / (_this6.controlCoordinates.targetScale - _this6.controlCoordinates.scaleDifference) * _this6.controlCoordinates.scaleDifference, _this6.controlCoordinates.limitOffsetX * -1, _this6.controlCoordinates.limitOffsetX);
                  _this6.controlCoordinates.targetOffsetY = _this6.controlCoordinates.imgHeight * _this6.controlCoordinates.targetScale <= _this6.controlCoordinates.containerHeight ? 0 : _this6.minMax(_this6.controlCoordinates.initialOffsetY - (_this6.controlCoordinates.pinchOffsetY - _this6.controlCoordinates.containerOffsetY - _this6.controlCoordinates.containerHeight / 2 - _this6.controlCoordinates.initialOffsetY) / (_this6.controlCoordinates.targetScale - _this6.controlCoordinates.scaleDifference) * _this6.controlCoordinates.scaleDifference, _this6.controlCoordinates.limitOffsetY * -1, _this6.controlCoordinates.limitOffsetY);

                  _this6.zoomPanElement(_this6.controlCoordinates.targetOffsetX + "px", _this6.controlCoordinates.targetOffsetY + "px", _this6.controlCoordinates.targetScale);

                  if (_this6.controlCoordinates.targetScale > 1) {
                    _this6.controlCoordinates.zoomed = true;

                    if (!_this6.domNodes.caption.style.opacity && _this6.domNodes.caption.style.display !== 'none') {
                      _this6.fadeOut(_this6.domNodes.caption, _this6.options.fadeSpeed);
                    }
                  }

                  _this6.controlCoordinates.initialPinchDistance = _this6.controlCoordinates.targetPinchDistance;
                  _this6.controlCoordinates.initialScale = _this6.controlCoordinates.targetScale;
                  _this6.controlCoordinates.initialOffsetX = _this6.controlCoordinates.targetOffsetX;
                  _this6.controlCoordinates.initialOffsetY = _this6.controlCoordinates.targetOffsetY;
                }
              } else {
              _this6.controlCoordinates.targetScale = _this6.controlCoordinates.initialScale;
              _this6.controlCoordinates.limitOffsetX = (_this6.controlCoordinates.imgWidth * _this6.controlCoordinates.targetScale - _this6.controlCoordinates.containerWidth) / 2;
              _this6.controlCoordinates.limitOffsetY = (_this6.controlCoordinates.imgHeight * _this6.controlCoordinates.targetScale - _this6.controlCoordinates.containerHeight) / 2;
              _this6.controlCoordinates.targetOffsetX = _this6.controlCoordinates.imgWidth * _this6.controlCoordinates.targetScale <= _this6.controlCoordinates.containerWidth ? 0 : _this6.minMax(_this6.controlCoordinates.pointerOffsetX - (_this6.controlCoordinates.initialPointerOffsetX - _this6.controlCoordinates.initialOffsetX), _this6.controlCoordinates.limitOffsetX * -1, _this6.controlCoordinates.limitOffsetX);
              _this6.controlCoordinates.targetOffsetY = _this6.controlCoordinates.imgHeight * _this6.controlCoordinates.targetScale <= _this6.controlCoordinates.containerHeight ? 0 : _this6.minMax(_this6.controlCoordinates.pointerOffsetY - (_this6.controlCoordinates.initialPointerOffsetY - _this6.controlCoordinates.initialOffsetY), _this6.controlCoordinates.limitOffsetY * -1, _this6.controlCoordinates.limitOffsetY);

              if (Math.abs(_this6.controlCoordinates.targetOffsetX) === Math.abs(_this6.controlCoordinates.limitOffsetX)) {
                _this6.controlCoordinates.initialOffsetX = _this6.controlCoordinates.targetOffsetX;
                _this6.controlCoordinates.initialPointerOffsetX = _this6.controlCoordinates.pointerOffsetX;
              }

              if (Math.abs(_this6.controlCoordinates.targetOffsetY) === Math.abs(_this6.controlCoordinates.limitOffsetY)) {
                _this6.controlCoordinates.initialOffsetY = _this6.controlCoordinates.targetOffsetY;
                _this6.controlCoordinates.initialPointerOffsetY = _this6.controlCoordinates.pointerOffsetY;
              }

              _this6.setZoomData(_this6.controlCoordinates.initialScale, _this6.controlCoordinates.targetOffsetX, _this6.controlCoordinates.targetOffsetY);

              _this6.zoomPanElement(_this6.controlCoordinates.targetOffsetX + "px", _this6.controlCoordinates.targetOffsetY + "px", _this6.controlCoordinates.targetScale);
            }
          }
          /* Mouse Move implementation */


          if (event.type === 'mousemove' && _this6.controlCoordinates.mousedown) {
            if (event.type == 'touchmove') return true;
            event.preventDefault();
            if (_this6.controlCoordinates.capture === false) return false;
            _this6.controlCoordinates.pointerOffsetX = event.clientX;
            _this6.controlCoordinates.pointerOffsetY = event.clientY;
            _this6.controlCoordinates.targetScale = _this6.controlCoordinates.initialScale;
            _this6.controlCoordinates.limitOffsetX = (_this6.controlCoordinates.imgWidth * _this6.controlCoordinates.targetScale - _this6.controlCoordinates.containerWidth) / 2;
            _this6.controlCoordinates.limitOffsetY = (_this6.controlCoordinates.imgHeight * _this6.controlCoordinates.targetScale - _this6.controlCoordinates.containerHeight) / 2;
            _this6.controlCoordinates.targetOffsetX = _this6.controlCoordinates.imgWidth * _this6.controlCoordinates.targetScale <= _this6.controlCoordinates.containerWidth ? 0 : _this6.minMax(_this6.controlCoordinates.pointerOffsetX - (_this6.controlCoordinates.initialPointerOffsetX - _this6.controlCoordinates.initialOffsetX), _this6.controlCoordinates.limitOffsetX * -1, _this6.controlCoordinates.limitOffsetX);
            _this6.controlCoordinates.targetOffsetY = _this6.controlCoordinates.imgHeight * _this6.controlCoordinates.targetScale <= _this6.controlCoordinates.containerHeight ? 0 : _this6.minMax(_this6.controlCoordinates.pointerOffsetY - (_this6.controlCoordinates.initialPointerOffsetY - _this6.controlCoordinates.initialOffsetY), _this6.controlCoordinates.limitOffsetY * -1, _this6.controlCoordinates.limitOffsetY);

            if (Math.abs(_this6.controlCoordinates.targetOffsetX) === Math.abs(_this6.controlCoordinates.limitOffsetX)) {
              _this6.controlCoordinates.initialOffsetX = _this6.controlCoordinates.targetOffsetX;
              _this6.controlCoordinates.initialPointerOffsetX = _this6.controlCoordinates.pointerOffsetX;
            }

            if (Math.abs(_this6.controlCoordinates.targetOffsetY) === Math.abs(_this6.controlCoordinates.limitOffsetY)) {
              _this6.controlCoordinates.initialOffsetY = _this6.controlCoordinates.targetOffsetY;
              _this6.controlCoordinates.initialPointerOffsetY = _this6.controlCoordinates.pointerOffsetY;
            }

            _this6.setZoomData(_this6.controlCoordinates.initialScale, _this6.controlCoordinates.targetOffsetX, _this6.controlCoordinates.targetOffsetY);

            _this6.zoomPanElement(_this6.controlCoordinates.targetOffsetX + "px", _this6.controlCoordinates.targetOffsetY + "px", _this6.controlCoordinates.targetScale);
          }

          if (!_this6.controlCoordinates.zoomed) {
            _this6.controlCoordinates.swipeEnd = event.pageX || event.touches[0].pageX;
            _this6.controlCoordinates.swipeYEnd = event.pageY || event.touches[0].pageY;
            _this6.controlCoordinates.swipeDiff = _this6.controlCoordinates.swipeStart - _this6.controlCoordinates.swipeEnd;
            _this6.controlCoordinates.swipeYDiff = _this6.controlCoordinates.swipeYStart - _this6.controlCoordinates.swipeYEnd;

            if (_this6.options.animationSlide) {
              _this6.slide(0, -_this6.controlCoordinates.swipeDiff + 'px');
            }
          }
        });
        this.addEventListener(this.domNodes.image, ['touchend.' + this.eventNamespace, 'mouseup.' + this.eventNamespace, 'touchcancel.' + this.eventNamespace, 'mouseleave.' + this.eventNamespace, 'pointerup', 'pointercancel', 'MSPointerUp', 'MSPointerCancel'], function (event) {
          if (_this6.isTouchDevice && event.type === 'touchend') {
            _this6.controlCoordinates.touchCount = event.touches.length;

            if (_this6.controlCoordinates.touchCount === 0)
              /* No touch */
              {
                /* Set attributes */
                if (_this6.currentImage) {
                  _this6.setZoomData(_this6.controlCoordinates.initialScale, _this6.controlCoordinates.targetOffsetX, _this6.controlCoordinates.targetOffsetY);
                }

                if (_this6.controlCoordinates.initialScale === 1) {
                  _this6.controlCoordinates.zoomed = false;

                  if (_this6.domNodes.caption.style.display === 'none') {
                    _this6.fadeIn(_this6.domNodes.caption, _this6.options.fadeSpeed);
                  }
                }

                _this6.controlCoordinates.initialPinchDistance = null;
                _this6.controlCoordinates.capture = false;
              } else if (_this6.controlCoordinates.touchCount === 1)
              /* Single touch */
              {
                _this6.controlCoordinates.initialPointerOffsetX = event.touches[0].clientX;
                _this6.controlCoordinates.initialPointerOffsetY = event.touches[0].clientY;
              } else if (_this6.controlCoordinates.touchCount > 1)
              /* Pinch */
              {
                _this6.controlCoordinates.initialPinchDistance = null;
              }
          }

          if (_this6.controlCoordinates.mousedown) {
            _this6.controlCoordinates.mousedown = false;
            var possibleDir = true;

            if (!_this6.options.loop) {
              if (_this6.currentImageIndex === 0 && _this6.controlCoordinates.swipeDiff < 0) {
                possibleDir = false;
              }

              if (_this6.currentImageIndex >= _this6.relatedElements.length - 1 && _this6.controlCoordinates.swipeDiff > 0) {
                possibleDir = false;
              }
            }

            if (Math.abs(_this6.controlCoordinates.swipeDiff) > _this6.options.swipeTolerance && possibleDir) {
              _this6.loadImage(_this6.controlCoordinates.swipeDiff > 0 ? 1 : -1);
            } else if (_this6.options.animationSlide) {
              _this6.slide(_this6.options.animationSpeed / 1000, 0 + 'px');
            }

            if (_this6.options.swipeClose && Math.abs(_this6.controlCoordinates.swipeYDiff) > 50 && Math.abs(_this6.controlCoordinates.swipeDiff) < _this6.options.swipeTolerance) {
              _this6.close();
            }
          }
        });
        this.addEventListener(this.domNodes.image, ['dblclick'], function (event) {
          if (_this6.isTouchDevice) return;
          _this6.controlCoordinates.initialPointerOffsetX = event.clientX;
          _this6.controlCoordinates.initialPointerOffsetY = event.clientY;
          _this6.controlCoordinates.containerHeight = _this6.getDimensions(_this6.domNodes.image).height;
          _this6.controlCoordinates.containerWidth = _this6.getDimensions(_this6.domNodes.image).width;
          _this6.controlCoordinates.imgHeight = _this6.getDimensions(_this6.currentImage).height;
          _this6.controlCoordinates.imgWidth = _this6.getDimensions(_this6.currentImage).width;
          _this6.controlCoordinates.containerOffsetX = _this6.domNodes.image.offsetLeft;
          _this6.controlCoordinates.containerOffsetY = _this6.domNodes.image.offsetTop;

          _this6.currentImage.classList.add('sl-transition');

          if (!_this6.controlCoordinates.zoomed) {
            _this6.controlCoordinates.initialScale = _this6.options.doubleTapZoom;

            _this6.setZoomData(_this6.controlCoordinates.initialScale, 0, 0);

            _this6.zoomPanElement(0 + "px", 0 + "px", _this6.controlCoordinates.initialScale);

            if (!_this6.domNodes.caption.style.opacity && _this6.domNodes.caption.style.display !== 'none') {
              _this6.fadeOut(_this6.domNodes.caption, _this6.options.fadeSpeed);
            }

            _this6.controlCoordinates.zoomed = true;
          } else {
            _this6.controlCoordinates.initialScale = 1;

            _this6.setZoomData(_this6.controlCoordinates.initialScale, 0, 0);

            _this6.zoomPanElement(0 + "px", 0 + "px", _this6.controlCoordinates.initialScale);

            _this6.controlCoordinates.zoomed = false;

            if (_this6.domNodes.caption.style.display === 'none') {
              _this6.fadeIn(_this6.domNodes.caption, _this6.options.fadeSpeed);
            }
          }

          setTimeout(function () {
            if (_this6.currentImage) {
              _this6.currentImage.classList.remove('sl-transition');

              _this6.currentImage.style[_this6.transitionPrefix + 'transform-origin'] = null;
            }
          }, 200);
          _this6.controlCoordinates.capture = true;
          return false;
        });
      }
    }, {
      key: "getDimensions",
      value: function getDimensions(element) {
        var styles = window.getComputedStyle(element),
            height = element.offsetHeight,
            width = element.offsetWidth,
            borderTopWidth = parseFloat(styles.borderTopWidth),
            borderBottomWidth = parseFloat(styles.borderBottomWidth),
            paddingTop = parseFloat(styles.paddingTop),
            paddingBottom = parseFloat(styles.paddingBottom),
            borderLeftWidth = parseFloat(styles.borderLeftWidth),
            borderRightWidth = parseFloat(styles.borderRightWidth),
            paddingLeft = parseFloat(styles.paddingLeft),
            paddingRight = parseFloat(styles.paddingRight);
        return {
          height: height - borderBottomWidth - borderTopWidth - paddingTop - paddingBottom,
          width: width - borderLeftWidth - borderRightWidth - paddingLeft - paddingRight
        };
      }
    }, {
      key: "updateHash",
      value: function updateHash() {
        var newHash = 'pid=' + (this.currentImageIndex + 1),
            newURL = window.location.href.split('#')[0] + '#' + newHash;
        this.hashReseted = false;

        if (this.pushStateSupport) {
          window.history[this.historyHasChanges ? 'replaceState' : 'pushState']('', document.title, newURL);
        } else {
          // what is the browser target of this?
          if (this.historyHasChanges) {
            window.location.replace(newURL);
          } else {
            window.location.hash = newHash;
          }
        }

        if (!this.historyHasChanges) {
          this.urlChangedOnce = true;
        }

        this.historyHasChanges = true;
      }
    }, {
      key: "resetHash",
      value: function resetHash() {
        this.hashReseted = true;

        if (this.urlChangedOnce) {
          history.back();
        } else {
          if (this.pushStateSupport) {
            history.pushState('', document.title, window.location.pathname + window.location.search);
          } else {
            window.location.hash = '';
          }
        } //
        //in case an history operation is still pending


        clearTimeout(this.historyUpdateTimeout);
      }
    }, {
      key: "updateURL",
      value: function updateURL() {
        clearTimeout(this.historyUpdateTimeout);

        if (!this.historyHasChanges) {
          this.updateHash(); // first time
        } else {
          this.historyUpdateTimeout = setTimeout(this.updateHash.bind(this), 800);
        }
      }
    }, {
      key: "setCaption",
      value: function setCaption(captionText, imageWidth) {
        var _this7 = this;

        if (this.options.captions && captionText && captionText !== '' && typeof captionText !== "undefined") {
          this.hide(this.domNodes.caption);
          this.domNodes.caption.style.width = imageWidth + 'px';
          this.domNodes.caption.innerHTML = captionText;
          this.domNodes.image.appendChild(this.domNodes.caption);
          setTimeout(function () {
            _this7.fadeIn(_this7.domNodes.caption, _this7.options.fadeSpeed);
          }, this.options.captionDelay);
        }
      }
    }, {
      key: "slide",
      value: function slide(speed, pos) {
        if (!this.transitionCapable) {
          return this.domNodes.image.style.left = pos;
        }

        this.domNodes.image.style[this.transitionPrefix + 'transform'] = 'translateX(' + pos + ')';
        this.domNodes.image.style[this.transitionPrefix + 'transition'] = this.transitionPrefix + 'transform ' + speed + 's linear';
      }
    }, {
      key: "getRelated",
      value: function getRelated(rel) {
        var elems;

        if (rel && rel !== false && rel !== 'nofollow') {
          elems = Array.from(this.elements).filter(function (element) {
            return element.getAttribute('rel') === rel;
          });
        } else {
          elems = this.elements;
        }

        return elems;
      }
    }, {
      key: "openImage",
      value: function openImage(element) {
        var _this8 = this;

        element.dispatchEvent(new Event('show.' + this.eventNamespace));

        if (this.options.disableScroll) {
          this.globalScrollbarWidth = this.toggleScrollbar('hide');
        }

        if (this.options.htmlClass && this.options.htmlClass !== '') {
          document.querySelector('html').classList.add(this.options.htmlClass);
        }

        document.body.appendChild(this.domNodes.wrapper);
        this.domNodes.wrapper.appendChild(this.domNodes.image);

        if (this.options.overlay) {
          document.body.appendChild(this.domNodes.overlay);
        }

        this.relatedElements = this.getRelated(element.rel);

        if (this.options.showCounter) {
          if (this.relatedElements.length == 1 && this.domNodes.wrapper.contains(this.domNodes.counter)) {
            this.domNodes.wrapper.removeChild(this.domNodes.counter);
          } else if (this.relatedElements.length > 1 && !this.domNodes.wrapper.contains(this.domNodes.counter)) {
            this.domNodes.wrapper.appendChild(this.domNodes.counter);
          }
        }

        this.isAnimating = true;
        this.currentImageIndex = this.relatedElements.indexOf(element);
        var targetURL = element.getAttribute(this.options.sourceAttr);
        this.currentImage = document.createElement('img');
        this.currentImage.style.display = 'none';
        this.currentImage.setAttribute('src', targetURL);
        this.currentImage.dataset.scale = 1;
        this.currentImage.dataset.translateX = 0;
        this.currentImage.dataset.translateY = 0;

        if (this.loadedImages.indexOf(targetURL) === -1) {
          this.loadedImages.push(targetURL);
        }

        this.domNodes.image.innerHTML = '';
        this.domNodes.image.setAttribute('style', '');
        this.domNodes.image.appendChild(this.currentImage);
        this.fadeIn(this.domNodes.overlay, this.options.fadeSpeed);
        this.fadeIn([this.domNodes.counter, this.domNodes.navigation, this.domNodes.closeButton], this.options.fadeSpeed);
        this.show(this.domNodes.spinner);
        this.domNodes.counter.querySelector('.sl-current').innerHTML = this.currentImageIndex + 1;
        this.domNodes.counter.querySelector('.sl-total').innerHTML = this.relatedElements.length;
        this.adjustImage();

        if (this.options.preloading) {
          this.preload();
        }

        setTimeout(function () {
          element.dispatchEvent(new Event('shown.' + _this8.eventNamespace));
        }, this.options.animationSpeed);
      }
    }, {
      key: "forceFocus",
      value: function forceFocus() {
        var _this9 = this;

        this.removeEventListener(document, 'focusin.' + this.eventNamespace);
        this.addEventListener(document, 'focusin.' + this.eventNamespace, function (event) {
          if (document !== event.target && _this9.domNodes.wrapper !== event.target && !_this9.domNodes.wrapper.contains(event.target)) {
            _this9.domNodes.wrapper.focus();
          }
        });
      } // utility

    }, {
      key: "addEventListener",
      value: function addEventListener(elements, events, callback, opts) {
        elements = this.wrap(elements);
        events = this.wrap(events);

        var _iterator = _createForOfIteratorHelper(elements),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var element = _step.value;

            if (!element.namespaces) {
              element.namespaces = {};
            } // save the namespaces addEventListener the DOM element itself


            var _iterator2 = _createForOfIteratorHelper(events),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var event = _step2.value;
                var options = opts || false;
                var needsPassiveFix = ['touchstart', 'touchmove'].indexOf(event.split('.')[0]) >= 0;

                if (needsPassiveFix && this.isPassiveEventsSupported) {
                  if (_typeof(options) === 'object') {
                    options.passive = true;
                  } else {
                    options = {
                      passive: true
                    };
                  }
                }

                element.namespaces[event] = callback;
                element.addEventListener(event.split('.')[0], callback, options);
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "removeEventListener",
      value: function removeEventListener(elements, events) {
        elements = this.wrap(elements);
        events = this.wrap(events);

        var _iterator3 = _createForOfIteratorHelper(elements),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var element = _step3.value;

            var _iterator4 = _createForOfIteratorHelper(events),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var event = _step4.value;

                if (element.namespaces && element.namespaces[event]) {
                  element.removeEventListener(event.split('.')[0], element.namespaces[event]);
                  delete element.namespaces[event];
                }
              }
            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }
      }
    }, {
      key: "fadeOut",
      value: function fadeOut(elements, duration, callback) {
        var _this10 = this;

        elements = this.wrap(elements);

        var _iterator5 = _createForOfIteratorHelper(elements),
            _step5;

        try {
          for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
            var element = _step5.value;
            element.style.opacity = 1;
          }
        } catch (err) {
          _iterator5.e(err);
        } finally {
          _iterator5.f();
        }

        this.isFadeIn = false;

        var step = 16.66666 / (duration || this.options.fadeSpeed),
            fade = function fade() {
          var currentOpacity = parseFloat(elements[0].style.opacity);

          if ((currentOpacity -= step) < 0) {
            var _iterator6 = _createForOfIteratorHelper(elements),
                _step6;

            try {
              for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
                var element = _step6.value;
                element.style.display = "none"; // element.style.opacity = '';

                element.style.opacity = 1;
              }
            } catch (err) {
              _iterator6.e(err);
            } finally {
              _iterator6.f();
            }

            callback && callback.call(_this10, elements);
          } else {
            var _iterator7 = _createForOfIteratorHelper(elements),
                _step7;

            try {
              for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
                var _element = _step7.value;
                _element.style.opacity = currentOpacity;
              }
            } catch (err) {
              _iterator7.e(err);
            } finally {
              _iterator7.f();
            }

            requestAnimationFrame(fade);
          }
        };

        fade();
      }
    }, {
      key: "fadeIn",
      value: function fadeIn(elements, duration, callback, display) {
        var _this11 = this;

        elements = this.wrap(elements);

        var _iterator8 = _createForOfIteratorHelper(elements),
            _step8;

        try {
          for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
            var element = _step8.value;
            element.style.opacity = 0;
            element.style.display = display || "block";
          }
        } catch (err) {
          _iterator8.e(err);
        } finally {
          _iterator8.f();
        }

        this.isFadeIn = true;

        var opacityTarget = parseFloat(elements[0].dataset.opacityTarget || 1),
            step = 16.66666 * opacityTarget / (duration || this.options.fadeSpeed),
            fade = function fade() {
          var currentOpacity = parseFloat(elements[0].style.opacity);

          if (!((currentOpacity += step) > opacityTarget)) {
            var _iterator9 = _createForOfIteratorHelper(elements),
                _step9;

            try {
              for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {
                var element = _step9.value;
                element.style.opacity = currentOpacity;
              }
            } catch (err) {
              _iterator9.e(err);
            } finally {
              _iterator9.f();
            }

            if (!_this11.isFadeIn) return;
            requestAnimationFrame(fade);
          } else {
            var _iterator10 = _createForOfIteratorHelper(elements),
                _step10;

            try {
              for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {
                var _element2 = _step10.value;
                _element2.style.opacity = '';
              }
            } catch (err) {
              _iterator10.e(err);
            } finally {
              _iterator10.f();
            }

            callback && callback.call(_this11, elements);
          }
        };

        fade();
      }
    }, {
      key: "hide",
      value: function hide(elements) {
        elements = this.wrap(elements);

        var _iterator11 = _createForOfIteratorHelper(elements),
            _step11;

        try {
          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {
            var element = _step11.value;

            if (element.style.display != 'none') {
              element.dataset.initialDisplay = element.style.display;
            }

            element.style.display = 'none';
          }
        } catch (err) {
          _iterator11.e(err);
        } finally {
          _iterator11.f();
        }
      }
    }, {
      key: "show",
      value: function show(elements, display) {
        elements = this.wrap(elements);

        var _iterator12 = _createForOfIteratorHelper(elements),
            _step12;

        try {
          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {
            var element = _step12.value;
            element.style.display = element.dataset.initialDisplay || display || 'block';
          }
        } catch (err) {
          _iterator12.e(err);
        } finally {
          _iterator12.f();
        }
      }
    }, {
      key: "wrap",
      value: function wrap(input) {
        return typeof input[Symbol.iterator] === 'function' && typeof input !== 'string' ? input : [input];
      }
    }, {
      key: "on",
      value: function on(events, callback) {
        events = this.wrap(events);

        var _iterator13 = _createForOfIteratorHelper(this.elements),
            _step13;

        try {
          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {
            var element = _step13.value;

            if (!element.fullyNamespacedEvents) {
              element.fullyNamespacedEvents = {};
            }

            var _iterator14 = _createForOfIteratorHelper(events),
                _step14;

            try {
              for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {
                var event = _step14.value;
                element.fullyNamespacedEvents[event] = callback;
                element.addEventListener(event, callback);
              }
            } catch (err) {
              _iterator14.e(err);
            } finally {
              _iterator14.f();
            }
          }
        } catch (err) {
          _iterator13.e(err);
        } finally {
          _iterator13.f();
        }

        return this;
      }
    }, {
      key: "off",
      value: function off(events) {
        events = this.wrap(events);

        var _iterator15 = _createForOfIteratorHelper(this.elements),
            _step15;

        try {
          for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {
            var element = _step15.value;

            var _iterator16 = _createForOfIteratorHelper(events),
                _step16;

            try {
              for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {
                var event = _step16.value;

                if (typeof element.fullyNamespacedEvents !== 'undefined' && event in element.fullyNamespacedEvents) {
                  element.removeEventListener(event, element.fullyNamespacedEvents[event]);
                }
              }
            } catch (err) {
              _iterator16.e(err);
            } finally {
              _iterator16.f();
            }
          }
        } catch (err) {
          _iterator15.e(err);
        } finally {
          _iterator15.f();
        }

        return this;
      } // api

    }, {
      key: "open",
      value: function open(elem) {
        elem = elem || this.elements[0];

        if (typeof jQuery !== "undefined" && elem instanceof jQuery) {
          elem = elem.get(0);
        }

        this.initialImageIndex = this.elements.indexOf(elem);

        if (this.initialImageIndex > -1) {
          this.openImage(elem);
        }
      }
    }, {
      key: "next",
      value: function next() {
        this.loadImage(1);
      }
    }, {
      key: "prev",
      value: function prev() {
        this.loadImage(-1);
      } // get some useful data

    }, {
      key: "getLighboxData",
      value: function getLighboxData() {
        return {
          currentImageIndex: this.currentImageIndex,
          currentImage: this.currentImage,
          globalScrollbarWidth: this.globalScrollbarWidth
        };
      } //close is exposed anyways..

    }, {
      key: "destroy",
      value: function destroy() {
        //remove all custom event listeners from elements
        this.off(['close.' + this.eventNamespace, 'closed.' + this.eventNamespace, 'nextImageLoaded.' + this.eventNamespace, 'prevImageLoaded.' + this.eventNamespace, 'change.' + this.eventNamespace, 'nextDone.' + this.eventNamespace, 'prevDone.' + this.eventNamespace, 'error.' + this.eventNamespace, 'changed.' + this.eventNamespace, 'next.' + this.eventNamespace, 'prev.' + this.eventNamespace, 'show.' + this.eventNamespace, 'shown.' + this.eventNamespace]);
        this.removeEventListener(this.elements, 'click.' + this.eventNamespace);
        this.removeEventListener(document, 'focusin.' + this.eventNamespace);
        this.removeEventListener(document.body, 'contextmenu.' + this.eventNamespace);
        this.removeEventListener(document.body, 'keyup.' + this.eventNamespace);
        this.removeEventListener(this.domNodes.navigation.getElementsByTagName('button'), 'click.' + this.eventNamespace);
        this.removeEventListener(this.domNodes.closeButton, 'click.' + this.eventNamespace);
        this.removeEventListener(window, 'resize.' + this.eventNamespace);
        this.removeEventListener(window, 'hashchange.' + this.eventNamespace);
        this.close();

        if (this.isOpen) {
          document.body.removeChild(this.domNodes.wrapper);
          document.body.removeChild(this.domNodes.overlay);
        }

        this.elements = null;
      }
    }, {
      key: "refresh",
      value: function refresh() {
        if (!this.initialSelector) {
          throw 'refreshing only works when you initialize using a selector!';
        }

        var options = this.options,
            selector = this.initialSelector;
        this.destroy();
        this.constructor(selector, options);
        return this;
      }
    }]);

    return SimpleLightbox;
  }();

  var _default = SimpleLightbox;
  exports["default"] = _default;
  commonjsGlobal.SimpleLightbox = SimpleLightbox;
  });

  var SimpleLightbox = unwrapExports(simpleLightbox_modules);

  new SimpleLightbox('.gallery__fancybox', {
    /* options */
  });

  /**
   * Sticky Sidebar v2 JavaScript Plugin.
   * @version 1.0.1
   * @author Øystein Blixhavn <oystein@blixhavn.no>
   * @license The MIT License (MIT)
   */
  const StickySidebar = (() => {

      // ---------------------------------
      // # Define Constants
      // ---------------------------------
      //
      const EVENT_KEY = '.stickySidebar';

      const DEFAULTS = {
        /**
         * Additional top spacing of the element when it becomes sticky.
         * @type {Numeric|Function}
         */
        topSpacing: 0,

        /**
         * Additional bottom spacing of the element when it becomes sticky.
         * @type {Numeric|Function}
         */
        bottomSpacing: 0,

        /**
         * Container sidebar selector to know what the beginning and end of sticky element.
         * @type {String|False}
         */
        containerSelector: false,

        /**
         * Parent element where the scrolling happens.
         */
        scrollContainer: false,

        /**
         * Inner wrapper selector.
         * @type {String}
         */
        innerWrapperSelector: '.inner-wrapper-sticky',

        /**
         * The name of CSS class to apply to elements when they have become stuck.
         * @type {String|False}
         */
        stickyClass: 'is-affixed',

        /**
         * The sidebar returns to its normal position if its width below this value.
         * @type {Numeric}
         */
        minWidth: false
      };

      // ---------------------------------
      // # Class Definition
      // ---------------------------------
      //
      /**
       * Sticky Sidebar Class.
       * @public
       */
      class StickySidebar{

        /**
         * Sticky Sidebar Constructor.
         * @constructor
         * @param {HTMLElement|String} sidebar - The sidebar element or sidebar selector.
         * @param {Object} options - The options of sticky sidebar.
         */
        constructor(sidebar, options = {}){
          this.options = StickySidebar.extend(DEFAULTS, options);

          // Sidebar element query if there's no one, throw error.
          this.sidebar = ('string' === typeof sidebar ) ? document.querySelector(sidebar) : sidebar;
          if( 'undefined' === typeof this.sidebar )
            throw new Error("There is no specific sidebar element.");

          this.sidebarInner = false;
          this.container = this.sidebar.parentElement;

          // Current Affix Type of sidebar element.
          this.affixedType = 'STATIC';
          this.direction = 'down';
          this.support = {
            transform:   false,
            transform3d: false
          };

          this._initialized = false;
          this._reStyle = false;
          this._breakpoint = false;

          // Dimensions of sidebar, container and screen viewport.
          this.dimensions = {
            translateY: 0,
            maxTranslateY: 0,
            topSpacing: 0,
            lastTopSpacing: 0,
            bottomSpacing: 0,
            lastBottomSpacing: 0,
            sidebarHeight: 0,
            sidebarWidth: 0,
            containerTop: 0,
            containerHeight: 0,
            viewportHeight: 0,
            viewportTop: 0,
            lastViewportTop: 0,
          };

          // Bind event handlers for referencability.
          ['handleEvent'].forEach( (method) => {
            this[method] = this[method].bind(this);
          });

          // Initialize sticky sidebar for first time.
          this.initialize();
        }

        /**
         * Initializes the sticky sidebar by adding inner wrapper, define its container,
         * min-width breakpoint, calculating dimensions, adding helper classes and inline style.
         * @private
         */
        initialize(){
          this._setSupportFeatures();

          // Get sticky sidebar inner wrapper, if not found, will create one.
          if( this.options.innerWrapperSelector ){
            this.sidebarInner = this.sidebar.querySelector(this.options.innerWrapperSelector);

            if( null === this.sidebarInner )
              this.sidebarInner = false;
          }

          if( ! this.sidebarInner ){
            let wrapper = document.createElement('div');
            wrapper.setAttribute('class', 'inner-wrapper-sticky');
            this.sidebar.appendChild(wrapper);

            while( this.sidebar.firstChild != wrapper )
              wrapper.appendChild(this.sidebar.firstChild);

            this.sidebarInner = this.sidebar.querySelector('.inner-wrapper-sticky');
          }

          // Container wrapper of the sidebar.
          if( this.options.containerSelector ){
            let containers = document.querySelectorAll(this.options.containerSelector);
            containers = Array.prototype.slice.call(containers);

            containers.forEach((container, item) => {
              if( ! container.contains(this.sidebar) ) return;
              this.container = container;
            });

            if( ! containers.length )
              throw new Error("The container does not contains on the sidebar.");
          }

          // Get scroll container, if provided
          this.scrollContainer = this.options.scrollContainer ? document.querySelector(this.options.scrollContainer) : undefined;

          // If top/bottom spacing is not function parse value to integer.
          if( 'function' !== typeof this.options.topSpacing )
            this.options.topSpacing = parseInt(this.options.topSpacing) || 0;

          if( 'function' !== typeof this.options.bottomSpacing )
            this.options.bottomSpacing = parseInt(this.options.bottomSpacing) || 0;

          // Breakdown sticky sidebar if screen width below `options.minWidth`.
          this._widthBreakpoint();

          // Calculate dimensions of sidebar, container and viewport.
          this.calcDimensions();

          // Affix sidebar in proper position.
          this.stickyPosition();

          // Bind all events.
          this.bindEvents();

          // Inform other properties the sticky sidebar is initialized.
          this._initialized = true;
        }

        /**
         * Bind all events of sticky sidebar plugin.
         * @protected
         */
        bindEvents(){
          this.eventTarget = this.scrollContainer ? this.scrollContainer : window;

          this.eventTarget.addEventListener('resize', this, { passive: true, capture: false });
          this.eventTarget.addEventListener('scroll', this, { passive: true, capture: false });

          this.sidebar.addEventListener('update' + EVENT_KEY, this);

          if( 'undefined' !== typeof ResizeObserver ){
            const resizeObserver = new ResizeObserver(() => this.handleEvent());
            resizeObserver.observe(this.sidebarInner);
            resizeObserver.observe(this.container);
          }
        }

        /**
         * Handles all events of the plugin.
         * @param {Object} event - Event object passed from listener.
         */
        handleEvent(event){
          this.updateSticky(event);
        }

        /**
         * Calculates dimensions of sidebar, container and screen viewpoint
         * @public
         */
        calcDimensions(){
          if( this._breakpoint ) return;
          var dims = this.dimensions;

          // Container of sticky sidebar dimensions.
          dims.containerTop    = StickySidebar.offsetRelative(this.container).top;
          dims.containerHeight = this.container.clientHeight;
          dims.containerBottom = dims.containerTop + dims.containerHeight;

          // Sidebar dimensions.
          dims.sidebarHeight = this.sidebarInner.offsetHeight;
          dims.sidebarWidth  = this.sidebarInner.offsetWidth;

          // Screen viewport dimensions.
          dims.viewportHeight = window.innerHeight;

          // Maximum sidebar translate Y.
          dims.maxTranslateY = dims.containerHeight - dims.sidebarHeight;

          this._calcDimensionsWithScroll();
        }

        /**
         * Some dimensions values need to be up-to-date when scrolling the page.
         * @private
         */
        _calcDimensionsWithScroll(){
          var dims = this.dimensions;

          dims.sidebarLeft = StickySidebar.offsetRelative(this.sidebar).left;

          if (this.scrollContainer) {
            dims.viewportTop = this.scrollContainer.scrollTop;
            dims.viewportLeft = this.scrollContainer.scrollLeft;
          } else {
            dims.viewportTop = document.documentElement.scrollTop || document.body.scrollTop;
            dims.viewportLeft = document.documentElement.scrollLeft || document.body.scrollLeft;
          }
          dims.viewportBottom = dims.viewportTop + dims.viewportHeight;

          dims.topSpacing    = this.options.topSpacing;
          dims.bottomSpacing = this.options.bottomSpacing;

          if( 'function' === typeof dims.topSpacing )
              dims.topSpacing = parseInt(dims.topSpacing(this.sidebar)) || 0;

          if( 'function' === typeof dims.bottomSpacing )
              dims.bottomSpacing = parseInt(dims.bottomSpacing(this.sidebar)) || 0;

          if( 'VIEWPORT-TOP' === this.affixedType ){
            // Adjust translate Y in the case decrease top spacing value.
            if( dims.topSpacing < dims.lastTopSpacing ){
              dims.translateY += dims.lastTopSpacing - dims.topSpacing;
              this._reStyle = true;
            }
          } else if( 'VIEWPORT-BOTTOM' === this.affixedType ){
            // Adjust translate Y in the case decrease bottom spacing value.
            if( dims.bottomSpacing < dims.lastBottomSpacing ){
              dims.translateY += dims.lastBottomSpacing - dims.bottomSpacing;
              this._reStyle = true;
            }
          }

          dims.lastTopSpacing    = dims.topSpacing;
          dims.lastBottomSpacing = dims.bottomSpacing;
        }

        /**
         * Determine whether the sidebar is bigger than viewport.
         * @public
         * @return {Boolean}
         */
        isSidebarFitsViewport() {
          return this.dimensions.viewportHeight >= (
            this.dimensions.lastBottomSpacing +
            this.dimensions.lastTopSpacing +
            this.dimensions.sidebarHeight
          );
        }

        /**
         * Observe browser scrolling direction top and down.
         */
        observeScrollDir(){
          var dims = this.dimensions;
          if( dims.lastViewportTop === dims.viewportTop ) return;

          var furthest = 'down' === this.direction ? Math.min : Math.max;

          // If the browser is scrolling not in the same direction.
          if( dims.viewportTop === furthest(dims.viewportTop, dims.lastViewportTop) )
            this.direction = 'down' === this.direction ?  'up' : 'down';
        }

        /**
         * Gets affix type of sidebar according to current scroll top and scrolling direction.
         * @public
         * @return {String|False} - Proper affix type.
         */
        getAffixType(){
          this._calcDimensionsWithScroll();
          var dims = this.dimensions;
          var colliderTop = dims.viewportTop + dims.topSpacing;
          var affixType = this.affixedType;

         if( colliderTop <= dims.containerTop || dims.containerHeight <= dims.sidebarHeight ){
            dims.translateY = 0;
            affixType = 'STATIC';
          } else {
            affixType = ( 'up' === this.direction ) ?
              this._getAffixTypeScrollingUp() : this._getAffixTypeScrollingDown();
          }

          // Make sure the translate Y is not bigger than container height.
          dims.translateY = Math.max(0, dims.translateY);
          dims.translateY = Math.min(dims.containerHeight, dims.translateY);
          dims.translateY = Math.round(dims.translateY);

          dims.lastViewportTop = dims.viewportTop;
          return affixType;
        }

        /**
         * Get affix type while scrolling down.
         * @private
         * @return {String} - Proper affix type of scrolling down direction.
         */
        _getAffixTypeScrollingDown(){
          var dims = this.dimensions;
          var sidebarBottom = dims.sidebarHeight + dims.containerTop;
          var colliderTop = dims.viewportTop + dims.topSpacing;
          var colliderBottom = dims.viewportBottom - dims.bottomSpacing;
          var affixType = this.affixedType;

          if( this.isSidebarFitsViewport() ){
            if( dims.sidebarHeight + colliderTop >= dims.containerBottom ){
              dims.translateY = dims.containerBottom - sidebarBottom;
              affixType = 'CONTAINER-BOTTOM';

            } else if( colliderTop >= dims.containerTop ){
              dims.translateY = colliderTop - dims.containerTop;
              affixType = 'VIEWPORT-TOP';
            }
          } else {
            if( dims.containerBottom <= colliderBottom ){
              dims.translateY = dims.containerBottom - sidebarBottom;
              affixType = 'CONTAINER-BOTTOM';

            } else if( sidebarBottom + dims.translateY <= colliderBottom ){
              dims.translateY = colliderBottom - sidebarBottom;
              affixType = 'VIEWPORT-BOTTOM';

            } else if( dims.containerTop + dims.translateY <= colliderTop &&
              (0 !== dims.translateY && dims.maxTranslateY !== dims.translateY) ){
              affixType = 'VIEWPORT-UNBOTTOM';
            }
          }

          return affixType;
        }

        /**
         * Get affix type while scrolling up.
         * @private
         * @return {String} - Proper affix type of scrolling up direction.
         */
        _getAffixTypeScrollingUp(){
          var dims = this.dimensions;
          var sidebarBottom = dims.sidebarHeight + dims.containerTop;
          var colliderTop = dims.viewportTop + dims.topSpacing;
          var colliderBottom = dims.viewportBottom - dims.bottomSpacing;
          var affixType = this.affixedType;

          if( colliderTop <= dims.translateY + dims.containerTop ){
            dims.translateY = colliderTop - dims.containerTop;
            affixType = 'VIEWPORT-TOP';

          } else if( dims.containerBottom <= colliderBottom ){
            dims.translateY = dims.containerBottom - sidebarBottom;
            affixType = 'CONTAINER-BOTTOM';

          } else if( ! this.isSidebarFitsViewport() ){

            if( dims.containerTop <= colliderTop &&
                (0 !== dims.translateY && dims.maxTranslateY !== dims.translateY) ){
              affixType = 'VIEWPORT-UNBOTTOM';
            }
          }

          return affixType;
        }

        /**
         * Gets inline style of sticky sidebar wrapper and inner wrapper according
         * to its affix type.
         * @private
         * @param {String} affixType - Affix type of sticky sidebar.
         * @return {Object}
         */
        _getStyle(affixType){
          if( 'undefined' === typeof affixType ) return;

          var style = {inner: {}, outer: {}};
          var dims = this.dimensions;

          switch( affixType ){
            case 'VIEWPORT-TOP':
              style.inner = {position: 'fixed', top: dims.topSpacing,
                    left: dims.sidebarLeft - dims.viewportLeft, width: dims.sidebarWidth};
              break;
            case 'VIEWPORT-BOTTOM':
              style.inner = {position: 'fixed', top: 'auto', left: dims.sidebarLeft,
                    bottom: dims.bottomSpacing, width: dims.sidebarWidth};
              break;
            case 'CONTAINER-BOTTOM':
            case 'VIEWPORT-UNBOTTOM':
              let translate = this._getTranslate(0, dims.translateY + 'px');

              if( translate )
                style.inner = {transform: translate};
              else
                style.inner = {position: 'absolute', top: dims.translateY, width: dims.sidebarWidth};
              break;
          }

          switch( affixType ){
            case 'VIEWPORT-TOP':
            case 'VIEWPORT-BOTTOM':
            case 'VIEWPORT-UNBOTTOM':
            case 'CONTAINER-BOTTOM':
              style.outer = {height: dims.sidebarHeight, position: 'relative'};
              break;
          }

          style.outer = StickySidebar.extend({height: '', position: ''}, style.outer);
          style.inner = StickySidebar.extend({position: 'relative', top: '', left: '',
              bottom: '', width: '',  transform: ''}, style.inner);

          return style;
        }

        /**
         * Cause the sidebar to be sticky according to affix type by adding inline
         * style, adding helper class and trigger events.
         * @function
         * @protected
         * @param {string} force - Update sticky sidebar position by force.
         */
        stickyPosition(force){
          if( this._breakpoint ) return;

          force = this._reStyle || force || false;

          this.options.topSpacing;
          this.options.bottomSpacing;

          var affixType = this.getAffixType();
          var style = this._getStyle(affixType);

          if( (this.affixedType != affixType || force) && affixType ){
            let affixEvent = 'affix.' + affixType.toLowerCase().replace('viewport-', '') + EVENT_KEY;
            StickySidebar.eventTrigger(this.sidebar, affixEvent);

            if( 'STATIC' === affixType )
              StickySidebar.removeClass(this.sidebar, this.options.stickyClass);
            else
              StickySidebar.addClass(this.sidebar, this.options.stickyClass);

            for( let key in style.outer ){
              let unit = ('number' === typeof style.outer[key]) ? 'px' : '';
              this.sidebar.style[key] = style.outer[key] + unit;
            }

            for( let key in style.inner ){
              let unit = ('number' === typeof style.inner[key]) ? 'px' : '';
              this.sidebarInner.style[key] = style.inner[key] + unit;
            }

            let affixedEvent = 'affixed.'+ affixType.toLowerCase().replace('viewport-', '') + EVENT_KEY;
            StickySidebar.eventTrigger(this.sidebar, affixedEvent);
          } else {
            if( this._initialized ) this.sidebarInner.style.left = style.inner.left;
          }

          this.affixedType = affixType;
        }

        /**
         * Breakdown sticky sidebar when window width is below `options.minWidth` value.
         * @protected
         */
        _widthBreakpoint(){

          if( window.innerWidth <= this.options.minWidth ){
            this._breakpoint = true;
            this.affixedType = 'STATIC';

            this.sidebar.removeAttribute('style');
            StickySidebar.removeClass(this.sidebar, this.options.stickyClass);
            this.sidebarInner.removeAttribute('style');
          } else {
            this._breakpoint = false;
          }
        }

        /**
         * Switches between functions stack for each event type, if there's no
         * event, it will re-initialize sticky sidebar.
         * @public
         */
        updateSticky(event = {}){
          if( this._running ) return;
          this._running = true;

          ((eventType) => {
            requestAnimationFrame(() => {
              switch( eventType ){
                // When browser is scrolling and re-calculate just dimensions
                // within scroll.
                case 'scroll':
                  this._calcDimensionsWithScroll();
                  this.observeScrollDir();
                  this.stickyPosition();
                  break;

                // When browser is resizing or there's no event, observe width
                // breakpoint and re-calculate dimensions.
                case 'resize':
                default:
                  this._widthBreakpoint();
                  this.calcDimensions();
                  this.stickyPosition(true);
                  break;
              }
              this._running = false;
            });
          })(event.type);
        }

        /**
         * Set browser support features to the public property.
         * @private
         */
        _setSupportFeatures(){
          var support = this.support;

          support.transform = StickySidebar.supportTransform();
          support.transform3d = StickySidebar.supportTransform(true);
        }

        /**
         * Get translate value, if the browser supports transfrom3d, it will adopt it.
         * and the same with translate. if browser doesn't support both return false.
         * @param {Number} y - Value of Y-axis.
         * @param {Number} x - Value of X-axis.
         * @param {Number} z - Value of Z-axis.
         * @return {String|False}
         */
        _getTranslate(y = 0, x = 0, z = 0){
          if( this.support.transform3d ) return 'translate3d(' + y +', '+ x +', '+ z +')';
          else if( this.support.translate ) return 'translate('+ y +', '+ x +')';
          else return false;
        }

        /**
         * Destroy sticky sidebar plugin.
         * @public
         */
        destroy(){
          window.removeEventListener('resize', this, {capture: false});
          window.removeEventListener('scroll', this, {capture: false});

          this.sidebar.classList.remove(this.options.stickyClass);
          this.sidebar.style.minHeight = '';

          this.sidebar.removeEventListener('update' + EVENT_KEY, this);

          var styleReset = {inner: {}, outer: {}};

          styleReset.inner = {position: '', top: '', left: '', bottom: '', width: '',  transform: ''};
          styleReset.outer = {height: '', position: ''};

          for( let key in styleReset.outer )
            this.sidebar.style[key] = styleReset.outer[key];

          for( let key in styleReset.inner )
            this.sidebarInner.style[key] = styleReset.inner[key];

          if( this.options.resizeSensor && 'undefined' !== typeof ResizeSensor ){
            ResizeSensor.detach(this.sidebarInner, this.handleEvent);
            ResizeSensor.detach(this.container, this.handleEvent);
          }
        }

        /**
         * Determine if the browser supports CSS transform feature.
         * @function
         * @static
         * @param {Boolean} transform3d - Detect transform with translate3d.
         * @return {String}
         */
        static supportTransform(transform3d){
          var result = false,
              property = (transform3d) ? 'perspective' : 'transform',
              upper = property.charAt(0).toUpperCase() + property.slice(1),
              prefixes = ['Webkit', 'Moz', 'O', 'ms'],
              support = document.createElement('support'),
              style = support.style;

          (property + ' ' + prefixes.join(upper + ' ') + upper).split(' ').forEach(function(property, i) {
            if (style[property] !== undefined) {
              result = property;
              return false;
            }
          });
          return result;
        }

        /**
         * Trigger custom event.
         * @static
         * @param {DOMObject} element - Target element on the DOM.
         * @param {String} eventName - Event name.
         * @param {Object} data -
         */
        static eventTrigger(element, eventName, data){
          try{
            var event = new CustomEvent(eventName, {detail: data});
          } catch(e){
            var event = document.createEvent('CustomEvent');
            event.initCustomEvent(eventName, true, true, data);
          }
          element.dispatchEvent(event);
        }

        /**
         * Extend options object with defaults.
         * @function
         * @static
         */
        static extend(defaults, options){
          var results = {};
          for( let key in defaults ){
            if( 'undefined' !== typeof options[key] ) results[key] = options[key];
            else results[key] = defaults[key];
          }
          return results;
        }

        /**
         * Get current coordinates left and top of specific element.
         * @static
         */
        static offsetRelative(element){
          var result = {left: 0, top: 0};

          do{
            let offsetTop = element.offsetTop;
            let offsetLeft = element.offsetLeft;

            if( ! isNaN(offsetTop) )
              result.top += offsetTop;

            if( ! isNaN(offsetLeft) )
              result.left += offsetLeft;

            element = ( 'BODY' === element.tagName ) ?
                        element.parentElement : element.offsetParent;
          } while(element)
          return result;
        }

        /**
         * Add specific class name to specific element.
         * @static
         * @param {ObjectDOM} element
         * @param {String} className
         */
        static addClass(element, className){
          if( ! StickySidebar.hasClass(element, className) ){
            if (element.classList)
              element.classList.add(className);
            else
              element.className += ' ' + className;
          }
        }

        /**
         * Remove specific class name to specific element
         * @static
         * @param {ObjectDOM} element
         * @param {String} className
         */
        static removeClass(element, className){
          if( StickySidebar.hasClass(element, className) ){
            if (element.classList)
              element.classList.remove(className);
            else
              element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
          }
        }

        /**
         * Determine weather the element has specific class name.
         * @static
         * @param {ObjectDOM} element
         * @param {String} className
         */
        static hasClass(element, className){
          if (element.classList)
            return element.classList.contains(className);
          else
            return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
        }

        /**
         * Gets default values of configuration options.
         * @static
         * @return {Object}
         */
        static get defaults(){
          return DEFAULTS;
        }
      }

      return StickySidebar;
    })();

    // Global
    // -------------------------
    window.StickySidebar = StickySidebar;

  if (document.querySelector('.sidebar')) {
    new StickySidebar('.sidebar', {
      containerSelector: '.layout',
      innerWrapperSelector: '.sidebar__inner',
      topSpacing: 30,
      bottomSpacing: 20
    });
  }

  var objectExtend = extend;

  /*
    var obj = {a: 3, b: 5};
    extend(obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}
    obj; // {a: 4, b: 5, c: 8}

    var obj = {a: 3, b: 5};
    extend({}, obj, {a: 4, c: 8}); // {a: 4, b: 5, c: 8}
    obj; // {a: 3, b: 5}

    var arr = [1, 2, 3];
    var obj = {a: 3, b: 5};
    extend(obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}
    arr.push(4);
    obj; // {a: 3, b: 5, c: [1, 2, 3, 4]}

    var arr = [1, 2, 3];
    var obj = {a: 3, b: 5};
    extend(true, obj, {c: arr}); // {a: 3, b: 5, c: [1, 2, 3]}
    arr.push(4);
    obj; // {a: 3, b: 5, c: [1, 2, 3]}

    extend({a: 4, b: 5}); // {a: 4, b: 5}
    extend({a: 4, b: 5}, 3); {a: 4, b: 5}
    extend({a: 4, b: 5}, true); {a: 4, b: 5}
    extend('hello', {a: 4, b: 5}); // throws
    extend(3, {a: 4, b: 5}); // throws
  */

  function extend(/* [deep], obj1, obj2, [objn] */) {
    var args = [].slice.call(arguments);
    var deep = false;
    if (typeof args[0] == 'boolean') {
      deep = args.shift();
    }
    var result = args[0];
    if (isUnextendable(result)) {
      throw new Error('extendee must be an object');
    }
    var extenders = args.slice(1);
    var len = extenders.length;
    for (var i = 0; i < len; i++) {
      var extender = extenders[i];
      for (var key in extender) {
        if (Object.prototype.hasOwnProperty.call(extender, key)) {
          var value = extender[key];
          if (deep && isCloneable(value)) {
            var base = Array.isArray(value) ? [] : {};
            result[key] = extend(
              true,
              Object.prototype.hasOwnProperty.call(result, key) && !isUnextendable(result[key])
                ? result[key]
                : base,
              value
            );
          } else {
            result[key] = value;
          }
        }
      }
    }
    return result;
  }

  function isCloneable(obj) {
    return Array.isArray(obj) || {}.toString.call(obj) == '[object Object]';
  }

  function isUnextendable(val) {
    return !val || (typeof val != 'object' && typeof val != 'function');
  }

  function $parcel$interopDefault(a) {
    return a && a.__esModule ? a.default : a;
  }

  class $4040acfd8584338d$export$2e2bcd8739ae039 {
      // Add an event listener for given event
      on(event, fn) {
          this._callbacks = this._callbacks || {
          };
          // Create namespace for this event
          if (!this._callbacks[event]) this._callbacks[event] = [];
          this._callbacks[event].push(fn);
          return this;
      }
      emit(event, ...args) {
          this._callbacks = this._callbacks || {
          };
          let callbacks = this._callbacks[event];
          if (callbacks) for (let callback of callbacks)callback.apply(this, args);
          // trigger a corresponding DOM event
          if (this.element) this.element.dispatchEvent(this.makeEvent("dropzone:" + event, {
              args: args
          }));
          return this;
      }
      makeEvent(eventName, detail) {
          let params = {
              bubbles: true,
              cancelable: true,
              detail: detail
          };
          if (typeof window.CustomEvent === "function") return new CustomEvent(eventName, params);
          else {
              // IE 11 support
              // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent
              var evt = document.createEvent("CustomEvent");
              evt.initCustomEvent(eventName, params.bubbles, params.cancelable, params.detail);
              return evt;
          }
      }
      // Remove event listener for given event. If fn is not provided, all event
      // listeners for that event will be removed. If neither is provided, all
      // event listeners will be removed.
      off(event, fn) {
          if (!this._callbacks || arguments.length === 0) {
              this._callbacks = {
              };
              return this;
          }
          // specific event
          let callbacks = this._callbacks[event];
          if (!callbacks) return this;
          // remove all handlers
          if (arguments.length === 1) {
              delete this._callbacks[event];
              return this;
          }
          // remove specific handler
          for(let i = 0; i < callbacks.length; i++){
              let callback = callbacks[i];
              if (callback === fn) {
                  callbacks.splice(i, 1);
                  break;
              }
          }
          return this;
      }
  }



  var $fd6031f88dce2e32$exports = {};
  $fd6031f88dce2e32$exports = "<div class=\"dz-preview dz-file-preview\">\n  <div class=\"dz-image\"><img data-dz-thumbnail=\"\"></div>\n  <div class=\"dz-details\">\n    <div class=\"dz-size\"><span data-dz-size=\"\"></span></div>\n    <div class=\"dz-filename\"><span data-dz-name=\"\"></span></div>\n  </div>\n  <div class=\"dz-progress\">\n    <span class=\"dz-upload\" data-dz-uploadprogress=\"\"></span>\n  </div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage=\"\"></span></div>\n  <div class=\"dz-success-mark\">\n    <svg width=\"54\" height=\"54\" viewBox=\"0 0 54 54\" fill=\"white\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M10.2071 29.7929L14.2929 25.7071C14.6834 25.3166 15.3166 25.3166 15.7071 25.7071L21.2929 31.2929C21.6834 31.6834 22.3166 31.6834 22.7071 31.2929L38.2929 15.7071C38.6834 15.3166 39.3166 15.3166 39.7071 15.7071L43.7929 19.7929C44.1834 20.1834 44.1834 20.8166 43.7929 21.2071L22.7071 42.2929C22.3166 42.6834 21.6834 42.6834 21.2929 42.2929L10.2071 31.2071C9.81658 30.8166 9.81658 30.1834 10.2071 29.7929Z\"></path>\n    </svg>\n  </div>\n  <div class=\"dz-error-mark\">\n    <svg width=\"54\" height=\"54\" viewBox=\"0 0 54 54\" fill=\"white\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path d=\"M26.2929 20.2929L19.2071 13.2071C18.8166 12.8166 18.1834 12.8166 17.7929 13.2071L13.2071 17.7929C12.8166 18.1834 12.8166 18.8166 13.2071 19.2071L20.2929 26.2929C20.6834 26.6834 20.6834 27.3166 20.2929 27.7071L13.2071 34.7929C12.8166 35.1834 12.8166 35.8166 13.2071 36.2071L17.7929 40.7929C18.1834 41.1834 18.8166 41.1834 19.2071 40.7929L26.2929 33.7071C26.6834 33.3166 27.3166 33.3166 27.7071 33.7071L34.7929 40.7929C35.1834 41.1834 35.8166 41.1834 36.2071 40.7929L40.7929 36.2071C41.1834 35.8166 41.1834 35.1834 40.7929 34.7929L33.7071 27.7071C33.3166 27.3166 33.3166 26.6834 33.7071 26.2929L40.7929 19.2071C41.1834 18.8166 41.1834 18.1834 40.7929 17.7929L36.2071 13.2071C35.8166 12.8166 35.1834 12.8166 34.7929 13.2071L27.7071 20.2929C27.3166 20.6834 26.6834 20.6834 26.2929 20.2929Z\"></path>\n    </svg>\n  </div>\n</div>\n";


  let $4ca367182776f80b$var$defaultOptions = {
      /**
     * Has to be specified on elements other than form (or when the form doesn't
     * have an `action` attribute).
     *
     * You can also provide a function that will be called with `files` and
     * `dataBlocks`  and must return the url as string.
     */ url: null,
      /**
     * Can be changed to `"put"` if necessary. You can also provide a function
     * that will be called with `files` and must return the method (since `v3.12.0`).
     */ method: "post",
      /**
     * Will be set on the XHRequest.
     */ withCredentials: false,
      /**
     * The timeout for the XHR requests in milliseconds (since `v4.4.0`).
     * If set to null or 0, no timeout is going to be set.
     */ timeout: null,
      /**
     * How many file uploads to process in parallel (See the
     * Enqueuing file uploads documentation section for more info)
     */ parallelUploads: 2,
      /**
     * Whether to send multiple files in one request. If
     * this it set to true, then the fallback file input element will
     * have the `multiple` attribute as well. This option will
     * also trigger additional events (like `processingmultiple`). See the events
     * documentation section for more information.
     */ uploadMultiple: false,
      /**
     * Whether you want files to be uploaded in chunks to your server. This can't be
     * used in combination with `uploadMultiple`.
     *
     * See [chunksUploaded](#config-chunksUploaded) for the callback to finalise an upload.
     */ chunking: false,
      /**
     * If `chunking` is enabled, this defines whether **every** file should be chunked,
     * even if the file size is below chunkSize. This means, that the additional chunk
     * form data will be submitted and the `chunksUploaded` callback will be invoked.
     */ forceChunking: false,
      /**
     * If `chunking` is `true`, then this defines the chunk size in bytes.
     */ chunkSize: 2097152,
      /**
     * If `true`, the individual chunks of a file are being uploaded simultaneously.
     */ parallelChunkUploads: false,
      /**
     * Whether a chunk should be retried if it fails.
     */ retryChunks: false,
      /**
     * If `retryChunks` is true, how many times should it be retried.
     */ retryChunksLimit: 3,
      /**
     * The maximum filesize (in MiB) that is allowed to be uploaded.
     */ maxFilesize: 256,
      /**
     * The name of the file param that gets transferred.
     * **NOTE**: If you have the option  `uploadMultiple` set to `true`, then
     * Dropzone will append `[]` to the name.
     */ paramName: "file",
      /**
     * Whether thumbnails for images should be generated
     */ createImageThumbnails: true,
      /**
     * In MB. When the filename exceeds this limit, the thumbnail will not be generated.
     */ maxThumbnailFilesize: 10,
      /**
     * If `null`, the ratio of the image will be used to calculate it.
     */ thumbnailWidth: 120,
      /**
     * The same as `thumbnailWidth`. If both are null, images will not be resized.
     */ thumbnailHeight: 120,
      /**
     * How the images should be scaled down in case both, `thumbnailWidth` and `thumbnailHeight` are provided.
     * Can be either `contain` or `crop`.
     */ thumbnailMethod: "crop",
      /**
     * If set, images will be resized to these dimensions before being **uploaded**.
     * If only one, `resizeWidth` **or** `resizeHeight` is provided, the original aspect
     * ratio of the file will be preserved.
     *
     * The `options.transformFile` function uses these options, so if the `transformFile` function
     * is overridden, these options don't do anything.
     */ resizeWidth: null,
      /**
     * See `resizeWidth`.
     */ resizeHeight: null,
      /**
     * The mime type of the resized image (before it gets uploaded to the server).
     * If `null` the original mime type will be used. To force jpeg, for example, use `image/jpeg`.
     * See `resizeWidth` for more information.
     */ resizeMimeType: null,
      /**
     * The quality of the resized images. See `resizeWidth`.
     */ resizeQuality: 0.8,
      /**
     * How the images should be scaled down in case both, `resizeWidth` and `resizeHeight` are provided.
     * Can be either `contain` or `crop`.
     */ resizeMethod: "contain",
      /**
     * The base that is used to calculate the **displayed** filesize. You can
     * change this to 1024 if you would rather display kibibytes, mebibytes,
     * etc... 1024 is technically incorrect, because `1024 bytes` are `1 kibibyte`
     * not `1 kilobyte`. You can change this to `1024` if you don't care about
     * validity.
     */ filesizeBase: 1000,
      /**
     * If not `null` defines how many files this Dropzone handles. If it exceeds,
     * the event `maxfilesexceeded` will be called. The dropzone element gets the
     * class `dz-max-files-reached` accordingly so you can provide visual
     * feedback.
     */ maxFiles: null,
      /**
     * An optional object to send additional headers to the server. Eg:
     * `{ "My-Awesome-Header": "header value" }`
     */ headers: null,
      /**
     * Should the default headers be set or not?
     * Accept: application/json <- for requesting json response
     * Cache-Control: no-cache <- Request shouldnt be cached
     * X-Requested-With: XMLHttpRequest <- We sent the request via XMLHttpRequest
     */ defaultHeaders: true,
      /**
     * If `true`, the dropzone element itself will be clickable, if `false`
     * nothing will be clickable.
     *
     * You can also pass an HTML element, a CSS selector (for multiple elements)
     * or an array of those. In that case, all of those elements will trigger an
     * upload when clicked.
     */ clickable: true,
      /**
     * Whether hidden files in directories should be ignored.
     */ ignoreHiddenFiles: true,
      /**
     * The default implementation of `accept` checks the file's mime type or
     * extension against this list. This is a comma separated list of mime
     * types or file extensions.
     *
     * Eg.: `image/*,application/pdf,.psd`
     *
     * If the Dropzone is `clickable` this option will also be used as
     * [`accept`](https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept)
     * parameter on the hidden file input as well.
     */ acceptedFiles: null,
      /**
     * **Deprecated!**
     * Use acceptedFiles instead.
     */ acceptedMimeTypes: null,
      /**
     * If false, files will be added to the queue but the queue will not be
     * processed automatically.
     * This can be useful if you need some additional user input before sending
     * files (or if you want want all files sent at once).
     * If you're ready to send the file simply call `myDropzone.processQueue()`.
     *
     * See the [enqueuing file uploads](#enqueuing-file-uploads) documentation
     * section for more information.
     */ autoProcessQueue: true,
      /**
     * If false, files added to the dropzone will not be queued by default.
     * You'll have to call `enqueueFile(file)` manually.
     */ autoQueue: true,
      /**
     * If `true`, this will add a link to every file preview to remove or cancel (if
     * already uploading) the file. The `dictCancelUpload`, `dictCancelUploadConfirmation`
     * and `dictRemoveFile` options are used for the wording.
     */ addRemoveLinks: false,
      /**
     * Defines where to display the file previews – if `null` the
     * Dropzone element itself is used. Can be a plain `HTMLElement` or a CSS
     * selector. The element should have the `dropzone-previews` class so
     * the previews are displayed properly.
     */ previewsContainer: null,
      /**
     * Set this to `true` if you don't want previews to be shown.
     */ disablePreviews: false,
      /**
     * This is the element the hidden input field (which is used when clicking on the
     * dropzone to trigger file selection) will be appended to. This might
     * be important in case you use frameworks to switch the content of your page.
     *
     * Can be a selector string, or an element directly.
     */ hiddenInputContainer: "body",
      /**
     * If null, no capture type will be specified
     * If camera, mobile devices will skip the file selection and choose camera
     * If microphone, mobile devices will skip the file selection and choose the microphone
     * If camcorder, mobile devices will skip the file selection and choose the camera in video mode
     * On apple devices multiple must be set to false.  AcceptedFiles may need to
     * be set to an appropriate mime type (e.g. "image/*", "audio/*", or "video/*").
     */ capture: null,
      /**
     * **Deprecated**. Use `renameFile` instead.
     */ renameFilename: null,
      /**
     * A function that is invoked before the file is uploaded to the server and renames the file.
     * This function gets the `File` as argument and can use the `file.name`. The actual name of the
     * file that gets used during the upload can be accessed through `file.upload.filename`.
     */ renameFile: null,
      /**
     * If `true` the fallback will be forced. This is very useful to test your server
     * implementations first and make sure that everything works as
     * expected without dropzone if you experience problems, and to test
     * how your fallbacks will look.
     */ forceFallback: false,
      /**
     * The text used before any files are dropped.
     */ dictDefaultMessage: "Drop files here to upload",
      /**
     * The text that replaces the default message text it the browser is not supported.
     */ dictFallbackMessage: "Your browser does not support drag'n'drop file uploads.",
      /**
     * The text that will be added before the fallback form.
     * If you provide a  fallback element yourself, or if this option is `null` this will
     * be ignored.
     */ dictFallbackText: "Please use the fallback form below to upload your files like in the olden days.",
      /**
     * If the filesize is too big.
     * `{{filesize}}` and `{{maxFilesize}}` will be replaced with the respective configuration values.
     */ dictFileTooBig: "File is too big ({{filesize}}MiB). Max filesize: {{maxFilesize}}MiB.",
      /**
     * If the file doesn't match the file type.
     */ dictInvalidFileType: "You can't upload files of this type.",
      /**
     * If the server response was invalid.
     * `{{statusCode}}` will be replaced with the servers status code.
     */ dictResponseError: "Server responded with {{statusCode}} code.",
      /**
     * If `addRemoveLinks` is true, the text to be used for the cancel upload link.
     */ dictCancelUpload: "Cancel upload",
      /**
     * The text that is displayed if an upload was manually canceled
     */ dictUploadCanceled: "Upload canceled.",
      /**
     * If `addRemoveLinks` is true, the text to be used for confirmation when cancelling upload.
     */ dictCancelUploadConfirmation: "Are you sure you want to cancel this upload?",
      /**
     * If `addRemoveLinks` is true, the text to be used to remove a file.
     */ dictRemoveFile: "Remove file",
      /**
     * If this is not null, then the user will be prompted before removing a file.
     */ dictRemoveFileConfirmation: null,
      /**
     * Displayed if `maxFiles` is st and exceeded.
     * The string `{{maxFiles}}` will be replaced by the configuration value.
     */ dictMaxFilesExceeded: "You can not upload any more files.",
      /**
     * Allows you to translate the different units. Starting with `tb` for terabytes and going down to
     * `b` for bytes.
     */ dictFileSizeUnits: {
          tb: "TB",
          gb: "GB",
          mb: "MB",
          kb: "KB",
          b: "b"
      },
      /**
     * Called when dropzone initialized
     * You can add event listeners here
     */ init () {
      },
      /**
     * Can be an **object** of additional parameters to transfer to the server, **or** a `Function`
     * that gets invoked with the `files`, `xhr` and, if it's a chunked upload, `chunk` arguments. In case
     * of a function, this needs to return a map.
     *
     * The default implementation does nothing for normal uploads, but adds relevant information for
     * chunked uploads.
     *
     * This is the same as adding hidden input fields in the form element.
     */ params (files, xhr, chunk) {
          if (chunk) return {
              dzuuid: chunk.file.upload.uuid,
              dzchunkindex: chunk.index,
              dztotalfilesize: chunk.file.size,
              dzchunksize: this.options.chunkSize,
              dztotalchunkcount: chunk.file.upload.totalChunkCount,
              dzchunkbyteoffset: chunk.index * this.options.chunkSize
          };
      },
      /**
     * A function that gets a [file](https://developer.mozilla.org/en-US/docs/DOM/File)
     * and a `done` function as parameters.
     *
     * If the done function is invoked without arguments, the file is "accepted" and will
     * be processed. If you pass an error message, the file is rejected, and the error
     * message will be displayed.
     * This function will not be called if the file is too big or doesn't match the mime types.
     */ accept (file, done) {
          return done();
      },
      /**
     * The callback that will be invoked when all chunks have been uploaded for a file.
     * It gets the file for which the chunks have been uploaded as the first parameter,
     * and the `done` function as second. `done()` needs to be invoked when everything
     * needed to finish the upload process is done.
     */ chunksUploaded: function(file, done) {
          done();
      },
      /**
     * Sends the file as binary blob in body instead of form data.
     * If this is set, the `params` option will be ignored.
     * It's an error to set this to `true` along with `uploadMultiple` since
     * multiple files cannot be in a single binary body.
     */ binaryBody: false,
      /**
     * Gets called when the browser is not supported.
     * The default implementation shows the fallback input field and adds
     * a text.
     */ fallback () {
          // This code should pass in IE7... :(
          let messageElement;
          this.element.className = `${this.element.className} dz-browser-not-supported`;
          for (let child of this.element.getElementsByTagName("div"))if (/(^| )dz-message($| )/.test(child.className)) {
              messageElement = child;
              child.className = "dz-message"; // Removes the 'dz-default' class
              break;
          }
          if (!messageElement) {
              messageElement = $3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement('<div class="dz-message"><span></span></div>');
              this.element.appendChild(messageElement);
          }
          let span = messageElement.getElementsByTagName("span")[0];
          if (span) {
              if (span.textContent != null) span.textContent = this.options.dictFallbackMessage;
              else if (span.innerText != null) span.innerText = this.options.dictFallbackMessage;
          }
          return this.element.appendChild(this.getFallbackForm());
      },
      /**
     * Gets called to calculate the thumbnail dimensions.
     *
     * It gets `file`, `width` and `height` (both may be `null`) as parameters and must return an object containing:
     *
     *  - `srcWidth` & `srcHeight` (required)
     *  - `trgWidth` & `trgHeight` (required)
     *  - `srcX` & `srcY` (optional, default `0`)
     *  - `trgX` & `trgY` (optional, default `0`)
     *
     * Those values are going to be used by `ctx.drawImage()`.
     */ resize (file, width, height, resizeMethod) {
          let info = {
              srcX: 0,
              srcY: 0,
              srcWidth: file.width,
              srcHeight: file.height
          };
          let srcRatio = file.width / file.height;
          // Automatically calculate dimensions if not specified
          if (width == null && height == null) {
              width = info.srcWidth;
              height = info.srcHeight;
          } else if (width == null) width = height * srcRatio;
          else if (height == null) height = width / srcRatio;
          // Make sure images aren't upscaled
          width = Math.min(width, info.srcWidth);
          height = Math.min(height, info.srcHeight);
          let trgRatio = width / height;
          if (info.srcWidth > width || info.srcHeight > height) {
              // Image is bigger and needs rescaling
              if (resizeMethod === "crop") {
                  if (srcRatio > trgRatio) {
                      info.srcHeight = file.height;
                      info.srcWidth = info.srcHeight * trgRatio;
                  } else {
                      info.srcWidth = file.width;
                      info.srcHeight = info.srcWidth / trgRatio;
                  }
              } else if (resizeMethod === "contain") {
                  // Method 'contain'
                  if (srcRatio > trgRatio) height = width / srcRatio;
                  else width = height * srcRatio;
              } else throw new Error(`Unknown resizeMethod '${resizeMethod}'`);
          }
          info.srcX = (file.width - info.srcWidth) / 2;
          info.srcY = (file.height - info.srcHeight) / 2;
          info.trgWidth = width;
          info.trgHeight = height;
          return info;
      },
      /**
     * Can be used to transform the file (for example, resize an image if necessary).
     *
     * The default implementation uses `resizeWidth` and `resizeHeight` (if provided) and resizes
     * images according to those dimensions.
     *
     * Gets the `file` as the first parameter, and a `done()` function as the second, that needs
     * to be invoked with the file when the transformation is done.
     */ transformFile (file, done) {
          if ((this.options.resizeWidth || this.options.resizeHeight) && file.type.match(/image.*/)) return this.resizeImage(file, this.options.resizeWidth, this.options.resizeHeight, this.options.resizeMethod, done);
          else return done(file);
      },
      /**
     * A string that contains the template used for each dropped
     * file. Change it to fulfill your needs but make sure to properly
     * provide all elements.
     *
     * If you want to use an actual HTML element instead of providing a String
     * as a config option, you could create a div with the id `tpl`,
     * put the template inside it and provide the element like this:
     *
     *     document
     *       .querySelector('#tpl')
     *       .innerHTML
     *
     */ previewTemplate: (/*@__PURE__*/$parcel$interopDefault($fd6031f88dce2e32$exports)),
      /*
     Those functions register themselves to the events on init and handle all
     the user interface specific stuff. Overwriting them won't break the upload
     but can break the way it's displayed.
     You can overwrite them if you don't like the default behavior. If you just
     want to add an additional event handler, register it on the dropzone object
     and don't overwrite those options.
     */ // Those are self explanatory and simply concern the DragnDrop.
      drop (e) {
          return this.element.classList.remove("dz-drag-hover");
      },
      dragstart (e) {
      },
      dragend (e) {
          return this.element.classList.remove("dz-drag-hover");
      },
      dragenter (e) {
          return this.element.classList.add("dz-drag-hover");
      },
      dragover (e) {
          return this.element.classList.add("dz-drag-hover");
      },
      dragleave (e) {
          return this.element.classList.remove("dz-drag-hover");
      },
      paste (e) {
      },
      // Called whenever there are no files left in the dropzone anymore, and the
      // dropzone should be displayed as if in the initial state.
      reset () {
          return this.element.classList.remove("dz-started");
      },
      // Called when a file is added to the queue
      // Receives `file`
      addedfile (file) {
          if (this.element === this.previewsContainer) this.element.classList.add("dz-started");
          if (this.previewsContainer && !this.options.disablePreviews) {
              file.previewElement = $3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement(this.options.previewTemplate.trim());
              file.previewTemplate = file.previewElement; // Backwards compatibility
              this.previewsContainer.appendChild(file.previewElement);
              for (var node of file.previewElement.querySelectorAll("[data-dz-name]"))node.textContent = file.name;
              for (node of file.previewElement.querySelectorAll("[data-dz-size]"))node.innerHTML = this.filesize(file.size);
              if (this.options.addRemoveLinks) {
                  file._removeLink = $3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement(`<a class="dz-remove" href="javascript:undefined;" data-dz-remove>${this.options.dictRemoveFile}</a>`);
                  file.previewElement.appendChild(file._removeLink);
              }
              let removeFileEvent = (e)=>{
                  e.preventDefault();
                  e.stopPropagation();
                  if (file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING) return $3ed269f2f0fb224b$export$2e2bcd8739ae039.confirm(this.options.dictCancelUploadConfirmation, ()=>this.removeFile(file)
                  );
                  else {
                      if (this.options.dictRemoveFileConfirmation) return $3ed269f2f0fb224b$export$2e2bcd8739ae039.confirm(this.options.dictRemoveFileConfirmation, ()=>this.removeFile(file)
                      );
                      else return this.removeFile(file);
                  }
              };
              for (let removeLink of file.previewElement.querySelectorAll("[data-dz-remove]"))removeLink.addEventListener("click", removeFileEvent);
          }
      },
      // Called whenever a file is removed.
      removedfile (file) {
          if (file.previewElement != null && file.previewElement.parentNode != null) file.previewElement.parentNode.removeChild(file.previewElement);
          return this._updateMaxFilesReachedClass();
      },
      // Called when a thumbnail has been generated
      // Receives `file` and `dataUrl`
      thumbnail (file, dataUrl) {
          if (file.previewElement) {
              file.previewElement.classList.remove("dz-file-preview");
              for (let thumbnailElement of file.previewElement.querySelectorAll("[data-dz-thumbnail]")){
                  thumbnailElement.alt = file.name;
                  thumbnailElement.src = dataUrl;
              }
              return setTimeout(()=>file.previewElement.classList.add("dz-image-preview")
              , 1);
          }
      },
      // Called whenever an error occurs
      // Receives `file` and `message`
      error (file, message) {
          if (file.previewElement) {
              file.previewElement.classList.add("dz-error");
              if (typeof message !== "string" && message.error) message = message.error;
              for (let node of file.previewElement.querySelectorAll("[data-dz-errormessage]"))node.textContent = message;
          }
      },
      errormultiple () {
      },
      // Called when a file gets processed. Since there is a cue, not all added
      // files are processed immediately.
      // Receives `file`
      processing (file) {
          if (file.previewElement) {
              file.previewElement.classList.add("dz-processing");
              if (file._removeLink) return file._removeLink.innerHTML = this.options.dictCancelUpload;
          }
      },
      processingmultiple () {
      },
      // Called whenever the upload progress gets updated.
      // Receives `file`, `progress` (percentage 0-100) and `bytesSent`.
      // To get the total number of bytes of the file, use `file.size`
      uploadprogress (file, progress, bytesSent) {
          if (file.previewElement) for (let node of file.previewElement.querySelectorAll("[data-dz-uploadprogress]"))node.nodeName === "PROGRESS" ? node.value = progress : node.style.width = `${progress}%`;
      },
      // Called whenever the total upload progress gets updated.
      // Called with totalUploadProgress (0-100), totalBytes and totalBytesSent
      totaluploadprogress () {
      },
      // Called just before the file is sent. Gets the `xhr` object as second
      // parameter, so you can modify it (for example to add a CSRF token) and a
      // `formData` object to add additional information.
      sending () {
      },
      sendingmultiple () {
      },
      // When the complete upload is finished and successful
      // Receives `file`
      success (file) {
          if (file.previewElement) return file.previewElement.classList.add("dz-success");
      },
      successmultiple () {
      },
      // When the upload is canceled.
      canceled (file) {
          return this.emit("error", file, this.options.dictUploadCanceled);
      },
      canceledmultiple () {
      },
      // When the upload is finished, either with success or an error.
      // Receives `file`
      complete (file) {
          if (file._removeLink) file._removeLink.innerHTML = this.options.dictRemoveFile;
          if (file.previewElement) return file.previewElement.classList.add("dz-complete");
      },
      completemultiple () {
      },
      maxfilesexceeded () {
      },
      maxfilesreached () {
      },
      queuecomplete () {
      },
      addedfiles () {
      }
  };
  var $4ca367182776f80b$export$2e2bcd8739ae039 = $4ca367182776f80b$var$defaultOptions;


  class $3ed269f2f0fb224b$export$2e2bcd8739ae039 extends $4040acfd8584338d$export$2e2bcd8739ae039 {
      static initClass() {
          // Exposing the emitter class, mainly for tests
          this.prototype.Emitter = $4040acfd8584338d$export$2e2bcd8739ae039;
          /*
       This is a list of all available events you can register on a dropzone object.

       You can register an event handler like this:

       dropzone.on("dragEnter", function() { });

       */ this.prototype.events = [
              "drop",
              "dragstart",
              "dragend",
              "dragenter",
              "dragover",
              "dragleave",
              "addedfile",
              "addedfiles",
              "removedfile",
              "thumbnail",
              "error",
              "errormultiple",
              "processing",
              "processingmultiple",
              "uploadprogress",
              "totaluploadprogress",
              "sending",
              "sendingmultiple",
              "success",
              "successmultiple",
              "canceled",
              "canceledmultiple",
              "complete",
              "completemultiple",
              "reset",
              "maxfilesexceeded",
              "maxfilesreached",
              "queuecomplete", 
          ];
          this.prototype._thumbnailQueue = [];
          this.prototype._processingThumbnail = false;
      }
      // Returns all files that have been accepted
      getAcceptedFiles() {
          return this.files.filter((file)=>file.accepted
          ).map((file)=>file
          );
      }
      // Returns all files that have been rejected
      // Not sure when that's going to be useful, but added for completeness.
      getRejectedFiles() {
          return this.files.filter((file)=>!file.accepted
          ).map((file)=>file
          );
      }
      getFilesWithStatus(status) {
          return this.files.filter((file)=>file.status === status
          ).map((file)=>file
          );
      }
      // Returns all files that are in the queue
      getQueuedFiles() {
          return this.getFilesWithStatus($3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED);
      }
      getUploadingFiles() {
          return this.getFilesWithStatus($3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING);
      }
      getAddedFiles() {
          return this.getFilesWithStatus($3ed269f2f0fb224b$export$2e2bcd8739ae039.ADDED);
      }
      // Files that are either queued or uploading
      getActiveFiles() {
          return this.files.filter((file)=>file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING || file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED
          ).map((file)=>file
          );
      }
      // The function that gets called when Dropzone is initialized. You
      // can (and should) setup event listeners inside this function.
      init() {
          // In case it isn't set already
          if (this.element.tagName === "form") this.element.setAttribute("enctype", "multipart/form-data");
          if (this.element.classList.contains("dropzone") && !this.element.querySelector(".dz-message")) this.element.appendChild($3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement(`<div class="dz-default dz-message"><button class="dz-button" type="button">${this.options.dictDefaultMessage}</button></div>`));
          if (this.clickableElements.length) {
              let setupHiddenFileInput = ()=>{
                  if (this.hiddenFileInput) this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
                  this.hiddenFileInput = document.createElement("input");
                  this.hiddenFileInput.setAttribute("type", "file");
                  if (this.options.maxFiles === null || this.options.maxFiles > 1) this.hiddenFileInput.setAttribute("multiple", "multiple");
                  this.hiddenFileInput.className = "dz-hidden-input";
                  if (this.options.acceptedFiles !== null) this.hiddenFileInput.setAttribute("accept", this.options.acceptedFiles);
                  if (this.options.capture !== null) this.hiddenFileInput.setAttribute("capture", this.options.capture);
                  // Making sure that no one can "tab" into this field.
                  this.hiddenFileInput.setAttribute("tabindex", "-1");
                  // Not setting `display="none"` because some browsers don't accept clicks
                  // on elements that aren't displayed.
                  this.hiddenFileInput.style.visibility = "hidden";
                  this.hiddenFileInput.style.position = "absolute";
                  this.hiddenFileInput.style.top = "0";
                  this.hiddenFileInput.style.left = "0";
                  this.hiddenFileInput.style.height = "0";
                  this.hiddenFileInput.style.width = "0";
                  $3ed269f2f0fb224b$export$2e2bcd8739ae039.getElement(this.options.hiddenInputContainer, "hiddenInputContainer").appendChild(this.hiddenFileInput);
                  this.hiddenFileInput.addEventListener("change", ()=>{
                      let { files: files  } = this.hiddenFileInput;
                      if (files.length) for (let file of files)this.addFile(file);
                      this.emit("addedfiles", files);
                      setupHiddenFileInput();
                  });
              };
              setupHiddenFileInput();
          }
          this.URL = window.URL !== null ? window.URL : window.webkitURL;
          // Setup all event listeners on the Dropzone object itself.
          // They're not in @setupEventListeners() because they shouldn't be removed
          // again when the dropzone gets disabled.
          for (let eventName of this.events)this.on(eventName, this.options[eventName]);
          this.on("uploadprogress", ()=>this.updateTotalUploadProgress()
          );
          this.on("removedfile", ()=>this.updateTotalUploadProgress()
          );
          this.on("canceled", (file)=>this.emit("complete", file)
          );
          // Emit a `queuecomplete` event if all files finished uploading.
          this.on("complete", (file)=>{
              if (this.getAddedFiles().length === 0 && this.getUploadingFiles().length === 0 && this.getQueuedFiles().length === 0) // This needs to be deferred so that `queuecomplete` really triggers after `complete`
              return setTimeout(()=>this.emit("queuecomplete")
              , 0);
          });
          const containsFiles = function(e) {
              if (e.dataTransfer.types) // Because e.dataTransfer.types is an Object in
              // IE, we need to iterate like this instead of
              // using e.dataTransfer.types.some()
              for(var i = 0; i < e.dataTransfer.types.length; i++){
                  if (e.dataTransfer.types[i] === "Files") return true;
              }
              return false;
          };
          let noPropagation = function(e) {
              // If there are no files, we don't want to stop
              // propagation so we don't interfere with other
              // drag and drop behaviour.
              if (!containsFiles(e)) return;
              e.stopPropagation();
              if (e.preventDefault) return e.preventDefault();
              else return e.returnValue = false;
          };
          // Create the listeners
          this.listeners = [
              {
                  element: this.element,
                  events: {
                      dragstart: (e)=>{
                          return this.emit("dragstart", e);
                      },
                      dragenter: (e)=>{
                          noPropagation(e);
                          return this.emit("dragenter", e);
                      },
                      dragover: (e)=>{
                          // Makes it possible to drag files from chrome's download bar
                          // http://stackoverflow.com/questions/19526430/drag-and-drop-file-uploads-from-chrome-downloads-bar
                          // Try is required to prevent bug in Internet Explorer 11 (SCRIPT65535 exception)
                          let efct;
                          try {
                              efct = e.dataTransfer.effectAllowed;
                          } catch (error) {
                          }
                          e.dataTransfer.dropEffect = "move" === efct || "linkMove" === efct ? "move" : "copy";
                          noPropagation(e);
                          return this.emit("dragover", e);
                      },
                      dragleave: (e)=>{
                          return this.emit("dragleave", e);
                      },
                      drop: (e)=>{
                          noPropagation(e);
                          return this.drop(e);
                      },
                      dragend: (e)=>{
                          return this.emit("dragend", e);
                      }
                  }
              }, 
          ];
          this.clickableElements.forEach((clickableElement)=>{
              return this.listeners.push({
                  element: clickableElement,
                  events: {
                      click: (evt)=>{
                          // Only the actual dropzone or the message element should trigger file selection
                          if (clickableElement !== this.element || evt.target === this.element || $3ed269f2f0fb224b$export$2e2bcd8739ae039.elementInside(evt.target, this.element.querySelector(".dz-message"))) this.hiddenFileInput.click(); // Forward the click
                          return true;
                      }
                  }
              });
          });
          this.enable();
          return this.options.init.call(this);
      }
      // Not fully tested yet
      destroy() {
          this.disable();
          this.removeAllFiles(true);
          if (this.hiddenFileInput != null ? this.hiddenFileInput.parentNode : undefined) {
              this.hiddenFileInput.parentNode.removeChild(this.hiddenFileInput);
              this.hiddenFileInput = null;
          }
          delete this.element.dropzone;
          return $3ed269f2f0fb224b$export$2e2bcd8739ae039.instances.splice($3ed269f2f0fb224b$export$2e2bcd8739ae039.instances.indexOf(this), 1);
      }
      updateTotalUploadProgress() {
          let totalUploadProgress;
          let totalBytesSent = 0;
          let totalBytes = 0;
          let activeFiles = this.getActiveFiles();
          if (activeFiles.length) {
              for (let file of this.getActiveFiles()){
                  totalBytesSent += file.upload.bytesSent;
                  totalBytes += file.upload.total;
              }
              totalUploadProgress = 100 * totalBytesSent / totalBytes;
          } else totalUploadProgress = 100;
          return this.emit("totaluploadprogress", totalUploadProgress, totalBytes, totalBytesSent);
      }
      // @options.paramName can be a function taking one parameter rather than a string.
      // A parameter name for a file is obtained simply by calling this with an index number.
      _getParamName(n) {
          if (typeof this.options.paramName === "function") return this.options.paramName(n);
          else return `${this.options.paramName}${this.options.uploadMultiple ? `[${n}]` : ""}`;
      }
      // If @options.renameFile is a function,
      // the function will be used to rename the file.name before appending it to the formData
      _renameFile(file) {
          if (typeof this.options.renameFile !== "function") return file.name;
          return this.options.renameFile(file);
      }
      // Returns a form that can be used as fallback if the browser does not support DragnDrop
      //
      // If the dropzone is already a form, only the input field and button are returned. Otherwise a complete form element is provided.
      // This code has to pass in IE7 :(
      getFallbackForm() {
          let existingFallback, form;
          if (existingFallback = this.getExistingFallback()) return existingFallback;
          let fieldsString = '<div class="dz-fallback">';
          if (this.options.dictFallbackText) fieldsString += `<p>${this.options.dictFallbackText}</p>`;
          fieldsString += `<input type="file" name="${this._getParamName(0)}" ${this.options.uploadMultiple ? 'multiple="multiple"' : undefined} /><input type="submit" value="Upload!"></div>`;
          let fields = $3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement(fieldsString);
          if (this.element.tagName !== "FORM") {
              form = $3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement(`<form action="${this.options.url}" enctype="multipart/form-data" method="${this.options.method}"></form>`);
              form.appendChild(fields);
          } else {
              // Make sure that the enctype and method attributes are set properly
              this.element.setAttribute("enctype", "multipart/form-data");
              this.element.setAttribute("method", this.options.method);
          }
          return form != null ? form : fields;
      }
      // Returns the fallback elements if they exist already
      //
      // This code has to pass in IE7 :(
      getExistingFallback() {
          let getFallback = function(elements) {
              for (let el of elements){
                  if (/(^| )fallback($| )/.test(el.className)) return el;
              }
          };
          for (let tagName of [
              "div",
              "form"
          ]){
              var fallback;
              if (fallback = getFallback(this.element.getElementsByTagName(tagName))) return fallback;
          }
      }
      // Activates all listeners stored in @listeners
      setupEventListeners() {
          return this.listeners.map((elementListeners)=>(()=>{
                  let result = [];
                  for(let event in elementListeners.events){
                      let listener = elementListeners.events[event];
                      result.push(elementListeners.element.addEventListener(event, listener, false));
                  }
                  return result;
              })()
          );
      }
      // Deactivates all listeners stored in @listeners
      removeEventListeners() {
          return this.listeners.map((elementListeners)=>(()=>{
                  let result = [];
                  for(let event in elementListeners.events){
                      let listener = elementListeners.events[event];
                      result.push(elementListeners.element.removeEventListener(event, listener, false));
                  }
                  return result;
              })()
          );
      }
      // Removes all event listeners and cancels all files in the queue or being processed.
      disable() {
          this.clickableElements.forEach((element)=>element.classList.remove("dz-clickable")
          );
          this.removeEventListeners();
          this.disabled = true;
          return this.files.map((file)=>this.cancelUpload(file)
          );
      }
      enable() {
          delete this.disabled;
          this.clickableElements.forEach((element)=>element.classList.add("dz-clickable")
          );
          return this.setupEventListeners();
      }
      // Returns a nicely formatted filesize
      filesize(size) {
          let selectedSize = 0;
          let selectedUnit = "b";
          if (size > 0) {
              let units = [
                  "tb",
                  "gb",
                  "mb",
                  "kb",
                  "b"
              ];
              for(let i = 0; i < units.length; i++){
                  let unit = units[i];
                  let cutoff = Math.pow(this.options.filesizeBase, 4 - i) / 10;
                  if (size >= cutoff) {
                      selectedSize = size / Math.pow(this.options.filesizeBase, 4 - i);
                      selectedUnit = unit;
                      break;
                  }
              }
              selectedSize = Math.round(10 * selectedSize) / 10; // Cutting of digits
          }
          return `<strong>${selectedSize}</strong> ${this.options.dictFileSizeUnits[selectedUnit]}`;
      }
      // Adds or removes the `dz-max-files-reached` class from the form.
      _updateMaxFilesReachedClass() {
          if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
              if (this.getAcceptedFiles().length === this.options.maxFiles) this.emit("maxfilesreached", this.files);
              return this.element.classList.add("dz-max-files-reached");
          } else return this.element.classList.remove("dz-max-files-reached");
      }
      drop(e) {
          if (!e.dataTransfer) return;
          this.emit("drop", e);
          // Convert the FileList to an Array
          // This is necessary for IE11
          let files = [];
          for(let i = 0; i < e.dataTransfer.files.length; i++)files[i] = e.dataTransfer.files[i];
          // Even if it's a folder, files.length will contain the folders.
          if (files.length) {
              let { items: items  } = e.dataTransfer;
              if (items && items.length && items[0].webkitGetAsEntry != null) // The browser supports dropping of folders, so handle items instead of files
              this._addFilesFromItems(items);
              else this.handleFiles(files);
          }
          this.emit("addedfiles", files);
      }
      paste(e) {
          if ($3ed269f2f0fb224b$var$__guard__(e != null ? e.clipboardData : undefined, (x)=>x.items
          ) == null) return;
          this.emit("paste", e);
          let { items: items  } = e.clipboardData;
          if (items.length) return this._addFilesFromItems(items);
      }
      handleFiles(files) {
          for (let file of files)this.addFile(file);
      }
      // When a folder is dropped (or files are pasted), items must be handled
      // instead of files.
      _addFilesFromItems(items) {
          return (()=>{
              let result = [];
              for (let item of items){
                  var entry;
                  if (item.webkitGetAsEntry != null && (entry = item.webkitGetAsEntry())) {
                      if (entry.isFile) result.push(this.addFile(item.getAsFile()));
                      else if (entry.isDirectory) // Append all files from that directory to files
                      result.push(this._addFilesFromDirectory(entry, entry.name));
                      else result.push(undefined);
                  } else if (item.getAsFile != null) {
                      if (item.kind == null || item.kind === "file") result.push(this.addFile(item.getAsFile()));
                      else result.push(undefined);
                  } else result.push(undefined);
              }
              return result;
          })();
      }
      // Goes through the directory, and adds each file it finds recursively
      _addFilesFromDirectory(directory, path) {
          let dirReader = directory.createReader();
          let errorHandler = (error)=>$3ed269f2f0fb224b$var$__guardMethod__(console, "log", (o)=>o.log(error)
              )
          ;
          var readEntries = ()=>{
              return dirReader.readEntries((entries)=>{
                  if (entries.length > 0) {
                      for (let entry of entries){
                          if (entry.isFile) entry.file((file)=>{
                              if (this.options.ignoreHiddenFiles && file.name.substring(0, 1) === ".") return;
                              file.fullPath = `${path}/${file.name}`;
                              return this.addFile(file);
                          });
                          else if (entry.isDirectory) this._addFilesFromDirectory(entry, `${path}/${entry.name}`);
                      }
                      // Recursively call readEntries() again, since browser only handle
                      // the first 100 entries.
                      // See: https://developer.mozilla.org/en-US/docs/Web/API/DirectoryReader#readEntries
                      readEntries();
                  }
                  return null;
              }, errorHandler);
          };
          return readEntries();
      }
      // If `done()` is called without argument the file is accepted
      // If you call it with an error message, the file is rejected
      // (This allows for asynchronous validation)
      //
      // This function checks the filesize, and if the file.type passes the
      // `acceptedFiles` check.
      accept(file, done) {
          if (this.options.maxFilesize && file.size > this.options.maxFilesize * 1048576) done(this.options.dictFileTooBig.replace("{{filesize}}", Math.round(file.size / 1024 / 10.24) / 100).replace("{{maxFilesize}}", this.options.maxFilesize));
          else if (!$3ed269f2f0fb224b$export$2e2bcd8739ae039.isValidFile(file, this.options.acceptedFiles)) done(this.options.dictInvalidFileType);
          else if (this.options.maxFiles != null && this.getAcceptedFiles().length >= this.options.maxFiles) {
              done(this.options.dictMaxFilesExceeded.replace("{{maxFiles}}", this.options.maxFiles));
              this.emit("maxfilesexceeded", file);
          } else this.options.accept.call(this, file, done);
      }
      addFile(file) {
          file.upload = {
              uuid: $3ed269f2f0fb224b$export$2e2bcd8739ae039.uuidv4(),
              progress: 0,
              // Setting the total upload size to file.size for the beginning
              // It's actual different than the size to be transmitted.
              total: file.size,
              bytesSent: 0,
              filename: this._renameFile(file)
          };
          this.files.push(file);
          file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.ADDED;
          this.emit("addedfile", file);
          this._enqueueThumbnail(file);
          this.accept(file, (error)=>{
              if (error) {
                  file.accepted = false;
                  this._errorProcessing([
                      file
                  ], error); // Will set the file.status
              } else {
                  file.accepted = true;
                  if (this.options.autoQueue) this.enqueueFile(file);
                   // Will set .accepted = true
              }
              this._updateMaxFilesReachedClass();
          });
      }
      // Wrapper for enqueueFile
      enqueueFiles(files) {
          for (let file of files)this.enqueueFile(file);
          return null;
      }
      enqueueFile(file) {
          if (file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.ADDED && file.accepted === true) {
              file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED;
              if (this.options.autoProcessQueue) return setTimeout(()=>this.processQueue()
              , 0); // Deferring the call
          } else throw new Error("This file can't be queued because it has already been processed or was rejected.");
      }
      _enqueueThumbnail(file) {
          if (this.options.createImageThumbnails && file.type.match(/image.*/) && file.size <= this.options.maxThumbnailFilesize * 1048576) {
              this._thumbnailQueue.push(file);
              return setTimeout(()=>this._processThumbnailQueue()
              , 0); // Deferring the call
          }
      }
      _processThumbnailQueue() {
          if (this._processingThumbnail || this._thumbnailQueue.length === 0) return;
          this._processingThumbnail = true;
          let file = this._thumbnailQueue.shift();
          return this.createThumbnail(file, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, true, (dataUrl)=>{
              this.emit("thumbnail", file, dataUrl);
              this._processingThumbnail = false;
              return this._processThumbnailQueue();
          });
      }
      // Can be called by the user to remove a file
      removeFile(file) {
          if (file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING) this.cancelUpload(file);
          this.files = $3ed269f2f0fb224b$var$without(this.files, file);
          this.emit("removedfile", file);
          if (this.files.length === 0) return this.emit("reset");
      }
      // Removes all files that aren't currently processed from the list
      removeAllFiles(cancelIfNecessary) {
          // Create a copy of files since removeFile() changes the @files array.
          if (cancelIfNecessary == null) cancelIfNecessary = false;
          for (let file of this.files.slice())if (file.status !== $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING || cancelIfNecessary) this.removeFile(file);
          return null;
      }
      // Resizes an image before it gets sent to the server. This function is the default behavior of
      // `options.transformFile` if `resizeWidth` or `resizeHeight` are set. The callback is invoked with
      // the resized blob.
      resizeImage(file, width, height, resizeMethod, callback) {
          return this.createThumbnail(file, width, height, resizeMethod, true, (dataUrl, canvas)=>{
              if (canvas == null) // The image has not been resized
              return callback(file);
              else {
                  let { resizeMimeType: resizeMimeType  } = this.options;
                  if (resizeMimeType == null) resizeMimeType = file.type;
                  let resizedDataURL = canvas.toDataURL(resizeMimeType, this.options.resizeQuality);
                  if (resizeMimeType === "image/jpeg" || resizeMimeType === "image/jpg") // Now add the original EXIF information
                  resizedDataURL = $3ed269f2f0fb224b$var$ExifRestore.restore(file.dataURL, resizedDataURL);
                  return callback($3ed269f2f0fb224b$export$2e2bcd8739ae039.dataURItoBlob(resizedDataURL));
              }
          });
      }
      createThumbnail(file, width, height, resizeMethod, fixOrientation, callback) {
          let fileReader = new FileReader();
          fileReader.onload = ()=>{
              file.dataURL = fileReader.result;
              // Don't bother creating a thumbnail for SVG images since they're vector
              if (file.type === "image/svg+xml") {
                  if (callback != null) callback(fileReader.result);
                  return;
              }
              this.createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback);
          };
          fileReader.readAsDataURL(file);
      }
      // `mockFile` needs to have these attributes:
      //
      //     { name: 'name', size: 12345, imageUrl: '' }
      //
      // `callback` will be invoked when the image has been downloaded and displayed.
      // `crossOrigin` will be added to the `img` tag when accessing the file.
      displayExistingFile(mockFile, imageUrl, callback, crossOrigin, resizeThumbnail = true) {
          this.emit("addedfile", mockFile);
          this.emit("complete", mockFile);
          if (!resizeThumbnail) {
              this.emit("thumbnail", mockFile, imageUrl);
              if (callback) callback();
          } else {
              let onDone = (thumbnail)=>{
                  this.emit("thumbnail", mockFile, thumbnail);
                  if (callback) callback();
              };
              mockFile.dataURL = imageUrl;
              this.createThumbnailFromUrl(mockFile, this.options.thumbnailWidth, this.options.thumbnailHeight, this.options.thumbnailMethod, this.options.fixOrientation, onDone, crossOrigin);
          }
      }
      createThumbnailFromUrl(file, width, height, resizeMethod, fixOrientation, callback, crossOrigin) {
          // Not using `new Image` here because of a bug in latest Chrome versions.
          // See https://github.com/enyo/dropzone/pull/226
          let img = document.createElement("img");
          if (crossOrigin) img.crossOrigin = crossOrigin;
          // fixOrientation is not needed anymore with browsers handling imageOrientation
          fixOrientation = getComputedStyle(document.body)["imageOrientation"] == "from-image" ? false : fixOrientation;
          img.onload = ()=>{
              let loadExif = (callback)=>callback(1)
              ;
              if (typeof EXIF !== "undefined" && EXIF !== null && fixOrientation) loadExif = (callback)=>EXIF.getData(img, function() {
                      return callback(EXIF.getTag(this, "Orientation"));
                  })
              ;
              return loadExif((orientation)=>{
                  file.width = img.width;
                  file.height = img.height;
                  let resizeInfo = this.options.resize.call(this, file, width, height, resizeMethod);
                  let canvas = document.createElement("canvas");
                  let ctx = canvas.getContext("2d");
                  canvas.width = resizeInfo.trgWidth;
                  canvas.height = resizeInfo.trgHeight;
                  if (orientation > 4) {
                      canvas.width = resizeInfo.trgHeight;
                      canvas.height = resizeInfo.trgWidth;
                  }
                  switch(orientation){
                      case 2:
                          // horizontal flip
                          ctx.translate(canvas.width, 0);
                          ctx.scale(-1, 1);
                          break;
                      case 3:
                          // 180° rotate left
                          ctx.translate(canvas.width, canvas.height);
                          ctx.rotate(Math.PI);
                          break;
                      case 4:
                          // vertical flip
                          ctx.translate(0, canvas.height);
                          ctx.scale(1, -1);
                          break;
                      case 5:
                          // vertical flip + 90 rotate right
                          ctx.rotate(0.5 * Math.PI);
                          ctx.scale(1, -1);
                          break;
                      case 6:
                          // 90° rotate right
                          ctx.rotate(0.5 * Math.PI);
                          ctx.translate(0, -canvas.width);
                          break;
                      case 7:
                          // horizontal flip + 90 rotate right
                          ctx.rotate(0.5 * Math.PI);
                          ctx.translate(canvas.height, -canvas.width);
                          ctx.scale(-1, 1);
                          break;
                      case 8:
                          // 90° rotate left
                          ctx.rotate(-0.5 * Math.PI);
                          ctx.translate(-canvas.height, 0);
                          break;
                  }
                  // This is a bugfix for iOS' scaling bug.
                  $3ed269f2f0fb224b$var$drawImageIOSFix(ctx, img, resizeInfo.srcX != null ? resizeInfo.srcX : 0, resizeInfo.srcY != null ? resizeInfo.srcY : 0, resizeInfo.srcWidth, resizeInfo.srcHeight, resizeInfo.trgX != null ? resizeInfo.trgX : 0, resizeInfo.trgY != null ? resizeInfo.trgY : 0, resizeInfo.trgWidth, resizeInfo.trgHeight);
                  let thumbnail = canvas.toDataURL("image/png");
                  if (callback != null) return callback(thumbnail, canvas);
              });
          };
          if (callback != null) img.onerror = callback;
          return img.src = file.dataURL;
      }
      // Goes through the queue and processes files if there aren't too many already.
      processQueue() {
          let { parallelUploads: parallelUploads  } = this.options;
          let processingLength = this.getUploadingFiles().length;
          let i = processingLength;
          // There are already at least as many files uploading than should be
          if (processingLength >= parallelUploads) return;
          let queuedFiles = this.getQueuedFiles();
          if (!(queuedFiles.length > 0)) return;
          if (this.options.uploadMultiple) // The files should be uploaded in one request
          return this.processFiles(queuedFiles.slice(0, parallelUploads - processingLength));
          else while(i < parallelUploads){
              if (!queuedFiles.length) return;
               // Nothing left to process
              this.processFile(queuedFiles.shift());
              i++;
          }
      }
      // Wrapper for `processFiles`
      processFile(file) {
          return this.processFiles([
              file
          ]);
      }
      // Loads the file, then calls finishedLoading()
      processFiles(files) {
          for (let file of files){
              file.processing = true; // Backwards compatibility
              file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING;
              this.emit("processing", file);
          }
          if (this.options.uploadMultiple) this.emit("processingmultiple", files);
          return this.uploadFiles(files);
      }
      _getFilesWithXhr(xhr) {
          return this.files.filter((file)=>file.xhr === xhr
          ).map((file)=>file
          );
      }
      // Cancels the file upload and sets the status to CANCELED
      // **if** the file is actually being uploaded.
      // If it's still in the queue, the file is being removed from it and the status
      // set to CANCELED.
      cancelUpload(file) {
          if (file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING) {
              let groupedFiles = this._getFilesWithXhr(file.xhr);
              for (let groupedFile of groupedFiles)groupedFile.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.CANCELED;
              if (typeof file.xhr !== "undefined") file.xhr.abort();
              for (let groupedFile1 of groupedFiles)this.emit("canceled", groupedFile1);
              if (this.options.uploadMultiple) this.emit("canceledmultiple", groupedFiles);
          } else if (file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.ADDED || file.status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED) {
              file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.CANCELED;
              this.emit("canceled", file);
              if (this.options.uploadMultiple) this.emit("canceledmultiple", [
                  file
              ]);
          }
          if (this.options.autoProcessQueue) return this.processQueue();
      }
      resolveOption(option, ...args) {
          if (typeof option === "function") return option.apply(this, args);
          return option;
      }
      uploadFile(file) {
          return this.uploadFiles([
              file
          ]);
      }
      uploadFiles(files) {
          this._transformFiles(files, (transformedFiles)=>{
              if (this.options.chunking) {
                  // Chunking is not allowed to be used with `uploadMultiple` so we know
                  // that there is only __one__file.
                  let transformedFile = transformedFiles[0];
                  files[0].upload.chunked = this.options.chunking && (this.options.forceChunking || transformedFile.size > this.options.chunkSize);
                  files[0].upload.totalChunkCount = Math.ceil(transformedFile.size / this.options.chunkSize);
              }
              if (files[0].upload.chunked) {
                  // This file should be sent in chunks!
                  // If the chunking option is set, we **know** that there can only be **one** file, since
                  // uploadMultiple is not allowed with this option.
                  let file = files[0];
                  let transformedFile = transformedFiles[0];
                  file.upload.chunks = [];
                  let handleNextChunk = ()=>{
                      let chunkIndex = 0;
                      // Find the next item in file.upload.chunks that is not defined yet.
                      while(file.upload.chunks[chunkIndex] !== undefined)chunkIndex++;
                      // This means, that all chunks have already been started.
                      if (chunkIndex >= file.upload.totalChunkCount) return;
                      let start = chunkIndex * this.options.chunkSize;
                      let end = Math.min(start + this.options.chunkSize, transformedFile.size);
                      let dataBlock = {
                          name: this._getParamName(0),
                          data: transformedFile.webkitSlice ? transformedFile.webkitSlice(start, end) : transformedFile.slice(start, end),
                          filename: file.upload.filename,
                          chunkIndex: chunkIndex
                      };
                      file.upload.chunks[chunkIndex] = {
                          file: file,
                          index: chunkIndex,
                          dataBlock: dataBlock,
                          status: $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING,
                          progress: 0,
                          retries: 0
                      };
                      this._uploadData(files, [
                          dataBlock
                      ]);
                  };
                  file.upload.finishedChunkUpload = (chunk, response)=>{
                      let allFinished = true;
                      chunk.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.SUCCESS;
                      // Clear the data from the chunk
                      chunk.dataBlock = null;
                      chunk.response = chunk.xhr.responseText;
                      chunk.responseHeaders = chunk.xhr.getAllResponseHeaders();
                      // Leaving this reference to xhr will cause memory leaks.
                      chunk.xhr = null;
                      for(let i = 0; i < file.upload.totalChunkCount; i++){
                          if (file.upload.chunks[i] === undefined) return handleNextChunk();
                          if (file.upload.chunks[i].status !== $3ed269f2f0fb224b$export$2e2bcd8739ae039.SUCCESS) allFinished = false;
                      }
                      if (allFinished) this.options.chunksUploaded(file, ()=>{
                          this._finished(files, response, null);
                      });
                  };
                  if (this.options.parallelChunkUploads) for(let i = 0; i < file.upload.totalChunkCount; i++)handleNextChunk();
                  else handleNextChunk();
              } else {
                  let dataBlocks = [];
                  for(let i = 0; i < files.length; i++)dataBlocks[i] = {
                      name: this._getParamName(i),
                      data: transformedFiles[i],
                      filename: files[i].upload.filename
                  };
                  this._uploadData(files, dataBlocks);
              }
          });
      }
      /// Returns the right chunk for given file and xhr
      _getChunk(file, xhr) {
          for(let i = 0; i < file.upload.totalChunkCount; i++){
              if (file.upload.chunks[i] !== undefined && file.upload.chunks[i].xhr === xhr) return file.upload.chunks[i];
          }
      }
      // This function actually uploads the file(s) to the server.
      //
      //  If dataBlocks contains the actual data to upload (meaning, that this could
      // either be transformed files, or individual chunks for chunked upload) then
      // they will be used for the actual data to upload.
      _uploadData(files, dataBlocks) {
          let xhr = new XMLHttpRequest();
          // Put the xhr object in the file objects to be able to reference it later.
          for (let file of files)file.xhr = xhr;
          if (files[0].upload.chunked) // Put the xhr object in the right chunk object, so it can be associated
          // later, and found with _getChunk.
          files[0].upload.chunks[dataBlocks[0].chunkIndex].xhr = xhr;
          let method = this.resolveOption(this.options.method, files, dataBlocks);
          let url = this.resolveOption(this.options.url, files, dataBlocks);
          xhr.open(method, url, true);
          // Setting the timeout after open because of IE11 issue: https://gitlab.com/meno/dropzone/issues/8
          let timeout = this.resolveOption(this.options.timeout, files);
          if (timeout) xhr.timeout = this.resolveOption(this.options.timeout, files);
          // Has to be after `.open()`. See https://github.com/enyo/dropzone/issues/179
          xhr.withCredentials = !!this.options.withCredentials;
          xhr.onload = (e)=>{
              this._finishedUploading(files, xhr, e);
          };
          xhr.ontimeout = ()=>{
              this._handleUploadError(files, xhr, `Request timedout after ${this.options.timeout / 1000} seconds`);
          };
          xhr.onerror = ()=>{
              this._handleUploadError(files, xhr);
          };
          // Some browsers do not have the .upload property
          let progressObj = xhr.upload != null ? xhr.upload : xhr;
          progressObj.onprogress = (e)=>this._updateFilesUploadProgress(files, xhr, e)
          ;
          let headers = this.options.defaultHeaders ? {
              Accept: "application/json",
              "Cache-Control": "no-cache",
              "X-Requested-With": "XMLHttpRequest"
          } : {
          };
          if (this.options.binaryBody) headers["Content-Type"] = files[0].type;
          if (this.options.headers) objectExtend(headers, this.options.headers);
          for(let headerName in headers){
              let headerValue = headers[headerName];
              if (headerValue) xhr.setRequestHeader(headerName, headerValue);
          }
          if (this.options.binaryBody) {
              // Since the file is going to be sent as binary body, it doesn't make
              // any sense to generate `FormData` for it.
              for (let file of files)this.emit("sending", file, xhr);
              if (this.options.uploadMultiple) this.emit("sendingmultiple", files, xhr);
              this.submitRequest(xhr, null, files);
          } else {
              let formData = new FormData();
              // Adding all @options parameters
              if (this.options.params) {
                  let additionalParams = this.options.params;
                  if (typeof additionalParams === "function") additionalParams = additionalParams.call(this, files, xhr, files[0].upload.chunked ? this._getChunk(files[0], xhr) : null);
                  for(let key in additionalParams){
                      let value = additionalParams[key];
                      if (Array.isArray(value)) // The additional parameter contains an array,
                      // so lets iterate over it to attach each value
                      // individually.
                      for(let i = 0; i < value.length; i++)formData.append(key, value[i]);
                      else formData.append(key, value);
                  }
              }
              // Let the user add additional data if necessary
              for (let file of files)this.emit("sending", file, xhr, formData);
              if (this.options.uploadMultiple) this.emit("sendingmultiple", files, xhr, formData);
              this._addFormElementData(formData);
              // Finally add the files
              // Has to be last because some servers (eg: S3) expect the file to be the last parameter
              for(let i = 0; i < dataBlocks.length; i++){
                  let dataBlock = dataBlocks[i];
                  formData.append(dataBlock.name, dataBlock.data, dataBlock.filename);
              }
              this.submitRequest(xhr, formData, files);
          }
      }
      // Transforms all files with this.options.transformFile and invokes done with the transformed files when done.
      _transformFiles(files, done) {
          let transformedFiles = [];
          // Clumsy way of handling asynchronous calls, until I get to add a proper Future library.
          let doneCounter = 0;
          for(let i = 0; i < files.length; i++)this.options.transformFile.call(this, files[i], (transformedFile)=>{
              transformedFiles[i] = transformedFile;
              if (++doneCounter === files.length) done(transformedFiles);
          });
      }
      // Takes care of adding other input elements of the form to the AJAX request
      _addFormElementData(formData) {
          // Take care of other input elements
          if (this.element.tagName === "FORM") for (let input of this.element.querySelectorAll("input, textarea, select, button")){
              let inputName = input.getAttribute("name");
              let inputType = input.getAttribute("type");
              if (inputType) inputType = inputType.toLowerCase();
              // If the input doesn't have a name, we can't use it.
              if (typeof inputName === "undefined" || inputName === null) continue;
              if (input.tagName === "SELECT" && input.hasAttribute("multiple")) {
                  // Possibly multiple values
                  for (let option of input.options)if (option.selected) formData.append(inputName, option.value);
              } else if (!inputType || inputType !== "checkbox" && inputType !== "radio" || input.checked) formData.append(inputName, input.value);
          }
      }
      // Invoked when there is new progress information about given files.
      // If e is not provided, it is assumed that the upload is finished.
      _updateFilesUploadProgress(files, xhr, e) {
          if (!files[0].upload.chunked) // Handle file uploads without chunking
          for (let file of files){
              if (file.upload.total && file.upload.bytesSent && file.upload.bytesSent == file.upload.total) continue;
              if (e) {
                  file.upload.progress = 100 * e.loaded / e.total;
                  file.upload.total = e.total;
                  file.upload.bytesSent = e.loaded;
              } else {
                  // No event, so we're at 100%
                  file.upload.progress = 100;
                  file.upload.bytesSent = file.upload.total;
              }
              this.emit("uploadprogress", file, file.upload.progress, file.upload.bytesSent);
          }
          else {
              // Handle chunked file uploads
              // Chunked upload is not compatible with uploading multiple files in one
              // request, so we know there's only one file.
              let file = files[0];
              // Since this is a chunked upload, we need to update the appropriate chunk
              // progress.
              let chunk = this._getChunk(file, xhr);
              if (e) {
                  chunk.progress = 100 * e.loaded / e.total;
                  chunk.total = e.total;
                  chunk.bytesSent = e.loaded;
              } else {
                  // No event, so we're at 100%
                  chunk.progress = 100;
                  chunk.bytesSent = chunk.total;
              }
              // Now tally the *file* upload progress from its individual chunks
              file.upload.progress = 0;
              file.upload.total = 0;
              file.upload.bytesSent = 0;
              for(let i = 0; i < file.upload.totalChunkCount; i++)if (file.upload.chunks[i] && typeof file.upload.chunks[i].progress !== "undefined") {
                  file.upload.progress += file.upload.chunks[i].progress;
                  file.upload.total += file.upload.chunks[i].total;
                  file.upload.bytesSent += file.upload.chunks[i].bytesSent;
              }
              // Since the process is a percentage, we need to divide by the amount of
              // chunks we've used.
              file.upload.progress = file.upload.progress / file.upload.totalChunkCount;
              this.emit("uploadprogress", file, file.upload.progress, file.upload.bytesSent);
          }
      }
      _finishedUploading(files, xhr, e) {
          let response;
          if (files[0].status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.CANCELED) return;
          if (xhr.readyState !== 4) return;
          if (xhr.responseType !== "arraybuffer" && xhr.responseType !== "blob") {
              response = xhr.responseText;
              if (xhr.getResponseHeader("content-type") && ~xhr.getResponseHeader("content-type").indexOf("application/json")) try {
                  response = JSON.parse(response);
              } catch (error) {
                  e = error;
                  response = "Invalid JSON response from server.";
              }
          }
          this._updateFilesUploadProgress(files, xhr);
          if (!(200 <= xhr.status && xhr.status < 300)) this._handleUploadError(files, xhr, response);
          else if (files[0].upload.chunked) files[0].upload.finishedChunkUpload(this._getChunk(files[0], xhr), response);
          else this._finished(files, response, e);
      }
      _handleUploadError(files, xhr, response) {
          if (files[0].status === $3ed269f2f0fb224b$export$2e2bcd8739ae039.CANCELED) return;
          if (files[0].upload.chunked && this.options.retryChunks) {
              let chunk = this._getChunk(files[0], xhr);
              if ((chunk.retries++) < this.options.retryChunksLimit) {
                  this._uploadData(files, [
                      chunk.dataBlock
                  ]);
                  return;
              } else console.warn("Retried this chunk too often. Giving up.");
          }
          this._errorProcessing(files, response || this.options.dictResponseError.replace("{{statusCode}}", xhr.status), xhr);
      }
      submitRequest(xhr, formData, files) {
          if (xhr.readyState != 1) {
              console.warn("Cannot send this request because the XMLHttpRequest.readyState is not OPENED.");
              return;
          }
          if (this.options.binaryBody) {
              if (files[0].upload.chunked) {
                  const chunk = this._getChunk(files[0], xhr);
                  xhr.send(chunk.dataBlock.data);
              } else xhr.send(files[0]);
          } else xhr.send(formData);
      }
      // Called internally when processing is finished.
      // Individual callbacks have to be called in the appropriate sections.
      _finished(files, responseText, e) {
          for (let file of files){
              file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.SUCCESS;
              this.emit("success", file, responseText, e);
              this.emit("complete", file);
          }
          if (this.options.uploadMultiple) {
              this.emit("successmultiple", files, responseText, e);
              this.emit("completemultiple", files);
          }
          if (this.options.autoProcessQueue) return this.processQueue();
      }
      // Called internally when processing is finished.
      // Individual callbacks have to be called in the appropriate sections.
      _errorProcessing(files, message, xhr) {
          for (let file of files){
              file.status = $3ed269f2f0fb224b$export$2e2bcd8739ae039.ERROR;
              this.emit("error", file, message, xhr);
              this.emit("complete", file);
          }
          if (this.options.uploadMultiple) {
              this.emit("errormultiple", files, message, xhr);
              this.emit("completemultiple", files);
          }
          if (this.options.autoProcessQueue) return this.processQueue();
      }
      static uuidv4() {
          return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function(c) {
              let r = Math.random() * 16 | 0, v = c === "x" ? r : r & 3 | 8;
              return v.toString(16);
          });
      }
      constructor(el, options){
          super();
          let fallback, left;
          this.element = el;
          this.clickableElements = [];
          this.listeners = [];
          this.files = []; // All files
          if (typeof this.element === "string") this.element = document.querySelector(this.element);
          // Not checking if instance of HTMLElement or Element since IE9 is extremely weird.
          if (!this.element || this.element.nodeType == null) throw new Error("Invalid dropzone element.");
          if (this.element.dropzone) throw new Error("Dropzone already attached.");
          // Now add this dropzone to the instances.
          $3ed269f2f0fb224b$export$2e2bcd8739ae039.instances.push(this);
          // Put the dropzone inside the element itself.
          this.element.dropzone = this;
          let elementOptions = (left = $3ed269f2f0fb224b$export$2e2bcd8739ae039.optionsForElement(this.element)) != null ? left : {
          };
          this.options = objectExtend(true, {
          }, $4ca367182776f80b$export$2e2bcd8739ae039, elementOptions, options != null ? options : {
          });
          this.options.previewTemplate = this.options.previewTemplate.replace(/\n*/g, "");
          // If the browser failed, just call the fallback and leave
          if (this.options.forceFallback || !$3ed269f2f0fb224b$export$2e2bcd8739ae039.isBrowserSupported()) return this.options.fallback.call(this);
          // @options.url = @element.getAttribute "action" unless @options.url?
          if (this.options.url == null) this.options.url = this.element.getAttribute("action");
          if (!this.options.url) throw new Error("No URL provided.");
          if (this.options.acceptedFiles && this.options.acceptedMimeTypes) throw new Error("You can't provide both 'acceptedFiles' and 'acceptedMimeTypes'. 'acceptedMimeTypes' is deprecated.");
          if (this.options.uploadMultiple && this.options.chunking) throw new Error("You cannot set both: uploadMultiple and chunking.");
          if (this.options.binaryBody && this.options.uploadMultiple) throw new Error("You cannot set both: binaryBody and uploadMultiple.");
          // Backwards compatibility
          if (this.options.acceptedMimeTypes) {
              this.options.acceptedFiles = this.options.acceptedMimeTypes;
              delete this.options.acceptedMimeTypes;
          }
          // Backwards compatibility
          if (this.options.renameFilename != null) this.options.renameFile = (file)=>this.options.renameFilename.call(this, file.name, file)
          ;
          if (typeof this.options.method === "string") this.options.method = this.options.method.toUpperCase();
          if ((fallback = this.getExistingFallback()) && fallback.parentNode) // Remove the fallback
          fallback.parentNode.removeChild(fallback);
          // Display previews in the previewsContainer element or the Dropzone element unless explicitly set to false
          if (this.options.previewsContainer !== false) {
              if (this.options.previewsContainer) this.previewsContainer = $3ed269f2f0fb224b$export$2e2bcd8739ae039.getElement(this.options.previewsContainer, "previewsContainer");
              else this.previewsContainer = this.element;
          }
          if (this.options.clickable) {
              if (this.options.clickable === true) this.clickableElements = [
                  this.element
              ];
              else this.clickableElements = $3ed269f2f0fb224b$export$2e2bcd8739ae039.getElements(this.options.clickable, "clickable");
          }
          this.init();
      }
  }
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.initClass();
  // This is a map of options for your different dropzones. Add configurations
  // to this object for your different dropzone elemens.
  //
  // Example:
  //
  //     Dropzone.options.myDropzoneElementId = { maxFilesize: 1 };
  //
  // And in html:
  //
  //     <form action="/upload" id="my-dropzone-element-id" class="dropzone"></form>
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.options = {
  };
  // Returns the options for an element or undefined if none available.
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.optionsForElement = function(element) {
      // Get the `Dropzone.options.elementId` for this element if it exists
      if (element.getAttribute("id")) return $3ed269f2f0fb224b$export$2e2bcd8739ae039.options[$3ed269f2f0fb224b$var$camelize(element.getAttribute("id"))];
      else return undefined;
  };
  // Holds a list of all dropzone instances
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.instances = [];
  // Returns the dropzone for given element if any
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.forElement = function(element) {
      if (typeof element === "string") element = document.querySelector(element);
      if ((element != null ? element.dropzone : undefined) == null) throw new Error("No Dropzone found for given element. This is probably because you're trying to access it before Dropzone had the time to initialize. Use the `init` option to setup any additional observers on your Dropzone.");
      return element.dropzone;
  };
  // Looks for all .dropzone elements and creates a dropzone for them
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.discover = function() {
      let dropzones;
      if (document.querySelectorAll) dropzones = document.querySelectorAll(".dropzone");
      else {
          dropzones = [];
          // IE :(
          let checkElements = (elements)=>(()=>{
                  let result = [];
                  for (let el of elements)if (/(^| )dropzone($| )/.test(el.className)) result.push(dropzones.push(el));
                  else result.push(undefined);
                  return result;
              })()
          ;
          checkElements(document.getElementsByTagName("div"));
          checkElements(document.getElementsByTagName("form"));
      }
      return (()=>{
          let result = [];
          for (let dropzone of dropzones)// Create a dropzone unless auto discover has been disabled for specific element
          if ($3ed269f2f0fb224b$export$2e2bcd8739ae039.optionsForElement(dropzone) !== false) result.push(new $3ed269f2f0fb224b$export$2e2bcd8739ae039(dropzone));
          else result.push(undefined);
          return result;
      })();
  };
  // Some browsers support drag and drog functionality, but not correctly.
  //
  // So I created a blocklist of userAgents. Yes, yes. Browser sniffing, I know.
  // But what to do when browsers *theoretically* support an API, but crash
  // when using it.
  //
  // This is a list of regular expressions tested against navigator.userAgent
  //
  // ** It should only be used on browser that *do* support the API, but
  // incorrectly **
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.blockedBrowsers = [
      // The mac os and windows phone version of opera 12 seems to have a problem with the File drag'n'drop API.
      /opera.*(Macintosh|Windows Phone).*version\/12/i, 
  ];
  // Checks if the browser is supported
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.isBrowserSupported = function() {
      let capableBrowser = true;
      if (window.File && window.FileReader && window.FileList && window.Blob && window.FormData && document.querySelector) {
          if (!("classList" in document.createElement("a"))) capableBrowser = false;
          else {
              if ($3ed269f2f0fb224b$export$2e2bcd8739ae039.blacklistedBrowsers !== undefined) // Since this has been renamed, this makes sure we don't break older
              // configuration.
              $3ed269f2f0fb224b$export$2e2bcd8739ae039.blockedBrowsers = $3ed269f2f0fb224b$export$2e2bcd8739ae039.blacklistedBrowsers;
              // The browser supports the API, but may be blocked.
              for (let regex of $3ed269f2f0fb224b$export$2e2bcd8739ae039.blockedBrowsers)if (regex.test(navigator.userAgent)) {
                  capableBrowser = false;
                  continue;
              }
          }
      } else capableBrowser = false;
      return capableBrowser;
  };
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.dataURItoBlob = function(dataURI) {
      // convert base64 to raw binary data held in a string
      // doesn't handle URLEncoded DataURIs - see SO answer #6850276 for code that does this
      let byteString = atob(dataURI.split(",")[1]);
      // separate out the mime component
      let mimeString = dataURI.split(",")[0].split(":")[1].split(";")[0];
      // write the bytes of the string to an ArrayBuffer
      let ab = new ArrayBuffer(byteString.length);
      let ia = new Uint8Array(ab);
      for(let i = 0, end = byteString.length, asc = 0 <= end; asc ? i <= end : i >= end; asc ? i++ : i--)ia[i] = byteString.charCodeAt(i);
      // write the ArrayBuffer to a blob
      return new Blob([
          ab
      ], {
          type: mimeString
      });
  };
  // Returns an array without the rejected item
  const $3ed269f2f0fb224b$var$without = (list, rejectedItem)=>list.filter((item)=>item !== rejectedItem
      ).map((item)=>item
      )
  ;
  // abc-def_ghi -> abcDefGhi
  const $3ed269f2f0fb224b$var$camelize = (str)=>str.replace(/[\-_](\w)/g, (match)=>match.charAt(1).toUpperCase()
      )
  ;
  // Creates an element from string
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.createElement = function(string) {
      let div = document.createElement("div");
      div.innerHTML = string;
      return div.childNodes[0];
  };
  // Tests if given element is inside (or simply is) the container
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.elementInside = function(element, container) {
      if (element === container) return true;
       // Coffeescript doesn't support do/while loops
      while(element = element.parentNode){
          if (element === container) return true;
      }
      return false;
  };
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.getElement = function(el, name) {
      let element;
      if (typeof el === "string") element = document.querySelector(el);
      else if (el.nodeType != null) element = el;
      if (element == null) throw new Error(`Invalid \`${name}\` option provided. Please provide a CSS selector or a plain HTML element.`);
      return element;
  };
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.getElements = function(els, name) {
      let el, elements;
      if (els instanceof Array) {
          elements = [];
          try {
              for (el of els)elements.push(this.getElement(el, name));
          } catch (e) {
              elements = null;
          }
      } else if (typeof els === "string") {
          elements = [];
          for (el of document.querySelectorAll(els))elements.push(el);
      } else if (els.nodeType != null) elements = [
          els
      ];
      if (elements == null || !elements.length) throw new Error(`Invalid \`${name}\` option provided. Please provide a CSS selector, a plain HTML element or a list of those.`);
      return elements;
  };
  // Asks the user the question and calls accepted or rejected accordingly
  //
  // The default implementation just uses `window.confirm` and then calls the
  // appropriate callback.
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.confirm = function(question, accepted, rejected) {
      if (window.confirm(question)) return accepted();
      else if (rejected != null) return rejected();
  };
  // Validates the mime type like this:
  //
  // https://developer.mozilla.org/en-US/docs/HTML/Element/input#attr-accept
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.isValidFile = function(file, acceptedFiles) {
      if (!acceptedFiles) return true;
       // If there are no accepted mime types, it's OK
      acceptedFiles = acceptedFiles.split(",");
      let mimeType = file.type;
      let baseMimeType = mimeType.replace(/\/.*$/, "");
      for (let validType of acceptedFiles){
          validType = validType.trim();
          if (validType.charAt(0) === ".") {
              if (file.name.toLowerCase().indexOf(validType.toLowerCase(), file.name.length - validType.length) !== -1) return true;
          } else if (/\/\*$/.test(validType)) {
              // This is something like a image/* mime type
              if (baseMimeType === validType.replace(/\/.*$/, "")) return true;
          } else {
              if (mimeType === validType) return true;
          }
      }
      return false;
  };
  // Augment jQuery
  if (typeof jQuery !== "undefined" && jQuery !== null) jQuery.fn.dropzone = function(options) {
      return this.each(function() {
          return new $3ed269f2f0fb224b$export$2e2bcd8739ae039(this, options);
      });
  };
  // Dropzone file status codes
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.ADDED = "added";
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED = "queued";
  // For backwards compatibility. Now, if a file is accepted, it's either queued
  // or uploading.
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.ACCEPTED = $3ed269f2f0fb224b$export$2e2bcd8739ae039.QUEUED;
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING = "uploading";
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.PROCESSING = $3ed269f2f0fb224b$export$2e2bcd8739ae039.UPLOADING; // alias
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.CANCELED = "canceled";
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.ERROR = "error";
  $3ed269f2f0fb224b$export$2e2bcd8739ae039.SUCCESS = "success";
  /*

   Bugfix for iOS 6 and 7
   Source: http://stackoverflow.com/questions/11929099/html5-canvas-drawimage-ratio-bug-ios
   based on the work of https://github.com/stomita/ios-imagefile-megapixel

   */ // Detecting vertical squash in loaded image.
  // Fixes a bug which squash image vertically while drawing into canvas for some images.
  // This is a bug in iOS6 devices. This function from https://github.com/stomita/ios-imagefile-megapixel
  let $3ed269f2f0fb224b$var$detectVerticalSquash = function(img) {
      img.naturalWidth;
      let ih = img.naturalHeight;
      let canvas = document.createElement("canvas");
      canvas.width = 1;
      canvas.height = ih;
      let ctx = canvas.getContext("2d");
      ctx.drawImage(img, 0, 0);
      let { data: data  } = ctx.getImageData(1, 0, 1, ih);
      // search image edge pixel position in case it is squashed vertically.
      let sy = 0;
      let ey = ih;
      let py = ih;
      while(py > sy){
          let alpha = data[(py - 1) * 4 + 3];
          if (alpha === 0) ey = py;
          else sy = py;
          py = ey + sy >> 1;
      }
      let ratio = py / ih;
      if (ratio === 0) return 1;
      else return ratio;
  };
  // A replacement for context.drawImage
  // (args are for source and destination).
  var $3ed269f2f0fb224b$var$drawImageIOSFix = function(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
      let vertSquashRatio = $3ed269f2f0fb224b$var$detectVerticalSquash(img);
      return ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
  };
  // Based on MinifyJpeg
  // Source: http://www.perry.cz/files/ExifRestorer.js
  // http://elicon.blog57.fc2.com/blog-entry-206.html
  class $3ed269f2f0fb224b$var$ExifRestore {
      static initClass() {
          this.KEY_STR = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      }
      static encode64(input) {
          let output = "";
          let chr1 = undefined;
          let chr2 = undefined;
          let chr3 = "";
          let enc1 = undefined;
          let enc2 = undefined;
          let enc3 = undefined;
          let enc4 = "";
          let i = 0;
          while(true){
              chr1 = input[i++];
              chr2 = input[i++];
              chr3 = input[i++];
              enc1 = chr1 >> 2;
              enc2 = (chr1 & 3) << 4 | chr2 >> 4;
              enc3 = (chr2 & 15) << 2 | chr3 >> 6;
              enc4 = chr3 & 63;
              if (isNaN(chr2)) enc3 = enc4 = 64;
              else if (isNaN(chr3)) enc4 = 64;
              output = output + this.KEY_STR.charAt(enc1) + this.KEY_STR.charAt(enc2) + this.KEY_STR.charAt(enc3) + this.KEY_STR.charAt(enc4);
              chr1 = chr2 = chr3 = "";
              enc1 = enc2 = enc3 = enc4 = "";
              if (!(i < input.length)) break;
          }
          return output;
      }
      static restore(origFileBase64, resizedFileBase64) {
          if (!origFileBase64.match("data:image/jpeg;base64,")) return resizedFileBase64;
          let rawImage = this.decode64(origFileBase64.replace("data:image/jpeg;base64,", ""));
          let segments = this.slice2Segments(rawImage);
          let image = this.exifManipulation(resizedFileBase64, segments);
          return `data:image/jpeg;base64,${this.encode64(image)}`;
      }
      static exifManipulation(resizedFileBase64, segments) {
          let exifArray = this.getExifArray(segments);
          let newImageArray = this.insertExif(resizedFileBase64, exifArray);
          let aBuffer = new Uint8Array(newImageArray);
          return aBuffer;
      }
      static getExifArray(segments) {
          let seg = undefined;
          let x = 0;
          while(x < segments.length){
              seg = segments[x];
              if (seg[0] === 255 & seg[1] === 225) return seg;
              x++;
          }
          return [];
      }
      static insertExif(resizedFileBase64, exifArray) {
          let imageData = resizedFileBase64.replace("data:image/jpeg;base64,", "");
          let buf = this.decode64(imageData);
          let separatePoint = buf.indexOf(255, 3);
          let mae = buf.slice(0, separatePoint);
          let ato = buf.slice(separatePoint);
          let array = mae;
          array = array.concat(exifArray);
          array = array.concat(ato);
          return array;
      }
      static slice2Segments(rawImageArray) {
          let head = 0;
          let segments = [];
          while(true){
              var length;
              if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 218) break;
              if (rawImageArray[head] === 255 & rawImageArray[head + 1] === 216) head += 2;
              else {
                  length = rawImageArray[head + 2] * 256 + rawImageArray[head + 3];
                  let endPoint = head + length + 2;
                  let seg = rawImageArray.slice(head, endPoint);
                  segments.push(seg);
                  head = endPoint;
              }
              if (head > rawImageArray.length) break;
          }
          return segments;
      }
      static decode64(input) {
          let chr1 = undefined;
          let chr2 = undefined;
          let chr3 = "";
          let enc1 = undefined;
          let enc2 = undefined;
          let enc3 = undefined;
          let enc4 = "";
          let i = 0;
          let buf = [];
          // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
          let base64test = /[^A-Za-z0-9\+\/\=]/g;
          if (base64test.exec(input)) console.warn("There were invalid base64 characters in the input text.\nValid base64 characters are A-Z, a-z, 0-9, '+', '/',and '='\nExpect errors in decoding.");
          input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
          while(true){
              enc1 = this.KEY_STR.indexOf(input.charAt(i++));
              enc2 = this.KEY_STR.indexOf(input.charAt(i++));
              enc3 = this.KEY_STR.indexOf(input.charAt(i++));
              enc4 = this.KEY_STR.indexOf(input.charAt(i++));
              chr1 = enc1 << 2 | enc2 >> 4;
              chr2 = (enc2 & 15) << 4 | enc3 >> 2;
              chr3 = (enc3 & 3) << 6 | enc4;
              buf.push(chr1);
              if (enc3 !== 64) buf.push(chr2);
              if (enc4 !== 64) buf.push(chr3);
              chr1 = chr2 = chr3 = "";
              enc1 = enc2 = enc3 = enc4 = "";
              if (!(i < input.length)) break;
          }
          return buf;
      }
  }
  $3ed269f2f0fb224b$var$ExifRestore.initClass();
  function $3ed269f2f0fb224b$var$__guard__(value, transform) {
      return typeof value !== "undefined" && value !== null ? transform(value) : undefined;
  }
  function $3ed269f2f0fb224b$var$__guardMethod__(obj, methodName, transform) {
      if (typeof obj !== "undefined" && obj !== null && typeof obj[methodName] === "function") return transform(obj, methodName);
      else return undefined;
  }

  if (document.querySelector('div.form__dropzone')) {
    new $3ed269f2f0fb224b$export$2e2bcd8739ae039("div.form__dropzone", {
      url: "/file/post",
      createImageThumbnails: false,
      dictDefaultMessage: 'Here'
    });
  }

  const HOOKS = [
      "onChange",
      "onClose",
      "onDayCreate",
      "onDestroy",
      "onKeyDown",
      "onMonthChange",
      "onOpen",
      "onParseConfig",
      "onReady",
      "onValueUpdate",
      "onYearChange",
      "onPreCalendarPosition",
  ];
  const defaults = {
      _disable: [],
      allowInput: false,
      allowInvalidPreload: false,
      altFormat: "F j, Y",
      altInput: false,
      altInputClass: "form-control input",
      animate: typeof window === "object" &&
          window.navigator.userAgent.indexOf("MSIE") === -1,
      ariaDateFormat: "F j, Y",
      autoFillDefaultTime: true,
      clickOpens: true,
      closeOnSelect: true,
      conjunction: ", ",
      dateFormat: "Y-m-d",
      defaultHour: 12,
      defaultMinute: 0,
      defaultSeconds: 0,
      disable: [],
      disableMobile: false,
      enableSeconds: false,
      enableTime: false,
      errorHandler: (err) => typeof console !== "undefined" && console.warn(err),
      getWeek: (givenDate) => {
          const date = new Date(givenDate.getTime());
          date.setHours(0, 0, 0, 0);
          date.setDate(date.getDate() + 3 - ((date.getDay() + 6) % 7));
          var week1 = new Date(date.getFullYear(), 0, 4);
          return (1 +
              Math.round(((date.getTime() - week1.getTime()) / 86400000 -
                  3 +
                  ((week1.getDay() + 6) % 7)) /
                  7));
      },
      hourIncrement: 1,
      ignoredFocusElements: [],
      inline: false,
      locale: "default",
      minuteIncrement: 5,
      mode: "single",
      monthSelectorType: "dropdown",
      nextArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M13.207 8.472l-7.854 7.854-0.707-0.707 7.146-7.146-7.146-7.148 0.707-0.707 7.854 7.854z' /></svg>",
      noCalendar: false,
      now: new Date(),
      onChange: [],
      onClose: [],
      onDayCreate: [],
      onDestroy: [],
      onKeyDown: [],
      onMonthChange: [],
      onOpen: [],
      onParseConfig: [],
      onReady: [],
      onValueUpdate: [],
      onYearChange: [],
      onPreCalendarPosition: [],
      plugins: [],
      position: "auto",
      positionElement: undefined,
      prevArrow: "<svg version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' viewBox='0 0 17 17'><g></g><path d='M5.207 8.471l7.146 7.147-0.707 0.707-7.853-7.854 7.854-7.853 0.707 0.707-7.147 7.146z' /></svg>",
      shorthandCurrentMonth: false,
      showMonths: 1,
      static: false,
      time_24hr: false,
      weekNumbers: false,
      wrap: false,
  };

  const english = {
      weekdays: {
          shorthand: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
          longhand: [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday",
          ],
      },
      months: {
          shorthand: [
              "Jan",
              "Feb",
              "Mar",
              "Apr",
              "May",
              "Jun",
              "Jul",
              "Aug",
              "Sep",
              "Oct",
              "Nov",
              "Dec",
          ],
          longhand: [
              "January",
              "February",
              "March",
              "April",
              "May",
              "June",
              "July",
              "August",
              "September",
              "October",
              "November",
              "December",
          ],
      },
      daysInMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31],
      firstDayOfWeek: 0,
      ordinal: (nth) => {
          const s = nth % 100;
          if (s > 3 && s < 21)
              return "th";
          switch (s % 10) {
              case 1:
                  return "st";
              case 2:
                  return "nd";
              case 3:
                  return "rd";
              default:
                  return "th";
          }
      },
      rangeSeparator: " to ",
      weekAbbreviation: "Wk",
      scrollTitle: "Scroll to increment",
      toggleTitle: "Click to toggle",
      amPM: ["AM", "PM"],
      yearAriaLabel: "Year",
      monthAriaLabel: "Month",
      hourAriaLabel: "Hour",
      minuteAriaLabel: "Minute",
      time_24hr: false,
  };

  const pad = (number, length = 2) => `000${number}`.slice(length * -1);
  const int = (bool) => (bool === true ? 1 : 0);
  function debounce(fn, wait) {
      let t;
      return function () {
          clearTimeout(t);
          t = setTimeout(() => fn.apply(this, arguments), wait);
      };
  }
  const arrayify = (obj) => obj instanceof Array ? obj : [obj];

  function toggleClass(elem, className, bool) {
      if (bool === true)
          return elem.classList.add(className);
      elem.classList.remove(className);
  }
  function createElement(tag, className, content) {
      const e = window.document.createElement(tag);
      className = className || "";
      content = content || "";
      e.className = className;
      if (content !== undefined)
          e.textContent = content;
      return e;
  }
  function clearNode(node) {
      while (node.firstChild)
          node.removeChild(node.firstChild);
  }
  function findParent(node, condition) {
      if (condition(node))
          return node;
      else if (node.parentNode)
          return findParent(node.parentNode, condition);
      return undefined;
  }
  function createNumberInput(inputClassName, opts) {
      const wrapper = createElement("div", "numInputWrapper"), numInput = createElement("input", "numInput " + inputClassName), arrowUp = createElement("span", "arrowUp"), arrowDown = createElement("span", "arrowDown");
      if (navigator.userAgent.indexOf("MSIE 9.0") === -1) {
          numInput.type = "number";
      }
      else {
          numInput.type = "text";
          numInput.pattern = "\\d*";
      }
      if (opts !== undefined)
          for (const key in opts)
              numInput.setAttribute(key, opts[key]);
      wrapper.appendChild(numInput);
      wrapper.appendChild(arrowUp);
      wrapper.appendChild(arrowDown);
      return wrapper;
  }
  function getEventTarget(event) {
      try {
          if (typeof event.composedPath === "function") {
              const path = event.composedPath();
              return path[0];
          }
          return event.target;
      }
      catch (error) {
          return event.target;
      }
  }

  const doNothing = () => undefined;
  const monthToStr = (monthNumber, shorthand, locale) => locale.months[shorthand ? "shorthand" : "longhand"][monthNumber];
  const revFormat = {
      D: doNothing,
      F: function (dateObj, monthName, locale) {
          dateObj.setMonth(locale.months.longhand.indexOf(monthName));
      },
      G: (dateObj, hour) => {
          dateObj.setHours(parseFloat(hour));
      },
      H: (dateObj, hour) => {
          dateObj.setHours(parseFloat(hour));
      },
      J: (dateObj, day) => {
          dateObj.setDate(parseFloat(day));
      },
      K: (dateObj, amPM, locale) => {
          dateObj.setHours((dateObj.getHours() % 12) +
              12 * int(new RegExp(locale.amPM[1], "i").test(amPM)));
      },
      M: function (dateObj, shortMonth, locale) {
          dateObj.setMonth(locale.months.shorthand.indexOf(shortMonth));
      },
      S: (dateObj, seconds) => {
          dateObj.setSeconds(parseFloat(seconds));
      },
      U: (_, unixSeconds) => new Date(parseFloat(unixSeconds) * 1000),
      W: function (dateObj, weekNum, locale) {
          const weekNumber = parseInt(weekNum);
          const date = new Date(dateObj.getFullYear(), 0, 2 + (weekNumber - 1) * 7, 0, 0, 0, 0);
          date.setDate(date.getDate() - date.getDay() + locale.firstDayOfWeek);
          return date;
      },
      Y: (dateObj, year) => {
          dateObj.setFullYear(parseFloat(year));
      },
      Z: (_, ISODate) => new Date(ISODate),
      d: (dateObj, day) => {
          dateObj.setDate(parseFloat(day));
      },
      h: (dateObj, hour) => {
          dateObj.setHours(parseFloat(hour));
      },
      i: (dateObj, minutes) => {
          dateObj.setMinutes(parseFloat(minutes));
      },
      j: (dateObj, day) => {
          dateObj.setDate(parseFloat(day));
      },
      l: doNothing,
      m: (dateObj, month) => {
          dateObj.setMonth(parseFloat(month) - 1);
      },
      n: (dateObj, month) => {
          dateObj.setMonth(parseFloat(month) - 1);
      },
      s: (dateObj, seconds) => {
          dateObj.setSeconds(parseFloat(seconds));
      },
      u: (_, unixMillSeconds) => new Date(parseFloat(unixMillSeconds)),
      w: doNothing,
      y: (dateObj, year) => {
          dateObj.setFullYear(2000 + parseFloat(year));
      },
  };
  const tokenRegex = {
      D: "(\\w+)",
      F: "(\\w+)",
      G: "(\\d\\d|\\d)",
      H: "(\\d\\d|\\d)",
      J: "(\\d\\d|\\d)\\w+",
      K: "",
      M: "(\\w+)",
      S: "(\\d\\d|\\d)",
      U: "(.+)",
      W: "(\\d\\d|\\d)",
      Y: "(\\d{4})",
      Z: "(.+)",
      d: "(\\d\\d|\\d)",
      h: "(\\d\\d|\\d)",
      i: "(\\d\\d|\\d)",
      j: "(\\d\\d|\\d)",
      l: "(\\w+)",
      m: "(\\d\\d|\\d)",
      n: "(\\d\\d|\\d)",
      s: "(\\d\\d|\\d)",
      u: "(.+)",
      w: "(\\d\\d|\\d)",
      y: "(\\d{2})",
  };
  const formats = {
      Z: (date) => date.toISOString(),
      D: function (date, locale, options) {
          return locale.weekdays.shorthand[formats.w(date, locale, options)];
      },
      F: function (date, locale, options) {
          return monthToStr(formats.n(date, locale, options) - 1, false, locale);
      },
      G: function (date, locale, options) {
          return pad(formats.h(date, locale, options));
      },
      H: (date) => pad(date.getHours()),
      J: function (date, locale) {
          return locale.ordinal !== undefined
              ? date.getDate() + locale.ordinal(date.getDate())
              : date.getDate();
      },
      K: (date, locale) => locale.amPM[int(date.getHours() > 11)],
      M: function (date, locale) {
          return monthToStr(date.getMonth(), true, locale);
      },
      S: (date) => pad(date.getSeconds()),
      U: (date) => date.getTime() / 1000,
      W: function (date, _, options) {
          return options.getWeek(date);
      },
      Y: (date) => pad(date.getFullYear(), 4),
      d: (date) => pad(date.getDate()),
      h: (date) => (date.getHours() % 12 ? date.getHours() % 12 : 12),
      i: (date) => pad(date.getMinutes()),
      j: (date) => date.getDate(),
      l: function (date, locale) {
          return locale.weekdays.longhand[date.getDay()];
      },
      m: (date) => pad(date.getMonth() + 1),
      n: (date) => date.getMonth() + 1,
      s: (date) => date.getSeconds(),
      u: (date) => date.getTime(),
      w: (date) => date.getDay(),
      y: (date) => String(date.getFullYear()).substring(2),
  };

  const createDateFormatter = ({ config = defaults, l10n = english, isMobile = false, }) => (dateObj, frmt, overrideLocale) => {
      const locale = overrideLocale || l10n;
      if (config.formatDate !== undefined && !isMobile) {
          return config.formatDate(dateObj, frmt, locale);
      }
      return frmt
          .split("")
          .map((c, i, arr) => formats[c] && arr[i - 1] !== "\\"
          ? formats[c](dateObj, locale, config)
          : c !== "\\"
              ? c
              : "")
          .join("");
  };
  const createDateParser = ({ config = defaults, l10n = english }) => (date, givenFormat, timeless, customLocale) => {
      if (date !== 0 && !date)
          return undefined;
      const locale = customLocale || l10n;
      let parsedDate;
      const dateOrig = date;
      if (date instanceof Date)
          parsedDate = new Date(date.getTime());
      else if (typeof date !== "string" &&
          date.toFixed !== undefined)
          parsedDate = new Date(date);
      else if (typeof date === "string") {
          const format = givenFormat || (config || defaults).dateFormat;
          const datestr = String(date).trim();
          if (datestr === "today") {
              parsedDate = new Date();
              timeless = true;
          }
          else if (/Z$/.test(datestr) ||
              /GMT$/.test(datestr))
              parsedDate = new Date(date);
          else if (config && config.parseDate)
              parsedDate = config.parseDate(date, format);
          else {
              parsedDate =
                  !config || !config.noCalendar
                      ? new Date(new Date().getFullYear(), 0, 1, 0, 0, 0, 0)
                      : new Date(new Date().setHours(0, 0, 0, 0));
              let matched, ops = [];
              for (let i = 0, matchIndex = 0, regexStr = ""; i < format.length; i++) {
                  const token = format[i];
                  const isBackSlash = token === "\\";
                  const escaped = format[i - 1] === "\\" || isBackSlash;
                  if (tokenRegex[token] && !escaped) {
                      regexStr += tokenRegex[token];
                      const match = new RegExp(regexStr).exec(date);
                      if (match && (matched = true)) {
                          ops[token !== "Y" ? "push" : "unshift"]({
                              fn: revFormat[token],
                              val: match[++matchIndex],
                          });
                      }
                  }
                  else if (!isBackSlash)
                      regexStr += ".";
                  ops.forEach(({ fn, val }) => (parsedDate = fn(parsedDate, val, locale) || parsedDate));
              }
              parsedDate = matched ? parsedDate : undefined;
          }
      }
      if (!(parsedDate instanceof Date && !isNaN(parsedDate.getTime()))) {
          config.errorHandler(new Error(`Invalid date provided: ${dateOrig}`));
          return undefined;
      }
      if (timeless === true)
          parsedDate.setHours(0, 0, 0, 0);
      return parsedDate;
  };
  function compareDates(date1, date2, timeless = true) {
      if (timeless !== false) {
          return (new Date(date1.getTime()).setHours(0, 0, 0, 0) -
              new Date(date2.getTime()).setHours(0, 0, 0, 0));
      }
      return date1.getTime() - date2.getTime();
  }
  const isBetween = (ts, ts1, ts2) => {
      return ts > Math.min(ts1, ts2) && ts < Math.max(ts1, ts2);
  };
  const duration = {
      DAY: 86400000,
  };
  function getDefaultHours(config) {
      let hours = config.defaultHour;
      let minutes = config.defaultMinute;
      let seconds = config.defaultSeconds;
      if (config.minDate !== undefined) {
          const minHour = config.minDate.getHours();
          const minMinutes = config.minDate.getMinutes();
          const minSeconds = config.minDate.getSeconds();
          if (hours < minHour) {
              hours = minHour;
          }
          if (hours === minHour && minutes < minMinutes) {
              minutes = minMinutes;
          }
          if (hours === minHour && minutes === minMinutes && seconds < minSeconds)
              seconds = config.minDate.getSeconds();
      }
      if (config.maxDate !== undefined) {
          const maxHr = config.maxDate.getHours();
          const maxMinutes = config.maxDate.getMinutes();
          hours = Math.min(hours, maxHr);
          if (hours === maxHr)
              minutes = Math.min(maxMinutes, minutes);
          if (hours === maxHr && minutes === maxMinutes)
              seconds = config.maxDate.getSeconds();
      }
      return { hours, minutes, seconds };
  }

  if (typeof Object.assign !== "function") {
      Object.assign = function (target, ...args) {
          if (!target) {
              throw TypeError("Cannot convert undefined or null to object");
          }
          for (const source of args) {
              if (source) {
                  Object.keys(source).forEach((key) => (target[key] = source[key]));
              }
          }
          return target;
      };
  }

  const DEBOUNCED_CHANGE_MS = 300;
  function FlatpickrInstance(element, instanceConfig) {
      const self = {
          config: Object.assign(Object.assign({}, defaults), flatpickr.defaultConfig),
          l10n: english,
      };
      self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
      self._handlers = [];
      self.pluginElements = [];
      self.loadedPlugins = [];
      self._bind = bind;
      self._setHoursFromDate = setHoursFromDate;
      self._positionCalendar = positionCalendar;
      self.changeMonth = changeMonth;
      self.changeYear = changeYear;
      self.clear = clear;
      self.close = close;
      self._createElement = createElement;
      self.destroy = destroy;
      self.isEnabled = isEnabled;
      self.jumpToDate = jumpToDate;
      self.open = open;
      self.redraw = redraw;
      self.set = set;
      self.setDate = setDate;
      self.toggle = toggle;
      function setupHelperFunctions() {
          self.utils = {
              getDaysInMonth(month = self.currentMonth, yr = self.currentYear) {
                  if (month === 1 && ((yr % 4 === 0 && yr % 100 !== 0) || yr % 400 === 0))
                      return 29;
                  return self.l10n.daysInMonth[month];
              },
          };
      }
      function init() {
          self.element = self.input = element;
          self.isOpen = false;
          parseConfig();
          setupLocale();
          setupInputs();
          setupDates();
          setupHelperFunctions();
          if (!self.isMobile)
              build();
          bindEvents();
          if (self.selectedDates.length || self.config.noCalendar) {
              if (self.config.enableTime) {
                  setHoursFromDate(self.config.noCalendar ? self.latestSelectedDateObj : undefined);
              }
              updateValue(false);
          }
          setCalendarWidth();
          const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);
          if (!self.isMobile && isSafari) {
              positionCalendar();
          }
          triggerEvent("onReady");
      }
      function bindToInstance(fn) {
          return fn.bind(self);
      }
      function setCalendarWidth() {
          const config = self.config;
          if (config.weekNumbers === false && config.showMonths === 1) {
              return;
          }
          else if (config.noCalendar !== true) {
              window.requestAnimationFrame(function () {
                  if (self.calendarContainer !== undefined) {
                      self.calendarContainer.style.visibility = "hidden";
                      self.calendarContainer.style.display = "block";
                  }
                  if (self.daysContainer !== undefined) {
                      const daysWidth = (self.days.offsetWidth + 1) * config.showMonths;
                      self.daysContainer.style.width = daysWidth + "px";
                      self.calendarContainer.style.width =
                          daysWidth +
                              (self.weekWrapper !== undefined
                                  ? self.weekWrapper.offsetWidth
                                  : 0) +
                              "px";
                      self.calendarContainer.style.removeProperty("visibility");
                      self.calendarContainer.style.removeProperty("display");
                  }
              });
          }
      }
      function updateTime(e) {
          if (self.selectedDates.length === 0) {
              const defaultDate = self.config.minDate === undefined ||
                  compareDates(new Date(), self.config.minDate) >= 0
                  ? new Date()
                  : new Date(self.config.minDate.getTime());
              const defaults = getDefaultHours(self.config);
              defaultDate.setHours(defaults.hours, defaults.minutes, defaults.seconds, defaultDate.getMilliseconds());
              self.selectedDates = [defaultDate];
              self.latestSelectedDateObj = defaultDate;
          }
          if (e !== undefined && e.type !== "blur") {
              timeWrapper(e);
          }
          const prevValue = self._input.value;
          setHoursFromInputs();
          updateValue();
          if (self._input.value !== prevValue) {
              self._debouncedChange();
          }
      }
      function ampm2military(hour, amPM) {
          return (hour % 12) + 12 * int(amPM === self.l10n.amPM[1]);
      }
      function military2ampm(hour) {
          switch (hour % 24) {
              case 0:
              case 12:
                  return 12;
              default:
                  return hour % 12;
          }
      }
      function setHoursFromInputs() {
          if (self.hourElement === undefined || self.minuteElement === undefined)
              return;
          let hours = (parseInt(self.hourElement.value.slice(-2), 10) || 0) % 24, minutes = (parseInt(self.minuteElement.value, 10) || 0) % 60, seconds = self.secondElement !== undefined
              ? (parseInt(self.secondElement.value, 10) || 0) % 60
              : 0;
          if (self.amPM !== undefined) {
              hours = ampm2military(hours, self.amPM.textContent);
          }
          const limitMinHours = self.config.minTime !== undefined ||
              (self.config.minDate &&
                  self.minDateHasTime &&
                  self.latestSelectedDateObj &&
                  compareDates(self.latestSelectedDateObj, self.config.minDate, true) ===
                      0);
          const limitMaxHours = self.config.maxTime !== undefined ||
              (self.config.maxDate &&
                  self.maxDateHasTime &&
                  self.latestSelectedDateObj &&
                  compareDates(self.latestSelectedDateObj, self.config.maxDate, true) ===
                      0);
          if (limitMaxHours) {
              const maxTime = self.config.maxTime !== undefined
                  ? self.config.maxTime
                  : self.config.maxDate;
              hours = Math.min(hours, maxTime.getHours());
              if (hours === maxTime.getHours())
                  minutes = Math.min(minutes, maxTime.getMinutes());
              if (minutes === maxTime.getMinutes())
                  seconds = Math.min(seconds, maxTime.getSeconds());
          }
          if (limitMinHours) {
              const minTime = self.config.minTime !== undefined
                  ? self.config.minTime
                  : self.config.minDate;
              hours = Math.max(hours, minTime.getHours());
              if (hours === minTime.getHours() && minutes < minTime.getMinutes())
                  minutes = minTime.getMinutes();
              if (minutes === minTime.getMinutes())
                  seconds = Math.max(seconds, minTime.getSeconds());
          }
          setHours(hours, minutes, seconds);
      }
      function setHoursFromDate(dateObj) {
          const date = dateObj || self.latestSelectedDateObj;
          if (date) {
              setHours(date.getHours(), date.getMinutes(), date.getSeconds());
          }
      }
      function setHours(hours, minutes, seconds) {
          if (self.latestSelectedDateObj !== undefined) {
              self.latestSelectedDateObj.setHours(hours % 24, minutes, seconds || 0, 0);
          }
          if (!self.hourElement || !self.minuteElement || self.isMobile)
              return;
          self.hourElement.value = pad(!self.config.time_24hr
              ? ((12 + hours) % 12) + 12 * int(hours % 12 === 0)
              : hours);
          self.minuteElement.value = pad(minutes);
          if (self.amPM !== undefined)
              self.amPM.textContent = self.l10n.amPM[int(hours >= 12)];
          if (self.secondElement !== undefined)
              self.secondElement.value = pad(seconds);
      }
      function onYearInput(event) {
          const eventTarget = getEventTarget(event);
          const year = parseInt(eventTarget.value) + (event.delta || 0);
          if (year / 1000 > 1 ||
              (event.key === "Enter" && !/[^\d]/.test(year.toString()))) {
              changeYear(year);
          }
      }
      function bind(element, event, handler, options) {
          if (event instanceof Array)
              return event.forEach((ev) => bind(element, ev, handler, options));
          if (element instanceof Array)
              return element.forEach((el) => bind(el, event, handler, options));
          element.addEventListener(event, handler, options);
          self._handlers.push({
              remove: () => element.removeEventListener(event, handler),
          });
      }
      function triggerChange() {
          triggerEvent("onChange");
      }
      function bindEvents() {
          if (self.config.wrap) {
              ["open", "close", "toggle", "clear"].forEach((evt) => {
                  Array.prototype.forEach.call(self.element.querySelectorAll(`[data-${evt}]`), (el) => bind(el, "click", self[evt]));
              });
          }
          if (self.isMobile) {
              setupMobile();
              return;
          }
          const debouncedResize = debounce(onResize, 50);
          self._debouncedChange = debounce(triggerChange, DEBOUNCED_CHANGE_MS);
          if (self.daysContainer && !/iPhone|iPad|iPod/i.test(navigator.userAgent))
              bind(self.daysContainer, "mouseover", (e) => {
                  if (self.config.mode === "range")
                      onMouseOver(getEventTarget(e));
              });
          bind(window.document.body, "keydown", onKeyDown);
          if (!self.config.inline && !self.config.static)
              bind(window, "resize", debouncedResize);
          if (window.ontouchstart !== undefined)
              bind(window.document, "touchstart", documentClick);
          else
              bind(window.document, "mousedown", documentClick);
          bind(window.document, "focus", documentClick, { capture: true });
          if (self.config.clickOpens === true) {
              bind(self._input, "focus", self.open);
              bind(self._input, "click", self.open);
          }
          if (self.daysContainer !== undefined) {
              bind(self.monthNav, "click", onMonthNavClick);
              bind(self.monthNav, ["keyup", "increment"], onYearInput);
              bind(self.daysContainer, "click", selectDate);
          }
          if (self.timeContainer !== undefined &&
              self.minuteElement !== undefined &&
              self.hourElement !== undefined) {
              const selText = (e) => getEventTarget(e).select();
              bind(self.timeContainer, ["increment"], updateTime);
              bind(self.timeContainer, "blur", updateTime, { capture: true });
              bind(self.timeContainer, "click", timeIncrement);
              bind([self.hourElement, self.minuteElement], ["focus", "click"], selText);
              if (self.secondElement !== undefined)
                  bind(self.secondElement, "focus", () => self.secondElement && self.secondElement.select());
              if (self.amPM !== undefined) {
                  bind(self.amPM, "click", (e) => {
                      updateTime(e);
                      triggerChange();
                  });
              }
          }
          if (self.config.allowInput) {
              bind(self._input, "blur", onBlur);
          }
      }
      function jumpToDate(jumpDate, triggerChange) {
          const jumpTo = jumpDate !== undefined
              ? self.parseDate(jumpDate)
              : self.latestSelectedDateObj ||
                  (self.config.minDate && self.config.minDate > self.now
                      ? self.config.minDate
                      : self.config.maxDate && self.config.maxDate < self.now
                          ? self.config.maxDate
                          : self.now);
          const oldYear = self.currentYear;
          const oldMonth = self.currentMonth;
          try {
              if (jumpTo !== undefined) {
                  self.currentYear = jumpTo.getFullYear();
                  self.currentMonth = jumpTo.getMonth();
              }
          }
          catch (e) {
              e.message = "Invalid date supplied: " + jumpTo;
              self.config.errorHandler(e);
          }
          if (triggerChange && self.currentYear !== oldYear) {
              triggerEvent("onYearChange");
              buildMonthSwitch();
          }
          if (triggerChange &&
              (self.currentYear !== oldYear || self.currentMonth !== oldMonth)) {
              triggerEvent("onMonthChange");
          }
          self.redraw();
      }
      function timeIncrement(e) {
          const eventTarget = getEventTarget(e);
          if (~eventTarget.className.indexOf("arrow"))
              incrementNumInput(e, eventTarget.classList.contains("arrowUp") ? 1 : -1);
      }
      function incrementNumInput(e, delta, inputElem) {
          const target = e && getEventTarget(e);
          const input = inputElem ||
              (target && target.parentNode && target.parentNode.firstChild);
          const event = createEvent("increment");
          event.delta = delta;
          input && input.dispatchEvent(event);
      }
      function build() {
          const fragment = window.document.createDocumentFragment();
          self.calendarContainer = createElement("div", "flatpickr-calendar");
          self.calendarContainer.tabIndex = -1;
          if (!self.config.noCalendar) {
              fragment.appendChild(buildMonthNav());
              self.innerContainer = createElement("div", "flatpickr-innerContainer");
              if (self.config.weekNumbers) {
                  const { weekWrapper, weekNumbers } = buildWeeks();
                  self.innerContainer.appendChild(weekWrapper);
                  self.weekNumbers = weekNumbers;
                  self.weekWrapper = weekWrapper;
              }
              self.rContainer = createElement("div", "flatpickr-rContainer");
              self.rContainer.appendChild(buildWeekdays());
              if (!self.daysContainer) {
                  self.daysContainer = createElement("div", "flatpickr-days");
                  self.daysContainer.tabIndex = -1;
              }
              buildDays();
              self.rContainer.appendChild(self.daysContainer);
              self.innerContainer.appendChild(self.rContainer);
              fragment.appendChild(self.innerContainer);
          }
          if (self.config.enableTime) {
              fragment.appendChild(buildTime());
          }
          toggleClass(self.calendarContainer, "rangeMode", self.config.mode === "range");
          toggleClass(self.calendarContainer, "animate", self.config.animate === true);
          toggleClass(self.calendarContainer, "multiMonth", self.config.showMonths > 1);
          self.calendarContainer.appendChild(fragment);
          const customAppend = self.config.appendTo !== undefined &&
              self.config.appendTo.nodeType !== undefined;
          if (self.config.inline || self.config.static) {
              self.calendarContainer.classList.add(self.config.inline ? "inline" : "static");
              if (self.config.inline) {
                  if (!customAppend && self.element.parentNode)
                      self.element.parentNode.insertBefore(self.calendarContainer, self._input.nextSibling);
                  else if (self.config.appendTo !== undefined)
                      self.config.appendTo.appendChild(self.calendarContainer);
              }
              if (self.config.static) {
                  const wrapper = createElement("div", "flatpickr-wrapper");
                  if (self.element.parentNode)
                      self.element.parentNode.insertBefore(wrapper, self.element);
                  wrapper.appendChild(self.element);
                  if (self.altInput)
                      wrapper.appendChild(self.altInput);
                  wrapper.appendChild(self.calendarContainer);
              }
          }
          if (!self.config.static && !self.config.inline)
              (self.config.appendTo !== undefined
                  ? self.config.appendTo
                  : window.document.body).appendChild(self.calendarContainer);
      }
      function createDay(className, date, dayNumber, i) {
          const dateIsEnabled = isEnabled(date, true), dayElement = createElement("span", "flatpickr-day " + className, date.getDate().toString());
          dayElement.dateObj = date;
          dayElement.$i = i;
          dayElement.setAttribute("aria-label", self.formatDate(date, self.config.ariaDateFormat));
          if (className.indexOf("hidden") === -1 &&
              compareDates(date, self.now) === 0) {
              self.todayDateElem = dayElement;
              dayElement.classList.add("today");
              dayElement.setAttribute("aria-current", "date");
          }
          if (dateIsEnabled) {
              dayElement.tabIndex = -1;
              if (isDateSelected(date)) {
                  dayElement.classList.add("selected");
                  self.selectedDateElem = dayElement;
                  if (self.config.mode === "range") {
                      toggleClass(dayElement, "startRange", self.selectedDates[0] &&
                          compareDates(date, self.selectedDates[0], true) === 0);
                      toggleClass(dayElement, "endRange", self.selectedDates[1] &&
                          compareDates(date, self.selectedDates[1], true) === 0);
                      if (className === "nextMonthDay")
                          dayElement.classList.add("inRange");
                  }
              }
          }
          else {
              dayElement.classList.add("flatpickr-disabled");
          }
          if (self.config.mode === "range") {
              if (isDateInRange(date) && !isDateSelected(date))
                  dayElement.classList.add("inRange");
          }
          if (self.weekNumbers &&
              self.config.showMonths === 1 &&
              className !== "prevMonthDay" &&
              dayNumber % 7 === 1) {
              self.weekNumbers.insertAdjacentHTML("beforeend", "<span class='flatpickr-day'>" + self.config.getWeek(date) + "</span>");
          }
          triggerEvent("onDayCreate", dayElement);
          return dayElement;
      }
      function focusOnDayElem(targetNode) {
          targetNode.focus();
          if (self.config.mode === "range")
              onMouseOver(targetNode);
      }
      function getFirstAvailableDay(delta) {
          const startMonth = delta > 0 ? 0 : self.config.showMonths - 1;
          const endMonth = delta > 0 ? self.config.showMonths : -1;
          for (let m = startMonth; m != endMonth; m += delta) {
              const month = self.daysContainer.children[m];
              const startIndex = delta > 0 ? 0 : month.children.length - 1;
              const endIndex = delta > 0 ? month.children.length : -1;
              for (let i = startIndex; i != endIndex; i += delta) {
                  const c = month.children[i];
                  if (c.className.indexOf("hidden") === -1 && isEnabled(c.dateObj))
                      return c;
              }
          }
          return undefined;
      }
      function getNextAvailableDay(current, delta) {
          const givenMonth = current.className.indexOf("Month") === -1
              ? current.dateObj.getMonth()
              : self.currentMonth;
          const endMonth = delta > 0 ? self.config.showMonths : -1;
          const loopDelta = delta > 0 ? 1 : -1;
          for (let m = givenMonth - self.currentMonth; m != endMonth; m += loopDelta) {
              const month = self.daysContainer.children[m];
              const startIndex = givenMonth - self.currentMonth === m
                  ? current.$i + delta
                  : delta < 0
                      ? month.children.length - 1
                      : 0;
              const numMonthDays = month.children.length;
              for (let i = startIndex; i >= 0 && i < numMonthDays && i != (delta > 0 ? numMonthDays : -1); i += loopDelta) {
                  const c = month.children[i];
                  if (c.className.indexOf("hidden") === -1 &&
                      isEnabled(c.dateObj) &&
                      Math.abs(current.$i - i) >= Math.abs(delta))
                      return focusOnDayElem(c);
              }
          }
          self.changeMonth(loopDelta);
          focusOnDay(getFirstAvailableDay(loopDelta), 0);
          return undefined;
      }
      function focusOnDay(current, offset) {
          const dayFocused = isInView(document.activeElement || document.body);
          const startElem = current !== undefined
              ? current
              : dayFocused
                  ? document.activeElement
                  : self.selectedDateElem !== undefined && isInView(self.selectedDateElem)
                      ? self.selectedDateElem
                      : self.todayDateElem !== undefined && isInView(self.todayDateElem)
                          ? self.todayDateElem
                          : getFirstAvailableDay(offset > 0 ? 1 : -1);
          if (startElem === undefined) {
              self._input.focus();
          }
          else if (!dayFocused) {
              focusOnDayElem(startElem);
          }
          else {
              getNextAvailableDay(startElem, offset);
          }
      }
      function buildMonthDays(year, month) {
          const firstOfMonth = (new Date(year, month, 1).getDay() - self.l10n.firstDayOfWeek + 7) % 7;
          const prevMonthDays = self.utils.getDaysInMonth((month - 1 + 12) % 12, year);
          const daysInMonth = self.utils.getDaysInMonth(month, year), days = window.document.createDocumentFragment(), isMultiMonth = self.config.showMonths > 1, prevMonthDayClass = isMultiMonth ? "prevMonthDay hidden" : "prevMonthDay", nextMonthDayClass = isMultiMonth ? "nextMonthDay hidden" : "nextMonthDay";
          let dayNumber = prevMonthDays + 1 - firstOfMonth, dayIndex = 0;
          for (; dayNumber <= prevMonthDays; dayNumber++, dayIndex++) {
              days.appendChild(createDay(prevMonthDayClass, new Date(year, month - 1, dayNumber), dayNumber, dayIndex));
          }
          for (dayNumber = 1; dayNumber <= daysInMonth; dayNumber++, dayIndex++) {
              days.appendChild(createDay("", new Date(year, month, dayNumber), dayNumber, dayIndex));
          }
          for (let dayNum = daysInMonth + 1; dayNum <= 42 - firstOfMonth &&
              (self.config.showMonths === 1 || dayIndex % 7 !== 0); dayNum++, dayIndex++) {
              days.appendChild(createDay(nextMonthDayClass, new Date(year, month + 1, dayNum % daysInMonth), dayNum, dayIndex));
          }
          const dayContainer = createElement("div", "dayContainer");
          dayContainer.appendChild(days);
          return dayContainer;
      }
      function buildDays() {
          if (self.daysContainer === undefined) {
              return;
          }
          clearNode(self.daysContainer);
          if (self.weekNumbers)
              clearNode(self.weekNumbers);
          const frag = document.createDocumentFragment();
          for (let i = 0; i < self.config.showMonths; i++) {
              const d = new Date(self.currentYear, self.currentMonth, 1);
              d.setMonth(self.currentMonth + i);
              frag.appendChild(buildMonthDays(d.getFullYear(), d.getMonth()));
          }
          self.daysContainer.appendChild(frag);
          self.days = self.daysContainer.firstChild;
          if (self.config.mode === "range" && self.selectedDates.length === 1) {
              onMouseOver();
          }
      }
      function buildMonthSwitch() {
          if (self.config.showMonths > 1 ||
              self.config.monthSelectorType !== "dropdown")
              return;
          const shouldBuildMonth = function (month) {
              if (self.config.minDate !== undefined &&
                  self.currentYear === self.config.minDate.getFullYear() &&
                  month < self.config.minDate.getMonth()) {
                  return false;
              }
              return !(self.config.maxDate !== undefined &&
                  self.currentYear === self.config.maxDate.getFullYear() &&
                  month > self.config.maxDate.getMonth());
          };
          self.monthsDropdownContainer.tabIndex = -1;
          self.monthsDropdownContainer.innerHTML = "";
          for (let i = 0; i < 12; i++) {
              if (!shouldBuildMonth(i))
                  continue;
              const month = createElement("option", "flatpickr-monthDropdown-month");
              month.value = new Date(self.currentYear, i).getMonth().toString();
              month.textContent = monthToStr(i, self.config.shorthandCurrentMonth, self.l10n);
              month.tabIndex = -1;
              if (self.currentMonth === i) {
                  month.selected = true;
              }
              self.monthsDropdownContainer.appendChild(month);
          }
      }
      function buildMonth() {
          const container = createElement("div", "flatpickr-month");
          const monthNavFragment = window.document.createDocumentFragment();
          let monthElement;
          if (self.config.showMonths > 1 ||
              self.config.monthSelectorType === "static") {
              monthElement = createElement("span", "cur-month");
          }
          else {
              self.monthsDropdownContainer = createElement("select", "flatpickr-monthDropdown-months");
              self.monthsDropdownContainer.setAttribute("aria-label", self.l10n.monthAriaLabel);
              bind(self.monthsDropdownContainer, "change", (e) => {
                  const target = getEventTarget(e);
                  const selectedMonth = parseInt(target.value, 10);
                  self.changeMonth(selectedMonth - self.currentMonth);
                  triggerEvent("onMonthChange");
              });
              buildMonthSwitch();
              monthElement = self.monthsDropdownContainer;
          }
          const yearInput = createNumberInput("cur-year", { tabindex: "-1" });
          const yearElement = yearInput.getElementsByTagName("input")[0];
          yearElement.setAttribute("aria-label", self.l10n.yearAriaLabel);
          if (self.config.minDate) {
              yearElement.setAttribute("min", self.config.minDate.getFullYear().toString());
          }
          if (self.config.maxDate) {
              yearElement.setAttribute("max", self.config.maxDate.getFullYear().toString());
              yearElement.disabled =
                  !!self.config.minDate &&
                      self.config.minDate.getFullYear() === self.config.maxDate.getFullYear();
          }
          const currentMonth = createElement("div", "flatpickr-current-month");
          currentMonth.appendChild(monthElement);
          currentMonth.appendChild(yearInput);
          monthNavFragment.appendChild(currentMonth);
          container.appendChild(monthNavFragment);
          return {
              container,
              yearElement,
              monthElement,
          };
      }
      function buildMonths() {
          clearNode(self.monthNav);
          self.monthNav.appendChild(self.prevMonthNav);
          if (self.config.showMonths) {
              self.yearElements = [];
              self.monthElements = [];
          }
          for (let m = self.config.showMonths; m--;) {
              const month = buildMonth();
              self.yearElements.push(month.yearElement);
              self.monthElements.push(month.monthElement);
              self.monthNav.appendChild(month.container);
          }
          self.monthNav.appendChild(self.nextMonthNav);
      }
      function buildMonthNav() {
          self.monthNav = createElement("div", "flatpickr-months");
          self.yearElements = [];
          self.monthElements = [];
          self.prevMonthNav = createElement("span", "flatpickr-prev-month");
          self.prevMonthNav.innerHTML = self.config.prevArrow;
          self.nextMonthNav = createElement("span", "flatpickr-next-month");
          self.nextMonthNav.innerHTML = self.config.nextArrow;
          buildMonths();
          Object.defineProperty(self, "_hidePrevMonthArrow", {
              get: () => self.__hidePrevMonthArrow,
              set(bool) {
                  if (self.__hidePrevMonthArrow !== bool) {
                      toggleClass(self.prevMonthNav, "flatpickr-disabled", bool);
                      self.__hidePrevMonthArrow = bool;
                  }
              },
          });
          Object.defineProperty(self, "_hideNextMonthArrow", {
              get: () => self.__hideNextMonthArrow,
              set(bool) {
                  if (self.__hideNextMonthArrow !== bool) {
                      toggleClass(self.nextMonthNav, "flatpickr-disabled", bool);
                      self.__hideNextMonthArrow = bool;
                  }
              },
          });
          self.currentYearElement = self.yearElements[0];
          updateNavigationCurrentMonth();
          return self.monthNav;
      }
      function buildTime() {
          self.calendarContainer.classList.add("hasTime");
          if (self.config.noCalendar)
              self.calendarContainer.classList.add("noCalendar");
          const defaults = getDefaultHours(self.config);
          self.timeContainer = createElement("div", "flatpickr-time");
          self.timeContainer.tabIndex = -1;
          const separator = createElement("span", "flatpickr-time-separator", ":");
          const hourInput = createNumberInput("flatpickr-hour", {
              "aria-label": self.l10n.hourAriaLabel,
          });
          self.hourElement = hourInput.getElementsByTagName("input")[0];
          const minuteInput = createNumberInput("flatpickr-minute", {
              "aria-label": self.l10n.minuteAriaLabel,
          });
          self.minuteElement = minuteInput.getElementsByTagName("input")[0];
          self.hourElement.tabIndex = self.minuteElement.tabIndex = -1;
          self.hourElement.value = pad(self.latestSelectedDateObj
              ? self.latestSelectedDateObj.getHours()
              : self.config.time_24hr
                  ? defaults.hours
                  : military2ampm(defaults.hours));
          self.minuteElement.value = pad(self.latestSelectedDateObj
              ? self.latestSelectedDateObj.getMinutes()
              : defaults.minutes);
          self.hourElement.setAttribute("step", self.config.hourIncrement.toString());
          self.minuteElement.setAttribute("step", self.config.minuteIncrement.toString());
          self.hourElement.setAttribute("min", self.config.time_24hr ? "0" : "1");
          self.hourElement.setAttribute("max", self.config.time_24hr ? "23" : "12");
          self.hourElement.setAttribute("maxlength", "2");
          self.minuteElement.setAttribute("min", "0");
          self.minuteElement.setAttribute("max", "59");
          self.minuteElement.setAttribute("maxlength", "2");
          self.timeContainer.appendChild(hourInput);
          self.timeContainer.appendChild(separator);
          self.timeContainer.appendChild(minuteInput);
          if (self.config.time_24hr)
              self.timeContainer.classList.add("time24hr");
          if (self.config.enableSeconds) {
              self.timeContainer.classList.add("hasSeconds");
              const secondInput = createNumberInput("flatpickr-second");
              self.secondElement = secondInput.getElementsByTagName("input")[0];
              self.secondElement.value = pad(self.latestSelectedDateObj
                  ? self.latestSelectedDateObj.getSeconds()
                  : defaults.seconds);
              self.secondElement.setAttribute("step", self.minuteElement.getAttribute("step"));
              self.secondElement.setAttribute("min", "0");
              self.secondElement.setAttribute("max", "59");
              self.secondElement.setAttribute("maxlength", "2");
              self.timeContainer.appendChild(createElement("span", "flatpickr-time-separator", ":"));
              self.timeContainer.appendChild(secondInput);
          }
          if (!self.config.time_24hr) {
              self.amPM = createElement("span", "flatpickr-am-pm", self.l10n.amPM[int((self.latestSelectedDateObj
                  ? self.hourElement.value
                  : self.config.defaultHour) > 11)]);
              self.amPM.title = self.l10n.toggleTitle;
              self.amPM.tabIndex = -1;
              self.timeContainer.appendChild(self.amPM);
          }
          return self.timeContainer;
      }
      function buildWeekdays() {
          if (!self.weekdayContainer)
              self.weekdayContainer = createElement("div", "flatpickr-weekdays");
          else
              clearNode(self.weekdayContainer);
          for (let i = self.config.showMonths; i--;) {
              const container = createElement("div", "flatpickr-weekdaycontainer");
              self.weekdayContainer.appendChild(container);
          }
          updateWeekdays();
          return self.weekdayContainer;
      }
      function updateWeekdays() {
          if (!self.weekdayContainer) {
              return;
          }
          const firstDayOfWeek = self.l10n.firstDayOfWeek;
          let weekdays = [...self.l10n.weekdays.shorthand];
          if (firstDayOfWeek > 0 && firstDayOfWeek < weekdays.length) {
              weekdays = [
                  ...weekdays.splice(firstDayOfWeek, weekdays.length),
                  ...weekdays.splice(0, firstDayOfWeek),
              ];
          }
          for (let i = self.config.showMonths; i--;) {
              self.weekdayContainer.children[i].innerHTML = `
      <span class='flatpickr-weekday'>
        ${weekdays.join("</span><span class='flatpickr-weekday'>")}
      </span>
      `;
          }
      }
      function buildWeeks() {
          self.calendarContainer.classList.add("hasWeeks");
          const weekWrapper = createElement("div", "flatpickr-weekwrapper");
          weekWrapper.appendChild(createElement("span", "flatpickr-weekday", self.l10n.weekAbbreviation));
          const weekNumbers = createElement("div", "flatpickr-weeks");
          weekWrapper.appendChild(weekNumbers);
          return {
              weekWrapper,
              weekNumbers,
          };
      }
      function changeMonth(value, isOffset = true) {
          const delta = isOffset ? value : value - self.currentMonth;
          if ((delta < 0 && self._hidePrevMonthArrow === true) ||
              (delta > 0 && self._hideNextMonthArrow === true))
              return;
          self.currentMonth += delta;
          if (self.currentMonth < 0 || self.currentMonth > 11) {
              self.currentYear += self.currentMonth > 11 ? 1 : -1;
              self.currentMonth = (self.currentMonth + 12) % 12;
              triggerEvent("onYearChange");
              buildMonthSwitch();
          }
          buildDays();
          triggerEvent("onMonthChange");
          updateNavigationCurrentMonth();
      }
      function clear(triggerChangeEvent = true, toInitial = true) {
          self.input.value = "";
          if (self.altInput !== undefined)
              self.altInput.value = "";
          if (self.mobileInput !== undefined)
              self.mobileInput.value = "";
          self.selectedDates = [];
          self.latestSelectedDateObj = undefined;
          if (toInitial === true) {
              self.currentYear = self._initialDate.getFullYear();
              self.currentMonth = self._initialDate.getMonth();
          }
          if (self.config.enableTime === true) {
              const { hours, minutes, seconds } = getDefaultHours(self.config);
              setHours(hours, minutes, seconds);
          }
          self.redraw();
          if (triggerChangeEvent)
              triggerEvent("onChange");
      }
      function close() {
          self.isOpen = false;
          if (!self.isMobile) {
              if (self.calendarContainer !== undefined) {
                  self.calendarContainer.classList.remove("open");
              }
              if (self._input !== undefined) {
                  self._input.classList.remove("active");
              }
          }
          triggerEvent("onClose");
      }
      function destroy() {
          if (self.config !== undefined)
              triggerEvent("onDestroy");
          for (let i = self._handlers.length; i--;) {
              self._handlers[i].remove();
          }
          self._handlers = [];
          if (self.mobileInput) {
              if (self.mobileInput.parentNode)
                  self.mobileInput.parentNode.removeChild(self.mobileInput);
              self.mobileInput = undefined;
          }
          else if (self.calendarContainer && self.calendarContainer.parentNode) {
              if (self.config.static && self.calendarContainer.parentNode) {
                  const wrapper = self.calendarContainer.parentNode;
                  wrapper.lastChild && wrapper.removeChild(wrapper.lastChild);
                  if (wrapper.parentNode) {
                      while (wrapper.firstChild)
                          wrapper.parentNode.insertBefore(wrapper.firstChild, wrapper);
                      wrapper.parentNode.removeChild(wrapper);
                  }
              }
              else
                  self.calendarContainer.parentNode.removeChild(self.calendarContainer);
          }
          if (self.altInput) {
              self.input.type = "text";
              if (self.altInput.parentNode)
                  self.altInput.parentNode.removeChild(self.altInput);
              delete self.altInput;
          }
          if (self.input) {
              self.input.type = self.input._type;
              self.input.classList.remove("flatpickr-input");
              self.input.removeAttribute("readonly");
          }
          [
              "_showTimeInput",
              "latestSelectedDateObj",
              "_hideNextMonthArrow",
              "_hidePrevMonthArrow",
              "__hideNextMonthArrow",
              "__hidePrevMonthArrow",
              "isMobile",
              "isOpen",
              "selectedDateElem",
              "minDateHasTime",
              "maxDateHasTime",
              "days",
              "daysContainer",
              "_input",
              "_positionElement",
              "innerContainer",
              "rContainer",
              "monthNav",
              "todayDateElem",
              "calendarContainer",
              "weekdayContainer",
              "prevMonthNav",
              "nextMonthNav",
              "monthsDropdownContainer",
              "currentMonthElement",
              "currentYearElement",
              "navigationCurrentMonth",
              "selectedDateElem",
              "config",
          ].forEach((k) => {
              try {
                  delete self[k];
              }
              catch (_) { }
          });
      }
      function isCalendarElem(elem) {
          if (self.config.appendTo && self.config.appendTo.contains(elem))
              return true;
          return self.calendarContainer.contains(elem);
      }
      function documentClick(e) {
          if (self.isOpen && !self.config.inline) {
              const eventTarget = getEventTarget(e);
              const isCalendarElement = isCalendarElem(eventTarget);
              const isInput = eventTarget === self.input ||
                  eventTarget === self.altInput ||
                  self.element.contains(eventTarget) ||
                  (e.path &&
                      e.path.indexOf &&
                      (~e.path.indexOf(self.input) ||
                          ~e.path.indexOf(self.altInput)));
              const lostFocus = e.type === "blur"
                  ? isInput &&
                      e.relatedTarget &&
                      !isCalendarElem(e.relatedTarget)
                  : !isInput &&
                      !isCalendarElement &&
                      !isCalendarElem(e.relatedTarget);
              const isIgnored = !self.config.ignoredFocusElements.some((elem) => elem.contains(eventTarget));
              if (lostFocus && isIgnored) {
                  if (self.timeContainer !== undefined &&
                      self.minuteElement !== undefined &&
                      self.hourElement !== undefined &&
                      self.input.value !== "" &&
                      self.input.value !== undefined) {
                      updateTime();
                  }
                  self.close();
                  if (self.config &&
                      self.config.mode === "range" &&
                      self.selectedDates.length === 1) {
                      self.clear(false);
                      self.redraw();
                  }
              }
          }
      }
      function changeYear(newYear) {
          if (!newYear ||
              (self.config.minDate && newYear < self.config.minDate.getFullYear()) ||
              (self.config.maxDate && newYear > self.config.maxDate.getFullYear()))
              return;
          const newYearNum = newYear, isNewYear = self.currentYear !== newYearNum;
          self.currentYear = newYearNum || self.currentYear;
          if (self.config.maxDate &&
              self.currentYear === self.config.maxDate.getFullYear()) {
              self.currentMonth = Math.min(self.config.maxDate.getMonth(), self.currentMonth);
          }
          else if (self.config.minDate &&
              self.currentYear === self.config.minDate.getFullYear()) {
              self.currentMonth = Math.max(self.config.minDate.getMonth(), self.currentMonth);
          }
          if (isNewYear) {
              self.redraw();
              triggerEvent("onYearChange");
              buildMonthSwitch();
          }
      }
      function isEnabled(date, timeless = true) {
          var _a;
          const dateToCheck = self.parseDate(date, undefined, timeless);
          if ((self.config.minDate &&
              dateToCheck &&
              compareDates(dateToCheck, self.config.minDate, timeless !== undefined ? timeless : !self.minDateHasTime) < 0) ||
              (self.config.maxDate &&
                  dateToCheck &&
                  compareDates(dateToCheck, self.config.maxDate, timeless !== undefined ? timeless : !self.maxDateHasTime) > 0))
              return false;
          if (!self.config.enable && self.config.disable.length === 0)
              return true;
          if (dateToCheck === undefined)
              return false;
          const bool = !!self.config.enable, array = (_a = self.config.enable) !== null && _a !== void 0 ? _a : self.config.disable;
          for (let i = 0, d; i < array.length; i++) {
              d = array[i];
              if (typeof d === "function" &&
                  d(dateToCheck))
                  return bool;
              else if (d instanceof Date &&
                  dateToCheck !== undefined &&
                  d.getTime() === dateToCheck.getTime())
                  return bool;
              else if (typeof d === "string") {
                  const parsed = self.parseDate(d, undefined, true);
                  return parsed && parsed.getTime() === dateToCheck.getTime()
                      ? bool
                      : !bool;
              }
              else if (typeof d === "object" &&
                  dateToCheck !== undefined &&
                  d.from &&
                  d.to &&
                  dateToCheck.getTime() >= d.from.getTime() &&
                  dateToCheck.getTime() <= d.to.getTime())
                  return bool;
          }
          return !bool;
      }
      function isInView(elem) {
          if (self.daysContainer !== undefined)
              return (elem.className.indexOf("hidden") === -1 &&
                  elem.className.indexOf("flatpickr-disabled") === -1 &&
                  self.daysContainer.contains(elem));
          return false;
      }
      function onBlur(e) {
          const isInput = e.target === self._input;
          if (isInput &&
              (self.selectedDates.length > 0 || self._input.value.length > 0) &&
              !(e.relatedTarget && isCalendarElem(e.relatedTarget))) {
              self.setDate(self._input.value, true, e.target === self.altInput
                  ? self.config.altFormat
                  : self.config.dateFormat);
          }
      }
      function onKeyDown(e) {
          const eventTarget = getEventTarget(e);
          const isInput = self.config.wrap
              ? element.contains(eventTarget)
              : eventTarget === self._input;
          const allowInput = self.config.allowInput;
          const allowKeydown = self.isOpen && (!allowInput || !isInput);
          const allowInlineKeydown = self.config.inline && isInput && !allowInput;
          if (e.keyCode === 13 && isInput) {
              if (allowInput) {
                  self.setDate(self._input.value, true, eventTarget === self.altInput
                      ? self.config.altFormat
                      : self.config.dateFormat);
                  return eventTarget.blur();
              }
              else {
                  self.open();
              }
          }
          else if (isCalendarElem(eventTarget) ||
              allowKeydown ||
              allowInlineKeydown) {
              const isTimeObj = !!self.timeContainer &&
                  self.timeContainer.contains(eventTarget);
              switch (e.keyCode) {
                  case 13:
                      if (isTimeObj) {
                          e.preventDefault();
                          updateTime();
                          focusAndClose();
                      }
                      else
                          selectDate(e);
                      break;
                  case 27:
                      e.preventDefault();
                      focusAndClose();
                      break;
                  case 8:
                  case 46:
                      if (isInput && !self.config.allowInput) {
                          e.preventDefault();
                          self.clear();
                      }
                      break;
                  case 37:
                  case 39:
                      if (!isTimeObj && !isInput) {
                          e.preventDefault();
                          if (self.daysContainer !== undefined &&
                              (allowInput === false ||
                                  (document.activeElement && isInView(document.activeElement)))) {
                              const delta = e.keyCode === 39 ? 1 : -1;
                              if (!e.ctrlKey)
                                  focusOnDay(undefined, delta);
                              else {
                                  e.stopPropagation();
                                  changeMonth(delta);
                                  focusOnDay(getFirstAvailableDay(1), 0);
                              }
                          }
                      }
                      else if (self.hourElement)
                          self.hourElement.focus();
                      break;
                  case 38:
                  case 40:
                      e.preventDefault();
                      const delta = e.keyCode === 40 ? 1 : -1;
                      if ((self.daysContainer &&
                          eventTarget.$i !== undefined) ||
                          eventTarget === self.input ||
                          eventTarget === self.altInput) {
                          if (e.ctrlKey) {
                              e.stopPropagation();
                              changeYear(self.currentYear - delta);
                              focusOnDay(getFirstAvailableDay(1), 0);
                          }
                          else if (!isTimeObj)
                              focusOnDay(undefined, delta * 7);
                      }
                      else if (eventTarget === self.currentYearElement) {
                          changeYear(self.currentYear - delta);
                      }
                      else if (self.config.enableTime) {
                          if (!isTimeObj && self.hourElement)
                              self.hourElement.focus();
                          updateTime(e);
                          self._debouncedChange();
                      }
                      break;
                  case 9:
                      if (isTimeObj) {
                          const elems = [
                              self.hourElement,
                              self.minuteElement,
                              self.secondElement,
                              self.amPM,
                          ]
                              .concat(self.pluginElements)
                              .filter((x) => x);
                          const i = elems.indexOf(eventTarget);
                          if (i !== -1) {
                              const target = elems[i + (e.shiftKey ? -1 : 1)];
                              e.preventDefault();
                              (target || self._input).focus();
                          }
                      }
                      else if (!self.config.noCalendar &&
                          self.daysContainer &&
                          self.daysContainer.contains(eventTarget) &&
                          e.shiftKey) {
                          e.preventDefault();
                          self._input.focus();
                      }
                      break;
              }
          }
          if (self.amPM !== undefined && eventTarget === self.amPM) {
              switch (e.key) {
                  case self.l10n.amPM[0].charAt(0):
                  case self.l10n.amPM[0].charAt(0).toLowerCase():
                      self.amPM.textContent = self.l10n.amPM[0];
                      setHoursFromInputs();
                      updateValue();
                      break;
                  case self.l10n.amPM[1].charAt(0):
                  case self.l10n.amPM[1].charAt(0).toLowerCase():
                      self.amPM.textContent = self.l10n.amPM[1];
                      setHoursFromInputs();
                      updateValue();
                      break;
              }
          }
          if (isInput || isCalendarElem(eventTarget)) {
              triggerEvent("onKeyDown", e);
          }
      }
      function onMouseOver(elem) {
          if (self.selectedDates.length !== 1 ||
              (elem &&
                  (!elem.classList.contains("flatpickr-day") ||
                      elem.classList.contains("flatpickr-disabled"))))
              return;
          const hoverDate = elem
              ? elem.dateObj.getTime()
              : self.days.firstElementChild.dateObj.getTime(), initialDate = self.parseDate(self.selectedDates[0], undefined, true).getTime(), rangeStartDate = Math.min(hoverDate, self.selectedDates[0].getTime()), rangeEndDate = Math.max(hoverDate, self.selectedDates[0].getTime());
          let containsDisabled = false;
          let minRange = 0, maxRange = 0;
          for (let t = rangeStartDate; t < rangeEndDate; t += duration.DAY) {
              if (!isEnabled(new Date(t), true)) {
                  containsDisabled =
                      containsDisabled || (t > rangeStartDate && t < rangeEndDate);
                  if (t < initialDate && (!minRange || t > minRange))
                      minRange = t;
                  else if (t > initialDate && (!maxRange || t < maxRange))
                      maxRange = t;
              }
          }
          for (let m = 0; m < self.config.showMonths; m++) {
              const month = self.daysContainer.children[m];
              for (let i = 0, l = month.children.length; i < l; i++) {
                  const dayElem = month.children[i], date = dayElem.dateObj;
                  const timestamp = date.getTime();
                  const outOfRange = (minRange > 0 && timestamp < minRange) ||
                      (maxRange > 0 && timestamp > maxRange);
                  if (outOfRange) {
                      dayElem.classList.add("notAllowed");
                      ["inRange", "startRange", "endRange"].forEach((c) => {
                          dayElem.classList.remove(c);
                      });
                      continue;
                  }
                  else if (containsDisabled && !outOfRange)
                      continue;
                  ["startRange", "inRange", "endRange", "notAllowed"].forEach((c) => {
                      dayElem.classList.remove(c);
                  });
                  if (elem !== undefined) {
                      elem.classList.add(hoverDate <= self.selectedDates[0].getTime()
                          ? "startRange"
                          : "endRange");
                      if (initialDate < hoverDate && timestamp === initialDate)
                          dayElem.classList.add("startRange");
                      else if (initialDate > hoverDate && timestamp === initialDate)
                          dayElem.classList.add("endRange");
                      if (timestamp >= minRange &&
                          (maxRange === 0 || timestamp <= maxRange) &&
                          isBetween(timestamp, initialDate, hoverDate))
                          dayElem.classList.add("inRange");
                  }
              }
          }
      }
      function onResize() {
          if (self.isOpen && !self.config.static && !self.config.inline)
              positionCalendar();
      }
      function open(e, positionElement = self._positionElement) {
          if (self.isMobile === true) {
              if (e) {
                  e.preventDefault();
                  const eventTarget = getEventTarget(e);
                  if (eventTarget) {
                      eventTarget.blur();
                  }
              }
              if (self.mobileInput !== undefined) {
                  self.mobileInput.focus();
                  self.mobileInput.click();
              }
              triggerEvent("onOpen");
              return;
          }
          else if (self._input.disabled || self.config.inline) {
              return;
          }
          const wasOpen = self.isOpen;
          self.isOpen = true;
          if (!wasOpen) {
              self.calendarContainer.classList.add("open");
              self._input.classList.add("active");
              triggerEvent("onOpen");
              positionCalendar(positionElement);
          }
          if (self.config.enableTime === true && self.config.noCalendar === true) {
              if (self.config.allowInput === false &&
                  (e === undefined ||
                      !self.timeContainer.contains(e.relatedTarget))) {
                  setTimeout(() => self.hourElement.select(), 50);
              }
          }
      }
      function minMaxDateSetter(type) {
          return (date) => {
              const dateObj = (self.config[`_${type}Date`] = self.parseDate(date, self.config.dateFormat));
              const inverseDateObj = self.config[`_${type === "min" ? "max" : "min"}Date`];
              if (dateObj !== undefined) {
                  self[type === "min" ? "minDateHasTime" : "maxDateHasTime"] =
                      dateObj.getHours() > 0 ||
                          dateObj.getMinutes() > 0 ||
                          dateObj.getSeconds() > 0;
              }
              if (self.selectedDates) {
                  self.selectedDates = self.selectedDates.filter((d) => isEnabled(d));
                  if (!self.selectedDates.length && type === "min")
                      setHoursFromDate(dateObj);
                  updateValue();
              }
              if (self.daysContainer) {
                  redraw();
                  if (dateObj !== undefined)
                      self.currentYearElement[type] = dateObj.getFullYear().toString();
                  else
                      self.currentYearElement.removeAttribute(type);
                  self.currentYearElement.disabled =
                      !!inverseDateObj &&
                          dateObj !== undefined &&
                          inverseDateObj.getFullYear() === dateObj.getFullYear();
              }
          };
      }
      function parseConfig() {
          const boolOpts = [
              "wrap",
              "weekNumbers",
              "allowInput",
              "allowInvalidPreload",
              "clickOpens",
              "time_24hr",
              "enableTime",
              "noCalendar",
              "altInput",
              "shorthandCurrentMonth",
              "inline",
              "static",
              "enableSeconds",
              "disableMobile",
          ];
          const userConfig = Object.assign(Object.assign({}, JSON.parse(JSON.stringify(element.dataset || {}))), instanceConfig);
          const formats = {};
          self.config.parseDate = userConfig.parseDate;
          self.config.formatDate = userConfig.formatDate;
          Object.defineProperty(self.config, "enable", {
              get: () => self.config._enable,
              set: (dates) => {
                  self.config._enable = parseDateRules(dates);
              },
          });
          Object.defineProperty(self.config, "disable", {
              get: () => self.config._disable,
              set: (dates) => {
                  self.config._disable = parseDateRules(dates);
              },
          });
          const timeMode = userConfig.mode === "time";
          if (!userConfig.dateFormat && (userConfig.enableTime || timeMode)) {
              const defaultDateFormat = flatpickr.defaultConfig.dateFormat || defaults.dateFormat;
              formats.dateFormat =
                  userConfig.noCalendar || timeMode
                      ? "H:i" + (userConfig.enableSeconds ? ":S" : "")
                      : defaultDateFormat + " H:i" + (userConfig.enableSeconds ? ":S" : "");
          }
          if (userConfig.altInput &&
              (userConfig.enableTime || timeMode) &&
              !userConfig.altFormat) {
              const defaultAltFormat = flatpickr.defaultConfig.altFormat || defaults.altFormat;
              formats.altFormat =
                  userConfig.noCalendar || timeMode
                      ? "h:i" + (userConfig.enableSeconds ? ":S K" : " K")
                      : defaultAltFormat + ` h:i${userConfig.enableSeconds ? ":S" : ""} K`;
          }
          Object.defineProperty(self.config, "minDate", {
              get: () => self.config._minDate,
              set: minMaxDateSetter("min"),
          });
          Object.defineProperty(self.config, "maxDate", {
              get: () => self.config._maxDate,
              set: minMaxDateSetter("max"),
          });
          const minMaxTimeSetter = (type) => (val) => {
              self.config[type === "min" ? "_minTime" : "_maxTime"] = self.parseDate(val, "H:i:S");
          };
          Object.defineProperty(self.config, "minTime", {
              get: () => self.config._minTime,
              set: minMaxTimeSetter("min"),
          });
          Object.defineProperty(self.config, "maxTime", {
              get: () => self.config._maxTime,
              set: minMaxTimeSetter("max"),
          });
          if (userConfig.mode === "time") {
              self.config.noCalendar = true;
              self.config.enableTime = true;
          }
          Object.assign(self.config, formats, userConfig);
          for (let i = 0; i < boolOpts.length; i++)
              self.config[boolOpts[i]] =
                  self.config[boolOpts[i]] === true ||
                      self.config[boolOpts[i]] === "true";
          HOOKS.filter((hook) => self.config[hook] !== undefined).forEach((hook) => {
              self.config[hook] = arrayify(self.config[hook] || []).map(bindToInstance);
          });
          self.isMobile =
              !self.config.disableMobile &&
                  !self.config.inline &&
                  self.config.mode === "single" &&
                  !self.config.disable.length &&
                  !self.config.enable &&
                  !self.config.weekNumbers &&
                  /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
          for (let i = 0; i < self.config.plugins.length; i++) {
              const pluginConf = self.config.plugins[i](self) || {};
              for (const key in pluginConf) {
                  if (HOOKS.indexOf(key) > -1) {
                      self.config[key] = arrayify(pluginConf[key])
                          .map(bindToInstance)
                          .concat(self.config[key]);
                  }
                  else if (typeof userConfig[key] === "undefined")
                      self.config[key] = pluginConf[key];
              }
          }
          if (!userConfig.altInputClass) {
              self.config.altInputClass =
                  getInputElem().className + " " + self.config.altInputClass;
          }
          triggerEvent("onParseConfig");
      }
      function getInputElem() {
          return self.config.wrap
              ? element.querySelector("[data-input]")
              : element;
      }
      function setupLocale() {
          if (typeof self.config.locale !== "object" &&
              typeof flatpickr.l10ns[self.config.locale] === "undefined")
              self.config.errorHandler(new Error(`flatpickr: invalid locale ${self.config.locale}`));
          self.l10n = Object.assign(Object.assign({}, flatpickr.l10ns.default), (typeof self.config.locale === "object"
              ? self.config.locale
              : self.config.locale !== "default"
                  ? flatpickr.l10ns[self.config.locale]
                  : undefined));
          tokenRegex.K = `(${self.l10n.amPM[0]}|${self.l10n.amPM[1]}|${self.l10n.amPM[0].toLowerCase()}|${self.l10n.amPM[1].toLowerCase()})`;
          const userConfig = Object.assign(Object.assign({}, instanceConfig), JSON.parse(JSON.stringify(element.dataset || {})));
          if (userConfig.time_24hr === undefined &&
              flatpickr.defaultConfig.time_24hr === undefined) {
              self.config.time_24hr = self.l10n.time_24hr;
          }
          self.formatDate = createDateFormatter(self);
          self.parseDate = createDateParser({ config: self.config, l10n: self.l10n });
      }
      function positionCalendar(customPositionElement) {
          if (typeof self.config.position === "function") {
              return void self.config.position(self, customPositionElement);
          }
          if (self.calendarContainer === undefined)
              return;
          triggerEvent("onPreCalendarPosition");
          const positionElement = customPositionElement || self._positionElement;
          const calendarHeight = Array.prototype.reduce.call(self.calendarContainer.children, ((acc, child) => acc + child.offsetHeight), 0), calendarWidth = self.calendarContainer.offsetWidth, configPos = self.config.position.split(" "), configPosVertical = configPos[0], configPosHorizontal = configPos.length > 1 ? configPos[1] : null, inputBounds = positionElement.getBoundingClientRect(), distanceFromBottom = window.innerHeight - inputBounds.bottom, showOnTop = configPosVertical === "above" ||
              (configPosVertical !== "below" &&
                  distanceFromBottom < calendarHeight &&
                  inputBounds.top > calendarHeight);
          const top = window.pageYOffset +
              inputBounds.top +
              (!showOnTop ? positionElement.offsetHeight + 2 : -calendarHeight - 2);
          toggleClass(self.calendarContainer, "arrowTop", !showOnTop);
          toggleClass(self.calendarContainer, "arrowBottom", showOnTop);
          if (self.config.inline)
              return;
          let left = window.pageXOffset + inputBounds.left;
          let isCenter = false;
          let isRight = false;
          if (configPosHorizontal === "center") {
              left -= (calendarWidth - inputBounds.width) / 2;
              isCenter = true;
          }
          else if (configPosHorizontal === "right") {
              left -= calendarWidth - inputBounds.width;
              isRight = true;
          }
          toggleClass(self.calendarContainer, "arrowLeft", !isCenter && !isRight);
          toggleClass(self.calendarContainer, "arrowCenter", isCenter);
          toggleClass(self.calendarContainer, "arrowRight", isRight);
          const right = window.document.body.offsetWidth -
              (window.pageXOffset + inputBounds.right);
          const rightMost = left + calendarWidth > window.document.body.offsetWidth;
          const centerMost = right + calendarWidth > window.document.body.offsetWidth;
          toggleClass(self.calendarContainer, "rightMost", rightMost);
          if (self.config.static)
              return;
          self.calendarContainer.style.top = `${top}px`;
          if (!rightMost) {
              self.calendarContainer.style.left = `${left}px`;
              self.calendarContainer.style.right = "auto";
          }
          else if (!centerMost) {
              self.calendarContainer.style.left = "auto";
              self.calendarContainer.style.right = `${right}px`;
          }
          else {
              const doc = getDocumentStyleSheet();
              if (doc === undefined)
                  return;
              const bodyWidth = window.document.body.offsetWidth;
              const centerLeft = Math.max(0, bodyWidth / 2 - calendarWidth / 2);
              const centerBefore = ".flatpickr-calendar.centerMost:before";
              const centerAfter = ".flatpickr-calendar.centerMost:after";
              const centerIndex = doc.cssRules.length;
              const centerStyle = `{left:${inputBounds.left}px;right:auto;}`;
              toggleClass(self.calendarContainer, "rightMost", false);
              toggleClass(self.calendarContainer, "centerMost", true);
              doc.insertRule(`${centerBefore},${centerAfter}${centerStyle}`, centerIndex);
              self.calendarContainer.style.left = `${centerLeft}px`;
              self.calendarContainer.style.right = "auto";
          }
      }
      function getDocumentStyleSheet() {
          let editableSheet = null;
          for (let i = 0; i < document.styleSheets.length; i++) {
              const sheet = document.styleSheets[i];
              try {
                  sheet.cssRules;
              }
              catch (err) {
                  continue;
              }
              editableSheet = sheet;
              break;
          }
          return editableSheet != null ? editableSheet : createStyleSheet();
      }
      function createStyleSheet() {
          const style = document.createElement("style");
          document.head.appendChild(style);
          return style.sheet;
      }
      function redraw() {
          if (self.config.noCalendar || self.isMobile)
              return;
          buildMonthSwitch();
          updateNavigationCurrentMonth();
          buildDays();
      }
      function focusAndClose() {
          self._input.focus();
          if (window.navigator.userAgent.indexOf("MSIE") !== -1 ||
              navigator.msMaxTouchPoints !== undefined) {
              setTimeout(self.close, 0);
          }
          else {
              self.close();
          }
      }
      function selectDate(e) {
          e.preventDefault();
          e.stopPropagation();
          const isSelectable = (day) => day.classList &&
              day.classList.contains("flatpickr-day") &&
              !day.classList.contains("flatpickr-disabled") &&
              !day.classList.contains("notAllowed");
          const t = findParent(getEventTarget(e), isSelectable);
          if (t === undefined)
              return;
          const target = t;
          const selectedDate = (self.latestSelectedDateObj = new Date(target.dateObj.getTime()));
          const shouldChangeMonth = (selectedDate.getMonth() < self.currentMonth ||
              selectedDate.getMonth() >
                  self.currentMonth + self.config.showMonths - 1) &&
              self.config.mode !== "range";
          self.selectedDateElem = target;
          if (self.config.mode === "single")
              self.selectedDates = [selectedDate];
          else if (self.config.mode === "multiple") {
              const selectedIndex = isDateSelected(selectedDate);
              if (selectedIndex)
                  self.selectedDates.splice(parseInt(selectedIndex), 1);
              else
                  self.selectedDates.push(selectedDate);
          }
          else if (self.config.mode === "range") {
              if (self.selectedDates.length === 2) {
                  self.clear(false, false);
              }
              self.latestSelectedDateObj = selectedDate;
              self.selectedDates.push(selectedDate);
              if (compareDates(selectedDate, self.selectedDates[0], true) !== 0)
                  self.selectedDates.sort((a, b) => a.getTime() - b.getTime());
          }
          setHoursFromInputs();
          if (shouldChangeMonth) {
              const isNewYear = self.currentYear !== selectedDate.getFullYear();
              self.currentYear = selectedDate.getFullYear();
              self.currentMonth = selectedDate.getMonth();
              if (isNewYear) {
                  triggerEvent("onYearChange");
                  buildMonthSwitch();
              }
              triggerEvent("onMonthChange");
          }
          updateNavigationCurrentMonth();
          buildDays();
          updateValue();
          if (!shouldChangeMonth &&
              self.config.mode !== "range" &&
              self.config.showMonths === 1)
              focusOnDayElem(target);
          else if (self.selectedDateElem !== undefined &&
              self.hourElement === undefined) {
              self.selectedDateElem && self.selectedDateElem.focus();
          }
          if (self.hourElement !== undefined)
              self.hourElement !== undefined && self.hourElement.focus();
          if (self.config.closeOnSelect) {
              const single = self.config.mode === "single" && !self.config.enableTime;
              const range = self.config.mode === "range" &&
                  self.selectedDates.length === 2 &&
                  !self.config.enableTime;
              if (single || range) {
                  focusAndClose();
              }
          }
          triggerChange();
      }
      const CALLBACKS = {
          locale: [setupLocale, updateWeekdays],
          showMonths: [buildMonths, setCalendarWidth, buildWeekdays],
          minDate: [jumpToDate],
          maxDate: [jumpToDate],
          clickOpens: [
              () => {
                  if (self.config.clickOpens === true) {
                      bind(self._input, "focus", self.open);
                      bind(self._input, "click", self.open);
                  }
                  else {
                      self._input.removeEventListener("focus", self.open);
                      self._input.removeEventListener("click", self.open);
                  }
              },
          ],
      };
      function set(option, value) {
          if (option !== null && typeof option === "object") {
              Object.assign(self.config, option);
              for (const key in option) {
                  if (CALLBACKS[key] !== undefined)
                      CALLBACKS[key].forEach((x) => x());
              }
          }
          else {
              self.config[option] = value;
              if (CALLBACKS[option] !== undefined)
                  CALLBACKS[option].forEach((x) => x());
              else if (HOOKS.indexOf(option) > -1)
                  self.config[option] = arrayify(value);
          }
          self.redraw();
          updateValue(true);
      }
      function setSelectedDate(inputDate, format) {
          let dates = [];
          if (inputDate instanceof Array)
              dates = inputDate.map((d) => self.parseDate(d, format));
          else if (inputDate instanceof Date || typeof inputDate === "number")
              dates = [self.parseDate(inputDate, format)];
          else if (typeof inputDate === "string") {
              switch (self.config.mode) {
                  case "single":
                  case "time":
                      dates = [self.parseDate(inputDate, format)];
                      break;
                  case "multiple":
                      dates = inputDate
                          .split(self.config.conjunction)
                          .map((date) => self.parseDate(date, format));
                      break;
                  case "range":
                      dates = inputDate
                          .split(self.l10n.rangeSeparator)
                          .map((date) => self.parseDate(date, format));
                      break;
              }
          }
          else
              self.config.errorHandler(new Error(`Invalid date supplied: ${JSON.stringify(inputDate)}`));
          self.selectedDates = (self.config.allowInvalidPreload
              ? dates
              : dates.filter((d) => d instanceof Date && isEnabled(d, false)));
          if (self.config.mode === "range")
              self.selectedDates.sort((a, b) => a.getTime() - b.getTime());
      }
      function setDate(date, triggerChange = false, format = self.config.dateFormat) {
          if ((date !== 0 && !date) || (date instanceof Array && date.length === 0))
              return self.clear(triggerChange);
          setSelectedDate(date, format);
          self.latestSelectedDateObj =
              self.selectedDates[self.selectedDates.length - 1];
          self.redraw();
          jumpToDate(undefined, triggerChange);
          setHoursFromDate();
          if (self.selectedDates.length === 0) {
              self.clear(false);
          }
          updateValue(triggerChange);
          if (triggerChange)
              triggerEvent("onChange");
      }
      function parseDateRules(arr) {
          return arr
              .slice()
              .map((rule) => {
              if (typeof rule === "string" ||
                  typeof rule === "number" ||
                  rule instanceof Date) {
                  return self.parseDate(rule, undefined, true);
              }
              else if (rule &&
                  typeof rule === "object" &&
                  rule.from &&
                  rule.to)
                  return {
                      from: self.parseDate(rule.from, undefined),
                      to: self.parseDate(rule.to, undefined),
                  };
              return rule;
          })
              .filter((x) => x);
      }
      function setupDates() {
          self.selectedDates = [];
          self.now = self.parseDate(self.config.now) || new Date();
          const preloadedDate = self.config.defaultDate ||
              ((self.input.nodeName === "INPUT" ||
                  self.input.nodeName === "TEXTAREA") &&
                  self.input.placeholder &&
                  self.input.value === self.input.placeholder
                  ? null
                  : self.input.value);
          if (preloadedDate)
              setSelectedDate(preloadedDate, self.config.dateFormat);
          self._initialDate =
              self.selectedDates.length > 0
                  ? self.selectedDates[0]
                  : self.config.minDate &&
                      self.config.minDate.getTime() > self.now.getTime()
                      ? self.config.minDate
                      : self.config.maxDate &&
                          self.config.maxDate.getTime() < self.now.getTime()
                          ? self.config.maxDate
                          : self.now;
          self.currentYear = self._initialDate.getFullYear();
          self.currentMonth = self._initialDate.getMonth();
          if (self.selectedDates.length > 0)
              self.latestSelectedDateObj = self.selectedDates[0];
          if (self.config.minTime !== undefined)
              self.config.minTime = self.parseDate(self.config.minTime, "H:i");
          if (self.config.maxTime !== undefined)
              self.config.maxTime = self.parseDate(self.config.maxTime, "H:i");
          self.minDateHasTime =
              !!self.config.minDate &&
                  (self.config.minDate.getHours() > 0 ||
                      self.config.minDate.getMinutes() > 0 ||
                      self.config.minDate.getSeconds() > 0);
          self.maxDateHasTime =
              !!self.config.maxDate &&
                  (self.config.maxDate.getHours() > 0 ||
                      self.config.maxDate.getMinutes() > 0 ||
                      self.config.maxDate.getSeconds() > 0);
      }
      function setupInputs() {
          self.input = getInputElem();
          if (!self.input) {
              self.config.errorHandler(new Error("Invalid input element specified"));
              return;
          }
          self.input._type = self.input.type;
          self.input.type = "text";
          self.input.classList.add("flatpickr-input");
          self._input = self.input;
          if (self.config.altInput) {
              self.altInput = createElement(self.input.nodeName, self.config.altInputClass);
              self._input = self.altInput;
              self.altInput.placeholder = self.input.placeholder;
              self.altInput.disabled = self.input.disabled;
              self.altInput.required = self.input.required;
              self.altInput.tabIndex = self.input.tabIndex;
              self.altInput.type = "text";
              self.input.setAttribute("type", "hidden");
              if (!self.config.static && self.input.parentNode)
                  self.input.parentNode.insertBefore(self.altInput, self.input.nextSibling);
          }
          if (!self.config.allowInput)
              self._input.setAttribute("readonly", "readonly");
          self._positionElement = self.config.positionElement || self._input;
      }
      function setupMobile() {
          const inputType = self.config.enableTime
              ? self.config.noCalendar
                  ? "time"
                  : "datetime-local"
              : "date";
          self.mobileInput = createElement("input", self.input.className + " flatpickr-mobile");
          self.mobileInput.tabIndex = 1;
          self.mobileInput.type = inputType;
          self.mobileInput.disabled = self.input.disabled;
          self.mobileInput.required = self.input.required;
          self.mobileInput.placeholder = self.input.placeholder;
          self.mobileFormatStr =
              inputType === "datetime-local"
                  ? "Y-m-d\\TH:i:S"
                  : inputType === "date"
                      ? "Y-m-d"
                      : "H:i:S";
          if (self.selectedDates.length > 0) {
              self.mobileInput.defaultValue = self.mobileInput.value = self.formatDate(self.selectedDates[0], self.mobileFormatStr);
          }
          if (self.config.minDate)
              self.mobileInput.min = self.formatDate(self.config.minDate, "Y-m-d");
          if (self.config.maxDate)
              self.mobileInput.max = self.formatDate(self.config.maxDate, "Y-m-d");
          if (self.input.getAttribute("step"))
              self.mobileInput.step = String(self.input.getAttribute("step"));
          self.input.type = "hidden";
          if (self.altInput !== undefined)
              self.altInput.type = "hidden";
          try {
              if (self.input.parentNode)
                  self.input.parentNode.insertBefore(self.mobileInput, self.input.nextSibling);
          }
          catch (_a) { }
          bind(self.mobileInput, "change", (e) => {
              self.setDate(getEventTarget(e).value, false, self.mobileFormatStr);
              triggerEvent("onChange");
              triggerEvent("onClose");
          });
      }
      function toggle(e) {
          if (self.isOpen === true)
              return self.close();
          self.open(e);
      }
      function triggerEvent(event, data) {
          if (self.config === undefined)
              return;
          const hooks = self.config[event];
          if (hooks !== undefined && hooks.length > 0) {
              for (let i = 0; hooks[i] && i < hooks.length; i++)
                  hooks[i](self.selectedDates, self.input.value, self, data);
          }
          if (event === "onChange") {
              self.input.dispatchEvent(createEvent("change"));
              self.input.dispatchEvent(createEvent("input"));
          }
      }
      function createEvent(name) {
          const e = document.createEvent("Event");
          e.initEvent(name, true, true);
          return e;
      }
      function isDateSelected(date) {
          for (let i = 0; i < self.selectedDates.length; i++) {
              if (compareDates(self.selectedDates[i], date) === 0)
                  return "" + i;
          }
          return false;
      }
      function isDateInRange(date) {
          if (self.config.mode !== "range" || self.selectedDates.length < 2)
              return false;
          return (compareDates(date, self.selectedDates[0]) >= 0 &&
              compareDates(date, self.selectedDates[1]) <= 0);
      }
      function updateNavigationCurrentMonth() {
          if (self.config.noCalendar || self.isMobile || !self.monthNav)
              return;
          self.yearElements.forEach((yearElement, i) => {
              const d = new Date(self.currentYear, self.currentMonth, 1);
              d.setMonth(self.currentMonth + i);
              if (self.config.showMonths > 1 ||
                  self.config.monthSelectorType === "static") {
                  self.monthElements[i].textContent =
                      monthToStr(d.getMonth(), self.config.shorthandCurrentMonth, self.l10n) + " ";
              }
              else {
                  self.monthsDropdownContainer.value = d.getMonth().toString();
              }
              yearElement.value = d.getFullYear().toString();
          });
          self._hidePrevMonthArrow =
              self.config.minDate !== undefined &&
                  (self.currentYear === self.config.minDate.getFullYear()
                      ? self.currentMonth <= self.config.minDate.getMonth()
                      : self.currentYear < self.config.minDate.getFullYear());
          self._hideNextMonthArrow =
              self.config.maxDate !== undefined &&
                  (self.currentYear === self.config.maxDate.getFullYear()
                      ? self.currentMonth + 1 > self.config.maxDate.getMonth()
                      : self.currentYear > self.config.maxDate.getFullYear());
      }
      function getDateStr(format) {
          return self.selectedDates
              .map((dObj) => self.formatDate(dObj, format))
              .filter((d, i, arr) => self.config.mode !== "range" ||
              self.config.enableTime ||
              arr.indexOf(d) === i)
              .join(self.config.mode !== "range"
              ? self.config.conjunction
              : self.l10n.rangeSeparator);
      }
      function updateValue(triggerChange = true) {
          if (self.mobileInput !== undefined && self.mobileFormatStr) {
              self.mobileInput.value =
                  self.latestSelectedDateObj !== undefined
                      ? self.formatDate(self.latestSelectedDateObj, self.mobileFormatStr)
                      : "";
          }
          self.input.value = getDateStr(self.config.dateFormat);
          if (self.altInput !== undefined) {
              self.altInput.value = getDateStr(self.config.altFormat);
          }
          if (triggerChange !== false)
              triggerEvent("onValueUpdate");
      }
      function onMonthNavClick(e) {
          const eventTarget = getEventTarget(e);
          const isPrevMonth = self.prevMonthNav.contains(eventTarget);
          const isNextMonth = self.nextMonthNav.contains(eventTarget);
          if (isPrevMonth || isNextMonth) {
              changeMonth(isPrevMonth ? -1 : 1);
          }
          else if (self.yearElements.indexOf(eventTarget) >= 0) {
              eventTarget.select();
          }
          else if (eventTarget.classList.contains("arrowUp")) {
              self.changeYear(self.currentYear + 1);
          }
          else if (eventTarget.classList.contains("arrowDown")) {
              self.changeYear(self.currentYear - 1);
          }
      }
      function timeWrapper(e) {
          e.preventDefault();
          const isKeyDown = e.type === "keydown", eventTarget = getEventTarget(e), input = eventTarget;
          if (self.amPM !== undefined && eventTarget === self.amPM) {
              self.amPM.textContent =
                  self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
          }
          const min = parseFloat(input.getAttribute("min")), max = parseFloat(input.getAttribute("max")), step = parseFloat(input.getAttribute("step")), curValue = parseInt(input.value, 10), delta = e.delta ||
              (isKeyDown ? (e.which === 38 ? 1 : -1) : 0);
          let newValue = curValue + step * delta;
          if (typeof input.value !== "undefined" && input.value.length === 2) {
              const isHourElem = input === self.hourElement, isMinuteElem = input === self.minuteElement;
              if (newValue < min) {
                  newValue =
                      max +
                          newValue +
                          int(!isHourElem) +
                          (int(isHourElem) && int(!self.amPM));
                  if (isMinuteElem)
                      incrementNumInput(undefined, -1, self.hourElement);
              }
              else if (newValue > max) {
                  newValue =
                      input === self.hourElement ? newValue - max - int(!self.amPM) : min;
                  if (isMinuteElem)
                      incrementNumInput(undefined, 1, self.hourElement);
              }
              if (self.amPM &&
                  isHourElem &&
                  (step === 1
                      ? newValue + curValue === 23
                      : Math.abs(newValue - curValue) > step)) {
                  self.amPM.textContent =
                      self.l10n.amPM[int(self.amPM.textContent === self.l10n.amPM[0])];
              }
              input.value = pad(newValue);
          }
      }
      init();
      return self;
  }
  function _flatpickr(nodeList, config) {
      const nodes = Array.prototype.slice
          .call(nodeList)
          .filter((x) => x instanceof HTMLElement);
      const instances = [];
      for (let i = 0; i < nodes.length; i++) {
          const node = nodes[i];
          try {
              if (node.getAttribute("data-fp-omit") !== null)
                  continue;
              if (node._flatpickr !== undefined) {
                  node._flatpickr.destroy();
                  node._flatpickr = undefined;
              }
              node._flatpickr = FlatpickrInstance(node, config || {});
              instances.push(node._flatpickr);
          }
          catch (e) {
              console.error(e);
          }
      }
      return instances.length === 1 ? instances[0] : instances;
  }
  if (typeof HTMLElement !== "undefined" &&
      typeof HTMLCollection !== "undefined" &&
      typeof NodeList !== "undefined") {
      HTMLCollection.prototype.flatpickr = NodeList.prototype.flatpickr = function (config) {
          return _flatpickr(this, config);
      };
      HTMLElement.prototype.flatpickr = function (config) {
          return _flatpickr([this], config);
      };
  }
  var flatpickr = function (selector, config) {
      if (typeof selector === "string") {
          return _flatpickr(window.document.querySelectorAll(selector), config);
      }
      else if (selector instanceof Node) {
          return _flatpickr([selector], config);
      }
      else {
          return _flatpickr(selector, config);
      }
  };
  flatpickr.defaultConfig = {};
  flatpickr.l10ns = {
      en: Object.assign({}, english),
      default: Object.assign({}, english),
  };
  flatpickr.localize = (l10n) => {
      flatpickr.l10ns.default = Object.assign(Object.assign({}, flatpickr.l10ns.default), l10n);
  };
  flatpickr.setDefaults = (config) => {
      flatpickr.defaultConfig = Object.assign(Object.assign({}, flatpickr.defaultConfig), config);
  };
  flatpickr.parseDate = createDateParser({});
  flatpickr.formatDate = createDateFormatter({});
  flatpickr.compareDates = compareDates;
  if (typeof jQuery !== "undefined" && typeof jQuery.fn !== "undefined") {
      jQuery.fn.flatpickr = function (config) {
          return _flatpickr(this, config);
      };
  }
  Date.prototype.fp_incr = function (days) {
      return new Date(this.getFullYear(), this.getMonth(), this.getDate() + (typeof days === "string" ? parseInt(days, 10) : days));
  };
  if (typeof window !== "undefined") {
      window.flatpickr = flatpickr;
  }

  flatpickr(".form__date", {
    dateFormat: "d-m-Y",
    disableMobile: "true"
  });
  flatpickr(".form__time", {
    enableTime: true,
    noCalendar: true,
    dateFormat: "H-i",
    disableMobile: "true"
  });

  // Polyfill for creating CustomEvents on IE9/10/11

  // code pulled from:
  // https://github.com/d4tocchini/customevent-polyfill
  // https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent#Polyfill

  try {
      var ce = new window.CustomEvent('test');
      ce.preventDefault();
      if (ce.defaultPrevented !== true) {
          // IE has problems with .preventDefault() on custom events
          // http://stackoverflow.com/questions/23349191
          throw new Error('Could not prevent default');
      }
  } catch(e) {
    var CustomEvent$1 = function(event, params) {
      var evt, origPrevent;
      params = params || {
        bubbles: false,
        cancelable: false,
        detail: undefined
      };

      evt = document.createEvent("CustomEvent");
      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
      origPrevent = evt.preventDefault;
      evt.preventDefault = function () {
        origPrevent.call(this);
        try {
          Object.defineProperty(this, 'defaultPrevented', {
            get: function () {
              return true;
            }
          });
        } catch(e) {
          this.defaultPrevented = true;
        }
      };
      return evt;
    };

    CustomEvent$1.prototype = window.Event.prototype;
    window.CustomEvent = CustomEvent$1; // expose definition to window
  }

  var customEventPolyfill = /*#__PURE__*/Object.freeze({
    __proto__: null
  });

  getCjsExportFromNamespace(customEventPolyfill);

  var build = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }(); /**
custom-select
lightweight JS script for custom select creation.
eeds no dependencies.

v0.0.1
https://github.com/custom-select/custom-select)
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            *
opyright (c) 2016 Gionatan Lombardi & Marco Nucara
icense


  exports.default = customSelect;



  var defaultParams = {
    containerClass: 'custom-select-container',
    openerClass: 'custom-select-opener',
    panelClass: 'custom-select-panel',
    optionClass: 'custom-select-option',
    optgroupClass: 'custom-select-optgroup',
    isSelectedClass: 'is-selected',
    hasFocusClass: 'has-focus',
    isDisabledClass: 'is-disabled',
    isOpenClass: 'is-open'
  };

  function builder(el, builderParams) {
    var containerClass = 'customSelect';
    var isOpen = false;
    var uId = '';
    var select = el;
    var container = void 0;
    var opener = void 0;
    var focusedElement = void 0;
    var selectedElement = void 0;
    var panel = void 0;
    var currLabel = void 0;

    var resetSearchTimeout = void 0;
    var searchKey = '';

    //
    // Inner Functions
    //

    // Sets the focused element with the neccessary classes substitutions
    function setFocusedElement(cstOption) {
      if (focusedElement) {
        focusedElement.classList.remove(builderParams.hasFocusClass);
      }
      if (typeof cstOption !== 'undefined') {
        focusedElement = cstOption;
        focusedElement.classList.add(builderParams.hasFocusClass);
        // Offset update: checks if the focused element is in the visible part of the panelClass
        // if not dispatches a custom event
        if (isOpen) {
          if (cstOption.offsetTop < cstOption.offsetParent.scrollTop || cstOption.offsetTop > cstOption.offsetParent.scrollTop + cstOption.offsetParent.clientHeight - cstOption.clientHeight) {
            cstOption.dispatchEvent(new CustomEvent('custom-select:focus-outside-panel', { bubbles: true }));
          }
        }
      } else {
        focusedElement = undefined;
      }
    }

    // Reassigns the focused and selected custom option
    // Updates the opener text
    // IMPORTANT: the setSelectedElement function doesn't change the select value!
    function setSelectedElement(cstOption) {
      if (selectedElement) {
        selectedElement.classList.remove(builderParams.isSelectedClass);
        selectedElement.removeAttribute('id');
        opener.removeAttribute('aria-activedescendant');
      }
      if (typeof cstOption !== 'undefined') {
        cstOption.classList.add(builderParams.isSelectedClass);
        cstOption.setAttribute('id', containerClass + '-' + uId + '-selectedOption');
        opener.setAttribute('aria-activedescendant', containerClass + '-' + uId + '-selectedOption');
        selectedElement = cstOption;
        opener.children[0].textContent = selectedElement.customSelectOriginalOption.text;
      } else {
        selectedElement = undefined;
        opener.children[0].textContent = '';
      }
      setFocusedElement(cstOption);
    }

    function setValue(value) {
      // Gets the option with the provided value
      var toSelect = select.querySelector('option[value=\'' + value + '\']');
      // If no option has the provided value get the first
      if (!toSelect) {
        var _select$options = _slicedToArray(select.options, 1);

        toSelect = _select$options[0];
      }
      // The option with the provided value becomes the selected one
      // And changes the select current value
      toSelect.selected = true;

      setSelectedElement(select.options[select.selectedIndex].customSelectCstOption);
    }

    function moveFocuesedElement(direction) {
      // Get all the .custom-select-options
      // Get the index of the current focused one
      var currentFocusedIndex = [].indexOf.call(select.options, focusedElement.customSelectOriginalOption);
      // If the next or prev custom option exist
      // Sets it as the new focused one
      if (select.options[currentFocusedIndex + direction]) {
        setFocusedElement(select.options[currentFocusedIndex + direction].customSelectCstOption);
      }
    }

    // Open/Close function (toggle)
    function open(bool) {
      // Open
      if (bool || typeof bool === 'undefined') {
        // If present closes an opened instance of the plugin
        // Only one at time can be open
        var openedCustomSelect = document.querySelector('.' + containerClass + '.' + builderParams.isOpenClass);
        if (openedCustomSelect) {
          openedCustomSelect.customSelect.open = false;
        }

        // Opens only the clicked one
        container.classList.add(builderParams.isOpenClass);

        // aria-expanded update
        container.classList.add(builderParams.isOpenClass);
        opener.setAttribute('aria-expanded', 'true');

        // Updates the scrollTop position of the panel in relation with the focused option
        if (selectedElement) {
          panel.scrollTop = selectedElement.offsetTop;
        }

        // Dispatches the custom event open
        container.dispatchEvent(new CustomEvent('custom-select:open'));

        // Sets the global state
        isOpen = true;

        // Close
      } else {
        // Removes the css classes
        container.classList.remove(builderParams.isOpenClass);

        // aria-expanded update
        opener.setAttribute('aria-expanded', 'false');

        // Sets the global state
        isOpen = false;

        // When closing the panel the focused custom option must be the selected one
        setFocusedElement(selectedElement);

        // Dispatches the custom event close
        container.dispatchEvent(new CustomEvent('custom-select:close'));
      }
      return isOpen;
    }

    function clickEvent(e) {
      // Opener click
      if (e.target === opener || opener.contains(e.target)) {
        if (isOpen) {
          open(false);
        } else {
          open();
        }
        // Custom Option click
      } else if (e.target.classList && e.target.classList.contains(builderParams.optionClass) && panel.contains(e.target)) {
        setSelectedElement(e.target);
        // Sets the corrisponding select's option to selected updating the select's value too
        selectedElement.customSelectOriginalOption.selected = true;
        open(false);
        // Triggers the native change event of the select
        select.dispatchEvent(new CustomEvent('change'));
        // click on label or select (click on label corrispond to select click)
      } else if (e.target === select) {
        // if the original select is focusable (for any external reason) let the focus
        // else trigger the focus on opener
        if (opener !== document.activeElement && select !== document.activeElement) {
          opener.focus();
        }
        // Click outside the container closes the panel
      } else if (isOpen && !container.contains(e.target)) {
        open(false);
      }
    }

    function mouseoverEvent(e) {
      // On mouse move over and options it bacames the focused one
      if (e.target.classList && e.target.classList.contains(builderParams.optionClass)) {
        setFocusedElement(e.target);
      }
    }

    function keydownEvent(e) {
      if (!isOpen) {
        // On "Arrow down", "Arrow up" and "Space" keys opens the panel
        if (e.keyCode === 40 || e.keyCode === 38 || e.keyCode === 32) {
          open();
        }
      } else {
        switch (e.keyCode) {
          case 13:
          case 32:
            // On "Enter" or "Space" selects the focused element as the selected one
            setSelectedElement(focusedElement);
            // Sets the corrisponding select's option to selected updating the select's value too
            selectedElement.customSelectOriginalOption.selected = true;
            // Triggers the native change event of the select
            select.dispatchEvent(new CustomEvent('change'));
            open(false);
            break;
          case 27:
            // On "Escape" closes the panel
            open(false);
            break;

          case 38:
            // On "Arrow up" set focus to the prev option if present
            moveFocuesedElement(-1);
            break;
          case 40:
            // On "Arrow down" set focus to the next option if present
            moveFocuesedElement(+1);
            break;
          default:
            // search in panel (autocomplete)
            if (e.keyCode >= 48 && e.keyCode <= 90) {
              // clear existing reset timeout
              if (resetSearchTimeout) {
                clearTimeout(resetSearchTimeout);
              }

              // reset timeout for empty search key
              resetSearchTimeout = setTimeout(function () {
                searchKey = '';
              }, 1500);

              // update search keyword appending the current key
              searchKey += String.fromCharCode(e.keyCode);

              // search the element
              for (var i = 0, l = select.options.length; i < l; i++) {
                // removed cause not supported by IE:
                // if (options[i].text.startsWith(searchKey))
                if (select.options[i].text.toUpperCase().substr(0, searchKey.length) === searchKey) {
                  setFocusedElement(select.options[i].customSelectCstOption);
                  break;
                }
              }
            }
            break;
        }
      }
    }

    function changeEvent() {
      var index = select.selectedIndex;
      var element = index === -1 ? undefined : select.options[index].customSelectCstOption;

      setSelectedElement(element);
    }

    // When the option is outside the visible part of the opened panel, updates the scrollTop position
    // This is the default behaviour
    // To block it the plugin user must
    // add a "custom-select:focus-outside-panel" eventListener on the panel
    // with useCapture set to true
    // and stopPropagation
    function scrollToFocused(e) {
      var currPanel = e.currentTarget;
      var currOption = e.target;
      // Up
      if (currOption.offsetTop < currPanel.scrollTop) {
        currPanel.scrollTop = currOption.offsetTop;
        // Down
      } else {
        currPanel.scrollTop = currOption.offsetTop + currOption.clientHeight - currPanel.clientHeight;
      }
    }

    function addEvents() {
      document.addEventListener('click', clickEvent);
      panel.addEventListener('mouseover', mouseoverEvent);
      panel.addEventListener('custom-select:focus-outside-panel', scrollToFocused);
      select.addEventListener('change', changeEvent);
      container.addEventListener('keydown', keydownEvent);
    }

    function removeEvents() {
      document.removeEventListener('click', clickEvent);
      panel.removeEventListener('mouseover', mouseoverEvent);
      panel.removeEventListener('custom-select:focus-outside-panel', scrollToFocused);
      select.removeEventListener('change', changeEvent);
      container.removeEventListener('keydown', keydownEvent);
    }

    function disabled(bool) {
      if (bool && !select.disabled) {
        container.classList.add(builderParams.isDisabledClass);
        select.disabled = true;
        opener.removeAttribute('tabindex');
        container.dispatchEvent(new CustomEvent('custom-select:disabled'));
        removeEvents();
      } else if (!bool && select.disabled) {
        container.classList.remove(builderParams.isDisabledClass);
        select.disabled = false;
        opener.setAttribute('tabindex', '0');
        container.dispatchEvent(new CustomEvent('custom-select:enabled'));
        addEvents();
      }
    }

    // Form a given select children DOM tree (options and optgroup),
    // Creates the corresponding custom HTMLElements list (divs with different classes and attributes)
    function parseMarkup(children) {
      var nodeList = children;
      var cstList = [];

      if (typeof nodeList.length === 'undefined') {
        throw new TypeError('Invalid Argument');
      }

      for (var i = 0, li = nodeList.length; i < li; i++) {
        if (nodeList[i] instanceof HTMLElement && nodeList[i].tagName.toUpperCase() === 'OPTGROUP') {
          var cstOptgroup = document.createElement('div');
          cstOptgroup.classList.add(builderParams.optgroupClass);
          cstOptgroup.setAttribute('data-label', nodeList[i].label);

          // IMPORTANT: Stores in a property of the created custom option group
          // a hook to the the corrisponding select's option group
          cstOptgroup.customSelectOriginalOptgroup = nodeList[i];

          // IMPORTANT: Stores in a property of select's option group
          // a hook to the created custom option group
          nodeList[i].customSelectCstOptgroup = cstOptgroup;

          var subNodes = parseMarkup(nodeList[i].children);
          for (var j = 0, lj = subNodes.length; j < lj; j++) {
            cstOptgroup.appendChild(subNodes[j]);
          }

          cstList.push(cstOptgroup);
        } else if (nodeList[i] instanceof HTMLElement && nodeList[i].tagName.toUpperCase() === 'OPTION') {
          var cstOption = document.createElement('div');
          cstOption.classList.add(builderParams.optionClass);
          cstOption.textContent = nodeList[i].text;
          cstOption.setAttribute('data-value', nodeList[i].value);
          cstOption.setAttribute('role', 'option');

          // IMPORTANT: Stores in a property of the created custom option
          // a hook to the the corrisponding select's option
          cstOption.customSelectOriginalOption = nodeList[i];

          // IMPORTANT: Stores in a property of select's option
          // a hook to the created custom option
          nodeList[i].customSelectCstOption = cstOption;

          // If the select's option is selected
          if (nodeList[i].selected) {
            setSelectedElement(cstOption);
          }
          cstList.push(cstOption);
        } else {
          throw new TypeError('Invalid Argument');
        }
      }
      return cstList;
    }

    function _append(nodePar, appendIntoOriginal, targetPar) {
      var target = void 0;
      if (typeof targetPar === 'undefined' || targetPar === select) {
        target = panel;
      } else if (targetPar instanceof HTMLElement && targetPar.tagName.toUpperCase() === 'OPTGROUP' && select.contains(targetPar)) {
        target = targetPar.customSelectCstOptgroup;
      } else {
        throw new TypeError('Invalid Argument');
      }

      // If the node provided is a single HTMLElement it is stored in an array
      var node = nodePar instanceof HTMLElement ? [nodePar] : nodePar;

      // Injects the options|optgroup in the select
      if (appendIntoOriginal) {
        for (var i = 0, l = node.length; i < l; i++) {
          if (target === panel) {
            select.appendChild(node[i]);
          } else {
            target.customSelectOriginalOptgroup.appendChild(node[i]);
          }
        }
      }

      // The custom markup to append
      var markupToInsert = parseMarkup(node);

      // Injects the created DOM content in the panel
      for (var _i = 0, _l = markupToInsert.length; _i < _l; _i++) {
        target.appendChild(markupToInsert[_i]);
      }

      return node;
    }

    function _insertBefore(node, targetPar) {
      var target = void 0;
      if (targetPar instanceof HTMLElement && targetPar.tagName.toUpperCase() === 'OPTION' && select.contains(targetPar)) {
        target = targetPar.customSelectCstOption;
      } else if (targetPar instanceof HTMLElement && targetPar.tagName.toUpperCase() === 'OPTGROUP' && select.contains(targetPar)) {
        target = targetPar.customSelectCstOptgroup;
      } else {
        throw new TypeError('Invalid Argument');
      }

      // The custom markup to append
      var markupToInsert = parseMarkup(node.length ? node : [node]);

      target.parentNode.insertBefore(markupToInsert[0], target);

      // Injects the option or optgroup node in the original select and returns the injected node
      return targetPar.parentNode.insertBefore(node.length ? node[0] : node, targetPar);
    }

    function remove(node) {
      var cstNode = void 0;
      if (node instanceof HTMLElement && node.tagName.toUpperCase() === 'OPTION' && select.contains(node)) {
        cstNode = node.customSelectCstOption;
      } else if (node instanceof HTMLElement && node.tagName.toUpperCase() === 'OPTGROUP' && select.contains(node)) {
        cstNode = node.customSelectCstOptgroup;
      } else {
        throw new TypeError('Invalid Argument');
      }
      cstNode.parentNode.removeChild(cstNode);
      var removedNode = node.parentNode.removeChild(node);
      changeEvent();
      return removedNode;
    }

    function empty() {
      var removed = [];
      while (select.children.length) {
        panel.removeChild(panel.children[0]);
        removed.push(select.removeChild(select.children[0]));
      }
      setSelectedElement();
      return removed;
    }

    function destroy() {
      for (var i = 0, l = select.options.length; i < l; i++) {
        delete select.options[i].customSelectCstOption;
      }
      var optGroup = select.getElementsByTagName('optgroup');
      for (var _i2 = 0, _l2 = optGroup.length; _i2 < _l2; _i2++) {
        delete optGroup.customSelectCstOptgroup;
      }

      removeEvents();

      return container.parentNode.replaceChild(select, container);
    }
    //
    // Custom Select DOM tree creation
    //

    // Creates the container/wrapper
    container = document.createElement('div');
    container.classList.add(builderParams.containerClass, containerClass);

    // Creates the opener
    opener = document.createElement('span');
    opener.className = builderParams.openerClass;
    opener.setAttribute('role', 'combobox');
    opener.setAttribute('aria-autocomplete', 'list');
    opener.setAttribute('aria-expanded', 'false');
    opener.innerHTML = '<span>\n   ' + (select.selectedIndex !== -1 ? select.options[select.selectedIndex].text : '') + '\n   </span>';

    // Creates the panel
    // and injects the markup of the select inside
    // with some tag and attributes replacement
    panel = document.createElement('div');
    // Create random id
    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (var i = 0; i < 5; i++) {
      uId += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    panel.id = containerClass + '-' + uId + '-panel';
    panel.className = builderParams.panelClass;
    panel.setAttribute('role', 'listbox');
    opener.setAttribute('aria-owns', panel.id);

    _append(select.children, false);

    // Injects the container in the original DOM position of the select
    container.appendChild(opener);
    select.parentNode.replaceChild(container, select);
    container.appendChild(select);
    container.appendChild(panel);

    // ARIA labelledby - label
    if (document.querySelector('label[for="' + select.id + '"]')) {
      currLabel = document.querySelector('label[for="' + select.id + '"]');
    } else if (container.parentNode.tagName.toUpperCase() === 'LABEL') {
      currLabel = container.parentNode;
    }
    if (typeof currLabel !== 'undefined') {
      currLabel.setAttribute('id', containerClass + '-' + uId + '-label');
      opener.setAttribute('aria-labelledby', containerClass + '-' + uId + '-label');
    }

    // Event Init
    if (select.disabled) {
      container.classList.add(builderParams.isDisabledClass);
    } else {
      opener.setAttribute('tabindex', '0');
      select.setAttribute('tabindex', '-1');
      addEvents();
    }

    // Stores the plugin public exposed methods and properties, directly in the container HTMLElement
    container.customSelect = {
      get pluginOptions() {
        return builderParams;
      },
      get open() {
        return isOpen;
      },
      set open(bool) {
        open(bool);
      },
      get disabled() {
        return select.disabled;
      },
      set disabled(bool) {
        disabled(bool);
      },
      get value() {
        return select.value;
      },
      set value(val) {
        setValue(val);
      },
      append: function append(node, target) {
        return _append(node, true, target);
      },
      insertBefore: function insertBefore(node, target) {
        return _insertBefore(node, target);
      },
      remove: remove,
      empty: empty,
      destroy: destroy,
      opener: opener,
      select: select,
      panel: panel,
      container: container
    };

    // Stores the plugin directly in the original select
    select.customSelect = container.customSelect;

    // Returns the plugin instance, with the public exposed methods and properties
    return container.customSelect;
  }

  function customSelect(element, customParams) {
    // Overrides the default options with the ones provided by the user
    var nodeList = [];
    var selects = [];

    return function init() {
      // The plugin is called on a single HTMLElement
      if (element && element instanceof HTMLElement && element.tagName.toUpperCase() === 'SELECT') {
        nodeList.push(element);
        // The plugin is called on a selector
      } else if (element && typeof element === 'string') {
        var elementsList = document.querySelectorAll(element);
        for (var i = 0, l = elementsList.length; i < l; ++i) {
          if (elementsList[i] instanceof HTMLElement && elementsList[i].tagName.toUpperCase() === 'SELECT') {
            nodeList.push(elementsList[i]);
          }
        }
        // The plugin is called on any HTMLElements list (NodeList, HTMLCollection, Array, etc.)
      } else if (element && element.length) {
        for (var _i3 = 0, _l3 = element.length; _i3 < _l3; ++_i3) {
          if (element[_i3] instanceof HTMLElement && element[_i3].tagName.toUpperCase() === 'SELECT') {
            nodeList.push(element[_i3]);
          }
        }
      }

      // Launches the plugin over every HTMLElement
      // And stores every plugin instance
      for (var _i4 = 0, _l4 = nodeList.length; _i4 < _l4; ++_i4) {
        selects.push(builder(nodeList[_i4], _extends({}, defaultParams, customParams)));
      }

      // Returns all plugin instances
      return selects;
    }();
  }


  });

  var customSelect = unwrapExports(build);

  customSelect('select');

  /*
    @ Add body class if:
    - scroll started
    - scrolled to bottom
  */
  var START_OFFSET = 34;
  var START_CLASS = "is-scrolled";
  var BOTTOM_OFFSET = 10;
  var BOTTOM_CLASS = "is-scrolled-bottom";

  var ScrollClass = function ScrollClass() {
    var _this = this;

    _classCallCheck(this, ScrollClass);

    _defineProperty(this, "scrollHandler", function () {
      var top = document.documentElement.scrollTop;
      document.body.classList.toggle(START_CLASS, top >= START_OFFSET);
      document.body.classList.toggle(BOTTOM_CLASS, window.innerHeight + top >= document.body.offsetHeight - BOTTOM_OFFSET);

      _this.oldScroll = top;
    });

    document.addEventListener("scroll", this.scrollHandler, {
      passive: true
    });
  };

  new ScrollClass();

}());

//# sourceMappingURL=data:application/json;charset=utf8;base64,
